diff --git a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
index 979860e..45d143a 100644
--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
@@ -241,19 +241,15 @@ public final class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {
               + "; did you forget to register a subtype?");
         }
         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
-
-        if (maintainType) {
-          Streams.write(jsonObject, out);
-          return;
-        }
-
         JsonObject clone = new JsonObject();
-
-        if (jsonObject.has(typeFieldName)) {
-          throw new JsonParseException("cannot serialize " + srcType.getName()
-              + " because it already defines a field named " + typeFieldName);
+        
+        if (!maintainType) {
+            if (jsonObject.has(typeFieldName)) {
+              throw new JsonParseException("cannot serialize " + srcType.getName()
+                  + " because it already defines a field named " + typeFieldName);
+            }
+            clone.add(typeFieldName, new JsonPrimitive(label));
         }
-        clone.add(typeFieldName, new JsonPrimitive(label));
         
         for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {
           clone.add(e.getKey(), e.getValue());
