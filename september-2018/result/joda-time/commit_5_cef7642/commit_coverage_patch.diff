diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index 63a3ac2..d8b87c3 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -149,6 +149,11 @@ public class ZoneInfoCompiler {
      * @param zimap maps string ids to DateTimeZone objects.
      */
     static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zimap) throws IOException {
+
+        if ( dout == null ){
+            throw new IllegalArgumentException("DataOutputStream must not be null.");
+        }
+
         // Build the string pool.
         Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());
         TreeMap<Short, String> indexToId = new TreeMap<Short, String>();
diff --git a/src/test/java/org/joda/time/tz/TestZoneInfoCompiler.java b/src/test/java/org/joda/time/tz/TestZoneInfoCompiler.java
index 0e0dd9b..bb5bfba 100644
--- a/src/test/java/org/joda/time/tz/TestZoneInfoCompiler.java
+++ b/src/test/java/org/joda/time/tz/TestZoneInfoCompiler.java
@@ -76,4 +76,19 @@ public class TestZoneInfoCompiler extends TestCase {
     assertEquals(Integer.MIN_VALUE, ZoneInfoCompiler.parseYear("minimum", (-1971487955)));
   }
 
+  public void testWriteZoneInfoMapThrowsIllegalArgumentException() throws IOException {
+    Map<String, MockZone> hashMap = new HashMap<String, MockZone>();
+    MockZone mockZone = new MockZone(0L, 3022, 90);
+    hashMap.put("     - ", mockZone);
+    Map<String, DateTimeZone> hashMapTwo = new HashMap<String, DateTimeZone>(hashMap);
+    hashMapTwo.put("H)m^v1(", mockZone);
+
+    try {
+      ZoneInfoCompiler.writeZoneInfoMap(null, hashMapTwo);
+      fail("Expecting exception: IllegalArgumentException");
+    } catch (IllegalArgumentException e) {
+      assertEquals(ZoneInfoCompiler.class.getName(), e.getStackTrace()[0].getClassName());
+    }
+  }
+
 }
