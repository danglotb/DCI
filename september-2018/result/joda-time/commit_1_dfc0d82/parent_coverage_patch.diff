diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 78011c8..bdca787 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -509,12 +509,7 @@ public abstract class DateTimeZone implements Serializable {
             String providerClass = System.getProperty("org.joda.time.DateTimeZone.Provider");
             if (providerClass != null) {
                 try {
-                    // do not initialize the class until the type has been checked
-                    Class<?> cls = Class.forName(providerClass, false, DateTimeZone.class.getClassLoader());
-                    if (!Provider.class.isAssignableFrom(cls)) {
-                        throw new IllegalArgumentException("System property referred to class that does not implement " + Provider.class);
-                    }
-                    Provider provider = cls.asSubclass(Provider.class).getConstructor().newInstance();
+                    Provider provider = (Provider) Class.forName(providerClass).newInstance();
                     return validateProvider(provider);
                 } catch (Exception ex) {
                     throw new RuntimeException(ex);
@@ -603,12 +598,7 @@ public abstract class DateTimeZone implements Serializable {
             String providerClass = System.getProperty("org.joda.time.DateTimeZone.NameProvider");
             if (providerClass != null) {
                 try {
-                    // do not initialize the class until the type has been checked
-                    Class<?> cls = Class.forName(providerClass, false, DateTimeZone.class.getClassLoader());
-                    if (!NameProvider.class.isAssignableFrom(cls)) {
-                        throw new IllegalArgumentException("System property referred to class that does not implement " + NameProvider.class);
-                    }
-                    nameProvider = cls.asSubclass(NameProvider.class).getConstructor().newInstance();
+                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();
                 } catch (Exception ex) {
                     throw new RuntimeException(ex);
                 }
