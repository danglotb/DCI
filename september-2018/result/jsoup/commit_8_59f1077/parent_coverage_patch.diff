diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java
index dc8ec1c..61420bf 100644
--- a/src/main/java/org/jsoup/nodes/Element.java
+++ b/src/main/java/org/jsoup/nodes/Element.java
@@ -690,11 +690,11 @@ public class Element extends Node {
     /**
      * Get all the siblings after this element.
      *
-     * @return  all the siblings after this element, or empty list if there is no siblings after this
+     * @return  all the siblings after this element, or null if there is no siblings after this
      */
     public List<Element> nextElementSiblings() {
         if (parentNode == null) {
-            return Collections.emptyList();
+            return null;
         }
 
         List<Element> siblings = parent().childElementsList();
@@ -704,7 +704,7 @@ public class Element extends Node {
         if (siblings.size() > index + 1) {
             return siblings.subList(index + 1, siblings.size());
         }
-        return Collections.emptyList();
+        return null;
     }
 
     /**
@@ -726,11 +726,11 @@ public class Element extends Node {
     /**
      * Get all the element siblings before this element.
      *
-     * @return all the previous element siblings, or empty list if no previous siblings
+     * @return all the previous element siblings, or null if no previous siblings
      */
     public List<Element> previousElementSiblings() {
         if (parentNode == null) {
-            return Collections.emptyList();
+            return null;
         }
 
         List<Element> siblings = parent().childElementsList();
@@ -740,7 +740,7 @@ public class Element extends Node {
         if (index > 0 && index < siblings.size()) {
             return siblings.subList(0, index);
         }
-        return Collections.emptyList();
+        return null;
     }
 
     /**
diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index c985eaa..9e59181 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -14,7 +14,12 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 /**
  * Tests for Element (DOM stuff mostly).
@@ -1321,81 +1326,31 @@ public class ElementTest {
 
     @Test
     public void testNextElementSiblings() {
-        Document doc = Jsoup.parse("<ul id='ul'>" +
-            "<li id='a'>a</li>" +
+        Document doc = Jsoup.parse("<li id='a'>a</li>" +
             "<li id='b'>b</li>" +
-            "<li id='c'>c</li>" +
-            "</ul>" +
-            "<div id='div'>" +
-            "<li id='d'>d</li>" +
-            "</div>");
-
+            "<li id='c'>c</li>");
         Element element = doc.getElementById("a");
         List<Element> elementSiblings = element.nextElementSiblings();
         assertNotNull(elementSiblings);
         assertEquals(2, elementSiblings.size());
-        assertEquals("b", elementSiblings.get(0).id());
-        assertEquals("c", elementSiblings.get(1).id());
 
-        Element element1 = doc.getElementById("b");
+        Element element1 = doc.getElementById("c");
         List<Element> elementSiblings1 = element1.nextElementSiblings();
-        assertNotNull(elementSiblings1);
-        assertEquals(1, elementSiblings1.size());
-        assertEquals("c", elementSiblings1.get(0).id());
-
-        Element element2 = doc.getElementById("c");
-        List<Element> elementSiblings2 = element2.nextElementSiblings();
-        assertEquals(0, elementSiblings2.size());
-
-        Element ul = doc.getElementById("ul");
-        List<Element> elementSiblings3 = ul.nextElementSiblings();
-        assertNotNull(elementSiblings3);
-        assertEquals(1, elementSiblings3.size());
-        assertEquals("div", elementSiblings3.get(0).id());
-
-        Element div = doc.getElementById("div");
-        List<Element> elementSiblings4 = div.nextElementSiblings();
-        try {
-            Element elementSibling = elementSiblings4.get(0);
-            fail("This element should has no next siblings");
-        } catch (IndexOutOfBoundsException e) {
-        }
+        assertNull(elementSiblings1);
     }
 
     @Test
     public void testPreviousElementSiblings() {
-        Document doc = Jsoup.parse("<ul id='ul'>" +
-            "<li id='a'>a</li>" +
+        Document doc = Jsoup.parse("<li id='a'>a</li>" +
             "<li id='b'>b</li>" +
-            "<li id='c'>c</li>" +
-            "</ul>" +
-            "<div id='div'>" +
-            "<li id='d'>d</li>" +
-            "</div>");
-
+            "<li id='c'>c</li>");
         Element element = doc.getElementById("b");
         List<Element> elementSiblings = element.previousElementSiblings();
         assertNotNull(elementSiblings);
         assertEquals(1, elementSiblings.size());
-        assertEquals("a", elementSiblings.get(0).id());
 
         Element element1 = doc.getElementById("a");
         List<Element> elementSiblings1 = element1.previousElementSiblings();
-        assertEquals(0, elementSiblings1.size());
-
-        Element element2 = doc.getElementById("c");
-        List<Element> elementSiblings2 = element2.previousElementSiblings();
-        assertNotNull(elementSiblings2);
-        assertEquals(2, elementSiblings2.size());
-        assertEquals("a", elementSiblings2.get(0).id());
-        assertEquals("b", elementSiblings2.get(1).id());
-
-        Element ul = doc.getElementById("ul");
-        List<Element> elementSiblings3 = ul.previousElementSiblings();
-        try {
-            Element element3 = elementSiblings3.get(0);
-            fail("This element should has no previous siblings");
-        } catch (IndexOutOfBoundsException e) {
-        }
+        assertNull(elementSiblings1);
     }
 }
