diff --git a/CHANGES b/CHANGES
index bb4d7da..e6afd38 100644
--- a/CHANGES
+++ b/CHANGES
@@ -22,7 +22,7 @@ jsoup changelog
     many pages.
     <https://github.com/jhy/jsoup/issues/797>
 
-  * Improvement: performance optimization when parsing tables.
+  * Improvement: performance tweaks when parsing start tags, data, tables.
 
   * Bugfix: when converting a Jsoup document to a W3C DOM, if an element is namespaced but not in a defined namespace,
     set it to the global namespace.
diff --git a/src/main/java/org/jsoup/parser/CharacterReader.java b/src/main/java/org/jsoup/parser/CharacterReader.java
index 9253bf6..1bc6092 100644
--- a/src/main/java/org/jsoup/parser/CharacterReader.java
+++ b/src/main/java/org/jsoup/parser/CharacterReader.java
@@ -195,11 +195,11 @@ public final class CharacterReader {
      */
     public String consumeToAny(final char... chars) {
         bufferUp();
-        final int start = bufPos;
+        int pos = bufPos;
+        final int start = pos;
         final int remaining = bufLength;
         final char[] val = charBuf;
         final int charLen = chars.length;
-        int pos = bufPos;
         int i;
 
         OUTER: while (pos < remaining) {
@@ -216,10 +216,10 @@ public final class CharacterReader {
 
     String consumeToAnySorted(final char... chars) {
         bufferUp();
-        final int start = bufPos;
+        int pos = bufPos;
+        final int start = pos;
         final int remaining = bufLength;
         final char[] val = charBuf;
-        int pos = bufPos;
 
         while (pos < remaining) {
             if (Arrays.binarySearch(chars, val[pos]) >= 0)
@@ -232,34 +232,48 @@ public final class CharacterReader {
 
     String consumeData() {
         // &, <, null
-        bufferUp();
-        final int start = bufPos;
+        //bufferUp(); // no need to bufferUp, just called consume()
+        int pos = bufPos;
+        final int start = pos;
         final int remaining = bufLength;
         final char[] val = charBuf;
 
-        while (bufPos < remaining) {
-            final char c = val[bufPos];
-            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)
-                break;
-            bufPos++;
+        OUTER: while (pos < remaining) {
+            switch (val[pos]) {
+                case '&':
+                case '<':
+                case TokeniserState.nullChar:
+                    break OUTER;
+                default:
+                    pos++;
+            }
         }
-
-        return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : "";
+        bufPos = pos;
+        return pos > start ? cacheString(charBuf, stringCache, start, pos -start) : "";
     }
 
     String consumeTagName() {
         // '\t', '\n', '\r', '\f', ' ', '/', '>', nullChar
         // NOTE: out of spec, added '<' to fix common author bugs
         bufferUp();
-        final int start = bufPos;
+        int pos = bufPos;
+        final int start = pos;
         final int remaining = bufLength;
         final char[] val = charBuf;
-        int pos = bufPos;
 
-        while (pos < remaining) {
-            final char c = val[pos];
-            if (c == '\t'|| c ==  '\n'|| c ==  '\r'|| c ==  '\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c == '<' || c ==  TokeniserState.nullChar)
-                break;
+        OUTER: while (pos < remaining) {
+            switch (val[pos]) {
+                case '\t':
+                case '\n':
+                case '\r':
+                case '\f':
+                case ' ':
+                case '/':
+                case '>':
+                case '<':
+                case TokeniserState.nullChar:
+                    break OUTER;
+            }
             pos++;
         }
 
diff --git a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
index 23d3708..9e99d71 100644
--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java
@@ -252,9 +252,9 @@ public class HtmlTreeBuilder extends TreeBuilder {
     }
 
     void insert(Token.Character characterToken) {
-        Node node;
-        // characters in script and style go in as datanodes, not text nodes
-        final String tagName = currentElement().tagName();
+        final Node node;
+        final Element el = currentElement();
+        final String tagName = el.tagName();
         final String data = characterToken.getData();
 
         if (characterToken.isCData())
@@ -263,7 +263,7 @@ public class HtmlTreeBuilder extends TreeBuilder {
             node = new DataNode(data);
         else
             node = new TextNode(data);
-        currentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack.
+        el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack.
     }
 
     private void insertNode(Node node) {
