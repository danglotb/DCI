diff --git a/CHANGES b/CHANGES
index e6afd38..4af3758 100644
--- a/CHANGES
+++ b/CHANGES
@@ -24,6 +24,9 @@ jsoup changelog
 
   * Improvement: performance tweaks when parsing start tags, data, tables.
 
+  * Improvement: added Element.nextElementSiblings() and Element.previousElementSiblings()
+    https://github.com/jhy/jsoup/pull/1054
+
   * Bugfix: when converting a Jsoup document to a W3C DOM, if an element is namespaced but not in a defined namespace,
     set it to the global namespace.
     <https://github.com/jhy/jsoup/issues/848>
diff --git a/src/main/java/org/jsoup/nodes/Element.java b/src/main/java/org/jsoup/nodes/Element.java
index 20bc95e..850e724 100644
--- a/src/main/java/org/jsoup/nodes/Element.java
+++ b/src/main/java/org/jsoup/nodes/Element.java
@@ -687,6 +687,15 @@ public class Element extends Node {
             return null;
     }
 
+    /**
+     * Get each of the sibling elements that come after this element.
+     *
+     * @return each of the element siblings after this element, or an empty list if there are no next sibling elements
+     */
+    public Elements nextElementSiblings() {
+        return nextElementSiblings(true);
+    }
+
     /**
      * Gets the previous element sibling of this element.
      * @return the previous element, or null if there is no previous element
@@ -703,6 +712,23 @@ public class Element extends Node {
             return null;
     }
 
+    /**
+     * Get each of the element siblings before this element.
+     *
+     * @return the previous element siblings, or an empty list if there are none.
+     */
+    public Elements previousElementSiblings() {
+        return nextElementSiblings(false);
+    }
+
+    private Elements nextElementSiblings(boolean next) {
+        Elements els = new Elements();
+        if (parentNode == null)
+            return  els;
+        els.add(this);
+        return next ?  els.nextAll() : els.prevAll();
+    }
+
     /**
      * Gets the first element sibling of this element.
      * @return the first sibling that is an element (aka the parent's first element child) 
diff --git a/src/main/java/org/jsoup/select/Elements.java b/src/main/java/org/jsoup/select/Elements.java
index afa0f02..1a205f9 100644
--- a/src/main/java/org/jsoup/select/Elements.java
+++ b/src/main/java/org/jsoup/select/Elements.java
@@ -511,7 +511,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get all of the following element siblings of each element in this list.
+     * Get each of the following element siblings of each element in this list.
      * @return all following element siblings.
      */
     public Elements nextAll() {
@@ -519,7 +519,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get all of the following element siblings of each element in this list, filtered by the query.
+     * Get each of the following element siblings of each element in this list, that match the query.
      * @param query CSS query to match siblings against
      * @return all following element siblings.
      */
@@ -545,7 +545,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get all of the previous element siblings of each element in this list.
+     * Get each of the previous element siblings of each element in this list.
      * @return all previous element siblings.
      */
     public Elements prevAll() {
@@ -553,7 +553,7 @@ public class Elements extends ArrayList<Element> {
     }
 
     /**
-     * Get all of the previous element siblings of each element in this list, filtered by the query.
+     * Get each of the previous element siblings of each element in this list, that match the query.
      * @param query CSS query to match siblings against
      * @return all previous element siblings.
      */
diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index 70a58f0..9219624 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -14,12 +14,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 /**
  * Tests for Element (DOM stuff mostly).
@@ -1324,4 +1319,75 @@ public class ElementTest {
         assertEquals("One Two", doc.text());
     }
 
+    @Test
+    public void testNextElementSiblings() {
+        Document doc = Jsoup.parse("<ul id='ul'>" +
+            "<li id='a'>a</li>" +
+            "<li id='b'>b</li>" +
+            "<li id='c'>c</li>" +
+            "</ul> Not An Element but a node" +
+            "<div id='div'>" +
+            "<li id='d'>d</li>" +
+            "</div>");
+
+        Element element = doc.getElementById("a");
+        Elements elementSiblings = element.nextElementSiblings();
+        assertNotNull(elementSiblings);
+        assertEquals(2, elementSiblings.size());
+        assertEquals("b", elementSiblings.get(0).id());
+        assertEquals("c", elementSiblings.get(1).id());
+
+        Element element1 = doc.getElementById("b");
+        List<Element> elementSiblings1 = element1.nextElementSiblings();
+        assertNotNull(elementSiblings1);
+        assertEquals(1, elementSiblings1.size());
+        assertEquals("c", elementSiblings1.get(0).id());
+
+        Element element2 = doc.getElementById("c");
+        List<Element> elementSiblings2 = element2.nextElementSiblings();
+        assertEquals(0, elementSiblings2.size());
+
+        Element ul = doc.getElementById("ul");
+        List<Element> elementSiblings3 = ul.nextElementSiblings();
+        assertNotNull(elementSiblings3);
+        assertEquals(1, elementSiblings3.size());
+        assertEquals("div", elementSiblings3.get(0).id());
+
+        Element div = doc.getElementById("div");
+        List<Element> elementSiblings4 = div.nextElementSiblings();
+        assertEquals(0, elementSiblings4.size());
+    }
+
+    @Test
+    public void testPreviousElementSiblings() {
+        Document doc = Jsoup.parse("<ul id='ul'>" +
+            "<li id='a'>a</li>" +
+            "<li id='b'>b</li>" +
+            "<li id='c'>c</li>" +
+            "</ul>" +
+            "<div id='div'>" +
+            "<li id='d'>d</li>" +
+            "</div>");
+
+        Element element = doc.getElementById("b");
+        Elements elementSiblings = element.previousElementSiblings();
+        assertNotNull(elementSiblings);
+        assertEquals(1, elementSiblings.size());
+        assertEquals("a", elementSiblings.get(0).id());
+
+        Element element1 = doc.getElementById("a");
+        List<Element> elementSiblings1 = element1.previousElementSiblings();
+        assertEquals(0, elementSiblings1.size());
+
+        Element element2 = doc.getElementById("c");
+        List<Element> elementSiblings2 = element2.previousElementSiblings();
+        assertNotNull(elementSiblings2);
+        assertEquals(2, elementSiblings2.size());
+        assertEquals("a", elementSiblings2.get(0).id());
+        assertEquals("b", elementSiblings2.get(1).id());
+
+        Element ul = doc.getElementById("ul");
+        List<Element> elementSiblings3 = ul.previousElementSiblings();
+        assertEquals(0, elementSiblings3.size());
+    }
 }
