package org.jsoup.nodes;


import java.util.List;
import org.jsoup.Jsoup;
import org.junit.Assert;
import org.junit.Test;


public class AmplElementTest {
    private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationNumber24800_failAssert151() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(-1).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationNumber24800 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 1", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString29_failAssert23() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "O/woO") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString29 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5587_literalMutationString28600_failAssert139() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + " Hello\nthere \u00a0  ") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5587_literalMutationString28600 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5587_literalMutationString28292_failAssert122() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5587_literalMutationString28292 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22600_failAssert146() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<:/ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22600 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5587_literalMutationString27475_failAssert170() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<rl id=\'ul\'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5587__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5587_literalMutationString27475 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22503_failAssert160() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22503 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString26_failAssert20() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString26 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22652_failAssert158() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "7b$7y") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22652 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString33_failAssert27_literalMutationString12109_failAssert98() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                elementSiblings.size();
                elementSiblings.get(0).id();
                elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                elementSiblings1.size();
                elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                elementSiblings3.size();
                elementSiblings3.get(0).id();
                Element div = doc.getElementById("div");
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblings_literalMutationString33 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString33_failAssert27_literalMutationString12109 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationNumber23714_failAssert149() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(-1).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationNumber23714 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 2", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22449_failAssert117() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22449 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString25_failAssert19() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString25 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22873_failAssert124() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + " Hello\nthere \u00a0  ") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22873 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationNumber53_failAssert33() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(-1).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationNumber53 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: -1, Size: 2", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString27_failAssert21() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString27 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22711_failAssert154() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "L&r2n8Xhy7)l4|") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22711 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationNumber24295_failAssert148() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(-1).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationNumber24295 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 1", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22552_failAssert150() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<Oul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("a");
                List<Element> elementSiblings = element.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__9 = elementSiblings.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__10 = elementSiblings.get(0).id();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__12 = elementSiblings.get(1).id();
                Element element1 = doc.getElementById("b");
                List<Element> elementSiblings1 = element1.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__18 = elementSiblings1.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__19 = elementSiblings1.get(0).id();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__25 = elementSiblings2.size();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.nextElementSiblings();
                int o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__30 = elementSiblings3.size();
                String o_testNextElementSiblingsnull116_failAssert59_literalMutationString5655__31 = elementSiblings3.get(0).id();
                Element div = doc.getElementById(null);
                List<Element> elementSiblings4 = div.nextElementSiblings();
                try {
                    Element elementSibling = elementSiblings4.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testNextElementSiblingsnull116 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testNextElementSiblingsnull116_failAssert59_literalMutationString5655_literalMutationString22552 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString28_failAssert22() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "`/ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString28 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationNumber74_failAssert47() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(-1).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationNumber74 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: -1, Size: 1", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationNumber64_failAssert39() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(-1).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationNumber64 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: -1, Size: 1", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testNextElementSiblings_literalMutationString30_failAssert24() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<=/ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("a");
            List<Element> elementSiblings = element.nextElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            elementSiblings.get(1).id();
            Element element1 = doc.getElementById("b");
            List<Element> elementSiblings1 = element1.nextElementSiblings();
            elementSiblings1.size();
            elementSiblings1.get(0).id();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.nextElementSiblings();
            elementSiblings2.size();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.nextElementSiblings();
            elementSiblings3.size();
            elementSiblings3.get(0).id();
            Element div = doc.getElementById("div");
            List<Element> elementSiblings4 = div.nextElementSiblings();
            try {
                Element elementSibling = elementSiblings4.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testNextElementSiblings_literalMutationString30 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61776() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id=\'dv\'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"dv\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64100() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasText();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62968() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "<l/div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n  <l div></l>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62419_failAssert318() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(-1).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62419 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 1", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60322() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61410() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<dul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <dul>\n   <div id=\"div\"></div>\n  </dul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63829() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasParent();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9)));
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16)));
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21)));
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37501_failAssert242() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("b");
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            elementSiblings.get(-1).id();
            Element element1 = doc.getElementById("a");
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            elementSiblings2.get(0).id();
            elementSiblings2.get(1).id();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationNumber37501 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: -1, Size: 1", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64106() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62048() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</,ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <!--,ul-->\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61995() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<$ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>&lt;$ul&gt;\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64112() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).toString();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64119() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64119__25 = element2.previousElementSiblings();
            Assert.assertFalse(o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64119__25.isEmpty());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63700() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).toString();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63064() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString63807() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById(" Hello\nthere \u00a0  ");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63939() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasText();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61067() throws Exception {
        try {
            Document doc = Jsoup.parse(("k" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  k\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63262() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37524() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37524__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37524__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37524__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37524__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37524__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37524__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37524__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37524__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37524__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37524__20);
        String o_testPreviousElementSiblings_literalMutationNumber37524__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37524__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37524__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37524__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37524__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37524__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37524__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37524__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37523() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37523__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37523__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37523__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37523__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37523__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37523__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37523__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37523__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37523__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37523__20);
        String o_testPreviousElementSiblings_literalMutationNumber37523__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37523__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37523__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37523__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37523__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37523__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37523__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37523__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37522() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37522__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37522__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37522__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37522__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37522__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37522__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37522__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37522__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37522__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37522__20);
        String o_testPreviousElementSiblings_literalMutationNumber37522__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37522__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(-1);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37522__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37522__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37522__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37522__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37522__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37522__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37521() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37521__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37521__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37521__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37521__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37521__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37521__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37521__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37521__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37521__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37521__20);
        String o_testPreviousElementSiblings_literalMutationNumber37521__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37521__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(1);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37521__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37521__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37521__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37521__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37521__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37521__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60548_failAssert316() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("<lR id=\'a\'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60548 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60506_failAssert314() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + ((((((" Hello\nthere \u00a0  " + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60506 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString63175() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById(" Hello\nthere \u00a0  ");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64104() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasParent();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__9)));
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__16 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__16)));
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__21 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__21)));
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__22);
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46679__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull37548 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString44935_failAssert283() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                elementSiblings.size();
                elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                elementSiblings2.size();
                elementSiblings2.get(0).id();
                elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString44935 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46221_failAssert285() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                elementSiblings.size();
                elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                elementSiblings2.size();
                elementSiblings2.get(0).id();
                elementSiblings2.get(1).id();
                Element ul = doc.getElementById(null);
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblingsnull37548 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46221 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63274() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull37547_failAssert257_literalMutationString46438_failAssert290() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                elementSiblings.size();
                elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                elementSiblings1.size();
                Element element2 = doc.getElementById(null);
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                elementSiblings2.size();
                elementSiblings2.get(0).id();
                elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblingsnull37547 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull37547_failAssert257_literalMutationString46438 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61871() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61172_failAssert315() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + ((((((" Hello\nthere \u00a0  " + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61172 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64133() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64133__30 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64133__30);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62506() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63600() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63965() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61646() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + " Hello\nthere \u00a0  ") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li> Hello there &nbsp; \n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37468_failAssert233_literalMutationString37905_failAssert279() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("" + "<li id='b'>b</li>") + "") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                elementSiblings.size();
                elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                elementSiblings2.size();
                elementSiblings2.get(0).id();
                elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37468 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37468_failAssert233_literalMutationString37905 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString62058() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</d.v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37511_failAssert249() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("b");
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            Element element1 = doc.getElementById("a");
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            elementSiblings2.get(-1).id();
            elementSiblings2.get(1).id();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationNumber37511 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: -1, Size: 2", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719__5 = doc.getElementById("b");
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719__5)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719__5)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719__5)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719__5)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63719__5)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull37546_failAssert256_literalMutationString45024_failAssert287() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                elementSiblings.size();
                elementSiblings.get(0).id();
                Element element1 = doc.getElementById(null);
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                elementSiblings2.size();
                elementSiblings2.get(0).id();
                elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblingsnull37546 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull37546_failAssert256_literalMutationString45024 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62384() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + " Hello\nthere \u00a0  ") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li> Hello there &nbsp; \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString62186() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "wzj4nD")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   wzj4nD\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64006() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).toString();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64125() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64125__27 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64125__27)));
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63953() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61458() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "t>N-q") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>t&gt;N-q\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60363() throws Exception {
        try {
            Document doc = Jsoup.parse((" Hello\nthere \u00a0  " + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n   Hello there &nbsp; \n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908__12 = elementSiblings.get(0);
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908__12)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908__12)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908__12)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908__12)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63908__12)).toString());
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63580() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).hasText();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62490() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + " Hello\nthere \u00a0  ") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li> Hello there &nbsp; \n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37457_failAssert225() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("LYCWxG#=*8t*kTUD$" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("b");
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            Element element1 = doc.getElementById("a");
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            elementSiblings2.get(0).id();
            elementSiblings2.get(1).id();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37457 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63918() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString60977() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094__5 = doc.getElementById("b");
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094__5)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094__5)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094__5)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094__5)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64094__5)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61263() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id=\'a\'>a</rli>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63303() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61229() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id=\'c\'>c<b/li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c<b li>\n    <div id=\"div\"></div></b></li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c<b li>\n  <div id=\"div\"></div></b></li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62237() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "1`gS=") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>1`gS=\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37461() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id=\'b\'>b/li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b/li&gt;</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b/li&gt;</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37461__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37461__7)));
        String o_testPreviousElementSiblings_literalMutationString37461__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37461__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37461__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37461__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37461__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37461__19)));
        String o_testPreviousElementSiblings_literalMutationString37461__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37461__20);
        String o_testPreviousElementSiblings_literalMutationString37461__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37461__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b/li&gt;</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b/li&gt;</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b/li&gt;</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37461__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37461__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37461__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37461__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37461__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37461__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b/li&gt;</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64087() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).toString();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925__16 = doc.getElementById("a");
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925__16)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925__16)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925__16)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925__16)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63925__16)).toString());
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63808() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).isBlock();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62342() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62583() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<lCi id=\'d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <lci id=\"d\">\n   d\n  </lci>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61318() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li> Hello there &nbsp; \n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63693() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61017() throws Exception {
        try {
            Document doc = Jsoup.parse((" Hello\nthere \u00a0  " + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n   Hello there &nbsp; \n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37459() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id=\'a\'>a<p/li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a<p li></p></li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37459__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37459__7)));
        String o_testPreviousElementSiblings_literalMutationString37459__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37459__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a<p li></p></li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37459__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37459__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37459__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37459__19)));
        String o_testPreviousElementSiblings_literalMutationString37459__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37459__20);
        String o_testPreviousElementSiblings_literalMutationString37459__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37459__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a<p li></p></li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a<p li></p></li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37459__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37459__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a<p li></p></li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37459__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37459__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37459__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37459__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a<p li></p></li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61939() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id=\'c\'>c</lbi>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37458() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id=\'a\'a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\" a< li></li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37458__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37458__7)));
        String o_testPreviousElementSiblings_literalMutationString37458__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37458__8);
        Element element1 = doc.getElementById("a");
        Assert.assertFalse(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\" a< li></li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37458__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37458__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37458__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37458__19)));
        String o_testPreviousElementSiblings_literalMutationString37458__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37458__20);
        String o_testPreviousElementSiblings_literalMutationString37458__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37458__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\" a< li></li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\" a< li></li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37458__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37458__8);
        Assert.assertFalse(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\" a< li></li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37458__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37458__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37458__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37458__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\" a< li></li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37453() throws Exception {
        Document doc = Jsoup.parse(("<u id=\'ul\'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <u id=\"ul\"><li id=\"a\">a</li><li id=\"b\">b</li><li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div></u>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37453__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37453__7)));
        String o_testPreviousElementSiblings_literalMutationString37453__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37453__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37453__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37453__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37453__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37453__19)));
        String o_testPreviousElementSiblings_literalMutationString37453__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37453__20);
        String o_testPreviousElementSiblings_literalMutationString37453__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37453__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<u id=\"ul\"><li id=\"a\">a</li><li id=\"b\">b</li><li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div></u>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <u id=\"ul\"><li id=\"a\">a</li><li id=\"b\">b</li><li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div></u>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37453__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37453__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37453__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37453__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37453__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37453__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<u id=\"ul\"><li id=\"a\">a</li><li id=\"b\">b</li><li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div></u>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37455_failAssert223() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("b");
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            Element element1 = doc.getElementById("a");
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            elementSiblings2.get(0).id();
            elementSiblings2.get(1).id();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37455 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37451() throws Exception {
        Document doc = Jsoup.parse(("<ujl id=\'ul\'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ujl id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ujl>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37451__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37451__7)));
        String o_testPreviousElementSiblings_literalMutationString37451__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37451__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37451__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37451__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37451__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37451__19)));
        String o_testPreviousElementSiblings_literalMutationString37451__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37451__20);
        String o_testPreviousElementSiblings_literalMutationString37451__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37451__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ujl id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ujl>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ujl id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ujl>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37451__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37451__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37451__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37451__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37451__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37451__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ujl id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ujl>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64197() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                elementSiblings3.get(0);
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61689() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<d+iv id=\'div\'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <d+iv id=\"div\"></d+iv>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61802() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id=\'c\'>c</ai>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64195() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            ul.previousElementSiblings();
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60597() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id=\'a\'U>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\" u>a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\" u>a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64072() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).isBlock();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64193() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            doc.getElementById("ul");
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings__7)));
        String o_testPreviousElementSiblings__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings__19)));
        String o_testPreviousElementSiblings__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings__20);
        String o_testPreviousElementSiblings__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64079() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).hasParent();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37456_failAssert224() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + ((((((" Hello\nthere \u00a0  " + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Element element = doc.getElementById("b");
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            elementSiblings.get(0).id();
            Element element1 = doc.getElementById("a");
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            elementSiblings2.get(0).id();
            elementSiblings2.get(1).id();
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37456 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_1) {
            Assert.assertEquals("Index: 0", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37484() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i9d=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i9d=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37484__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37484__7)));
        String o_testPreviousElementSiblings_literalMutationString37484__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37484__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37484__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37484__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37484__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37484__19)));
        String o_testPreviousElementSiblings_literalMutationString37484__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37484__20);
        String o_testPreviousElementSiblings_literalMutationString37484__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37484__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i9d=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37484__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37484__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37484__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37484__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37484__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37484__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37483() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id=div\'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\'\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37483__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37483__7)));
        String o_testPreviousElementSiblings_literalMutationString37483__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37483__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37483__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37483__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37483__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37483__19)));
        String o_testPreviousElementSiblings_literalMutationString37483__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37483__20);
        String o_testPreviousElementSiblings_literalMutationString37483__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37483__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\'\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37483__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37483__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37483__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37483__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37483__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37483__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187__30 = elementSiblings2.get(0);
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187__30)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187__30)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187__30)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187__30)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64187__30)).toString());
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37482() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "Fdiv id=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>Fdiv id=\'div\'&gt;\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37482__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37482__7)));
        String o_testPreviousElementSiblings_literalMutationString37482__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37482__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37482__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37482__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37482__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37482__19)));
        String o_testPreviousElementSiblings_literalMutationString37482__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37482__20);
        String o_testPreviousElementSiblings_literalMutationString37482__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37482__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>Fdiv id=\'div\'&gt;\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37482__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37482__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37482__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37482__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37482__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37482__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37481() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "Gqw3G$o+wdT1!-") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>Gqw3G$o+wdT1!-\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37481__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37481__7)));
        String o_testPreviousElementSiblings_literalMutationString37481__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37481__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37481__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37481__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37481__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37481__19)));
        String o_testPreviousElementSiblings_literalMutationString37481__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37481__20);
        String o_testPreviousElementSiblings_literalMutationString37481__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37481__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>Gqw3G$o+wdT1!-\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37481__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37481__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37481__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37481__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37481__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37481__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64064() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37480() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + " Hello\nthere \u00a0  ") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul> Hello there &nbsp; \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37480__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37480__7)));
        String o_testPreviousElementSiblings_literalMutationString37480__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37480__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37480__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37480__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37480__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37480__19)));
        String o_testPreviousElementSiblings_literalMutationString37480__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37480__20);
        String o_testPreviousElementSiblings_literalMutationString37480__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37480__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul> Hello there &nbsp; \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37480__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37480__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37480__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37480__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37480__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37480__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString62101() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "<U/div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <u div></u>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64183() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64183__30 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64183__30);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64189() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64189__34 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64189__34);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64075() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191__34 = elementSiblings2.get(1);
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191__34)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191__34)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191__34)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191__34)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64191__34)).toString());
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61140() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<lX id=\'c\'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <lx id=\"c\">\n   c\n   <div id=\"div\"></div>\n  </lx>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertFalse(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<lx id=\"c\">\n c\n <div id=\"div\"></div>\n</lx>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37479() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37479__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37479__7)));
        String o_testPreviousElementSiblings_literalMutationString37479__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37479__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37479__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37479__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37479__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37479__19)));
        String o_testPreviousElementSiblings_literalMutationString37479__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37479__20);
        String o_testPreviousElementSiblings_literalMutationString37479__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37479__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37479__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37479__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37479__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37479__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37479__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37479__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37478() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "}/ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>}/ul&gt;\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37478__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37478__7)));
        String o_testPreviousElementSiblings_literalMutationString37478__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37478__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37478__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37478__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37478__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37478__19)));
        String o_testPreviousElementSiblings_literalMutationString37478__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37478__20);
        String o_testPreviousElementSiblings_literalMutationString37478__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37478__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>}/ul&gt;\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>}/ul&gt;\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37478__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37478__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37478__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37478__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37478__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37478__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>}/ul&gt;\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63784() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37477() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " CgXK") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li> CgXK\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37477__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37477__7)));
        String o_testPreviousElementSiblings_literalMutationString37477__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37477__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37477__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37477__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37477__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37477__19)));
        String o_testPreviousElementSiblings_literalMutationString37477__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37477__20);
        String o_testPreviousElementSiblings_literalMutationString37477__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37477__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li> CgXK\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li> CgXK\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37477__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37477__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37477__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37477__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37477__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37477__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li> CgXK\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549() throws Exception {
        try {
            Document o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549__3 = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63549__3)).toString());
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37476() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li> Hello there &nbsp; \n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37476__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37476__7)));
        String o_testPreviousElementSiblings_literalMutationString37476__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37476__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37476__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37476__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37476__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37476__19)));
        String o_testPreviousElementSiblings_literalMutationString37476__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37476__20);
        String o_testPreviousElementSiblings_literalMutationString37476__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37476__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li> Hello there &nbsp; \n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li> Hello there &nbsp; \n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37476__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37476__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37476__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37476__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37476__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37476__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li> Hello there &nbsp; \n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37475() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37475__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37475__7)));
        String o_testPreviousElementSiblings_literalMutationString37475__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37475__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37475__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37475__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37475__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37475__19)));
        String o_testPreviousElementSiblings_literalMutationString37475__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37475__20);
        String o_testPreviousElementSiblings_literalMutationString37475__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37475__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37475__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37475__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37475__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37475__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37475__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37475__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37474() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</u>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37474__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37474__7)));
        String o_testPreviousElementSiblings_literalMutationString37474__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37474__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37474__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37474__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37474__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37474__19)));
        String o_testPreviousElementSiblings_literalMutationString37474__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37474__20);
        String o_testPreviousElementSiblings_literalMutationString37474__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37474__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37474__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37474__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37474__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37474__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37474__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37474__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37473() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<W/ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <w ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </w>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37473__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37473__7)));
        String o_testPreviousElementSiblings_literalMutationString37473__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37473__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37473__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37473__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37473__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37473__19)));
        String o_testPreviousElementSiblings_literalMutationString37473__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37473__20);
        String o_testPreviousElementSiblings_literalMutationString37473__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37473__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <w ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </w>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <w ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </w>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37473__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37473__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37473__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37473__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37473__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37473__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <w ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </w>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64177() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64177__25 = element2.previousElementSiblings();
            Assert.assertFalse(o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64177__25.isEmpty());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63343() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString63208() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("n");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63100() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64174() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).toString();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64051() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64172() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasParent();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64170() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).isBlock();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61828() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "P") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   P\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62678() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id=\'\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63892() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63892__12 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63892__12);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60684_failAssert319() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("sf(]O0Z3,xZ[pB$K&" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60684 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: 0", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64180() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64180__27 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64180__27)));
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64165() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63895() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62460() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64163() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasText();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162__23 = doc.getElementById("c");
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162__23)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162__23)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162__23)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162__23)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64162__23)).toString());
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63535() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64161() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64161__20 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64161__20)));
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64168() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61913() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + " Hello\nthere \u00a0  ") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n    Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63184_failAssert326() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(-1).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63184 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 1", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64095() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).isBlock();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37496() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</dv>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37496__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37496__7)));
        String o_testPreviousElementSiblings_literalMutationString37496__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37496__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37496__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37496__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37496__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37496__19)));
        String o_testPreviousElementSiblings_literalMutationString37496__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37496__20);
        String o_testPreviousElementSiblings_literalMutationString37496__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37496__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37496__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37496__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37496__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37496__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37496__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37496__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37495() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d5v>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37495__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37495__7)));
        String o_testPreviousElementSiblings_literalMutationString37495__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37495__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37495__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37495__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37495__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37495__19)));
        String o_testPreviousElementSiblings_literalMutationString37495__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37495__20);
        String o_testPreviousElementSiblings_literalMutationString37495__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37495__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37495__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37495__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37495__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37495__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37495__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37495__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64155() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasParent();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37494() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "sHcOzA")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>sHcOzA\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37494__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37494__7)));
        String o_testPreviousElementSiblings_literalMutationString37494__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37494__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37494__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37494__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37494__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37494__19)));
        String o_testPreviousElementSiblings_literalMutationString37494__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37494__20);
        String o_testPreviousElementSiblings_literalMutationString37494__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37494__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>sHcOzA\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37494__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37494__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37494__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37494__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37494__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37494__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64033() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).hasText();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64154() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).isBlock();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37493() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</Xdiv>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37493__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37493__7)));
        String o_testPreviousElementSiblings_literalMutationString37493__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37493__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37493__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37493__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37493__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37493__19)));
        String o_testPreviousElementSiblings_literalMutationString37493__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37493__20);
        String o_testPreviousElementSiblings_literalMutationString37493__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37493__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37493__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37493__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37493__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37493__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37493__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37493__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64153() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37492() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + " Hello\nthere \u00a0  ")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li> Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37492__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37492__7)));
        String o_testPreviousElementSiblings_literalMutationString37492__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37492__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37492__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37492__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37492__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37492__19)));
        String o_testPreviousElementSiblings_literalMutationString37492__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37492__20);
        String o_testPreviousElementSiblings_literalMutationString37492__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37492__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li> Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37492__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37492__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37492__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37492__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37492__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37492__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37491() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37491__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37491__7)));
        String o_testPreviousElementSiblings_literalMutationString37491__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37491__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37491__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37491__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37491__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37491__19)));
        String o_testPreviousElementSiblings_literalMutationString37491__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37491__20);
        String o_testPreviousElementSiblings_literalMutationString37491__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37491__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37491__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37491__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37491__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37491__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37491__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37491__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64151() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37490() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=\'\'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37490__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37490__7)));
        String o_testPreviousElementSiblings_literalMutationString37490__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37490__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37490__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37490__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37490__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37490__19)));
        String o_testPreviousElementSiblings_literalMutationString37490__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37490__20);
        String o_testPreviousElementSiblings_literalMutationString37490__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37490__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37490__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37490__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37490__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37490__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37490__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37490__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61366() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<Q/ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <q ul>\n   <div id=\"div\"></div></q>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62869_failAssert317() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(-1).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62869 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 2", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62911() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64159() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64159__18 = element1.previousElementSiblings();
            Assert.assertTrue(o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64159__18.isEmpty());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62535() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li idW\'d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li idw\'d\'>d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64156() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).toString();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64085() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63673() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).hasParent();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62780() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + " Hello\nthere \u00a0  ")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li> Hello there &nbsp; \n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37489() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "8%`Xk:WSvs3#at7Tj") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   8%`Xk:WSvs3#at7Tj\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37489__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37489__7)));
        String o_testPreviousElementSiblings_literalMutationString37489__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37489__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37489__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37489__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37489__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37489__19)));
        String o_testPreviousElementSiblings_literalMutationString37489__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37489__20);
        String o_testPreviousElementSiblings_literalMutationString37489__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37489__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   8%`Xk:WSvs3#at7Tj\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37489__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37489__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37489__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37489__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37489__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37489__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37488() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=\'d\'0>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\" 0>d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37488__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37488__7)));
        String o_testPreviousElementSiblings_literalMutationString37488__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37488__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37488__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37488__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37488__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37488__19)));
        String o_testPreviousElementSiblings_literalMutationString37488__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37488__20);
        String o_testPreviousElementSiblings_literalMutationString37488__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37488__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\" 0>d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37488__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37488__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37488__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37488__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37488__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37488__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__9)));
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__16 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__16)));
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__21 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__21)));
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__22);
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46139__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull37548 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37487() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=\'dH>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37487__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37487__7)));
        String o_testPreviousElementSiblings_literalMutationString37487__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37487__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37487__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37487__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37487__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37487__19)));
        String o_testPreviousElementSiblings_literalMutationString37487__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37487__20);
        String o_testPreviousElementSiblings_literalMutationString37487__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37487__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37487__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37487__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37487__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37487__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37487__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37487__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37486() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + " Hello\nthere \u00a0  ") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n    Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37486__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37486__7)));
        String o_testPreviousElementSiblings_literalMutationString37486__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37486__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37486__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37486__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37486__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37486__19)));
        String o_testPreviousElementSiblings_literalMutationString37486__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37486__20);
        String o_testPreviousElementSiblings_literalMutationString37486__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37486__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n    Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37486__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37486__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37486__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37486__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37486__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37486__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37485() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37485__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37485__7)));
        String o_testPreviousElementSiblings_literalMutationString37485__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37485__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationString37485__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37485__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationString37485__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37485__19)));
        String o_testPreviousElementSiblings_literalMutationString37485__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37485__20);
        String o_testPreviousElementSiblings_literalMutationString37485__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37485__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37485__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37485__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37485__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37485__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37485__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37485__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61732() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "n-C5,y8!oBb}&Q") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>n-C5,y8!oBb}&amp;Q\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64143() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64143__12 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64143__12);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63750() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63869() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63869__7 = element.previousElementSiblings();
            Assert.assertFalse(o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63869__7.isEmpty());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63877() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62882() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "LJ@kQZ")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>LJ@kQZ\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64149() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasText();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147__16 = doc.getElementById("a");
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147__16)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147__16)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147__16)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147__16)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64147__16)).toString());
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145__12 = elementSiblings.get(0);
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145__12)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145__12)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145__12)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145__12)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64145__12)).toString());
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64152() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                elementSiblings3.get(0);
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64150() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            ul.previousElementSiblings();
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64036() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64036__20 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64036__20)));
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63980() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).isBlock();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63638() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63740() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasText();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63625() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37543() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37543__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37543__7)));
        String o_testPreviousElementSiblings_add37543__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37543__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37543__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37543__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37543__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37543__19)));
        String o_testPreviousElementSiblings_add37543__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37543__20);
        String o_testPreviousElementSiblings_add37543__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37543__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            elementSiblings3.get(0);
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37543__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37543__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37543__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37543__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37543__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37543__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37542() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37542__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37542__7)));
        String o_testPreviousElementSiblings_add37542__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37542__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37542__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37542__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37542__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37542__19)));
        String o_testPreviousElementSiblings_add37542__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37542__20);
        String o_testPreviousElementSiblings_add37542__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37542__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> o_testPreviousElementSiblings_add37542__26 = ul.previousElementSiblings();
        Assert.assertTrue(o_testPreviousElementSiblings_add37542__26.isEmpty());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37542__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37542__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37542__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37542__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37542__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37542__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        Assert.assertTrue(o_testPreviousElementSiblings_add37542__26.isEmpty());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60411() throws Exception {
        try {
            Document doc = Jsoup.parse((">" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  &gt;\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37541() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37541__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37541__7)));
        String o_testPreviousElementSiblings_add37541__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37541__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37541__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37541__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37541__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37541__19)));
        String o_testPreviousElementSiblings_add37541__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37541__20);
        String o_testPreviousElementSiblings_add37541__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37541__22);
        Element o_testPreviousElementSiblings_add37541__24 = doc.getElementById("ul");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37541__24)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37541__24)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37541__24)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37541__24)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (o_testPreviousElementSiblings_add37541__24)).toString());
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37541__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37541__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37541__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37541__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37541__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37541__22);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37541__24)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37541__24)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37541__24)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37541__24)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (o_testPreviousElementSiblings_add37541__24)).toString());
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64131() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64131__7 = element.previousElementSiblings();
            Assert.assertFalse(o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64131__7.isEmpty());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37540() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37540__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37540__7)));
        String o_testPreviousElementSiblings_add37540__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37540__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37540__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37540__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37540__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37540__19)));
        String o_testPreviousElementSiblings_add37540__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37540__20);
        Element o_testPreviousElementSiblings_add37540__22 = elementSiblings2.get(1);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37540__22)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37540__22)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37540__22)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37540__22)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add37540__22)).toString());
        String o_testPreviousElementSiblings_add37540__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37540__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37540__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37540__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37540__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37540__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37540__20);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37540__22)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37540__22)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37540__22)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37540__22)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add37540__22)).toString());
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37540__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__9)));
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__16 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__16)));
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__21 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__21)));
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__22);
            String o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull37548_failAssert258_literalMutationString46590__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull37548 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019() throws Exception {
        try {
            Document o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019__3 = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64019__3)).toString());
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9)));
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16)));
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21)));
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64138() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64138__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64138__9)));
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61504() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</l>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63026() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64020() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64020__18 = element1.previousElementSiblings();
            Assert.assertTrue(o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64020__18.isEmpty());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140__30 = elementSiblings2.get(0);
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140__30)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140__30)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140__30)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140__30)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64140__30)).toString());
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146__34 = elementSiblings2.get(1);
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146__34)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146__34)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146__34)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146__34)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64146__34)).toString());
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64144() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64144__34 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64144__34);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64148() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            doc.getElementById("ul");
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63850() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).toString();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37532() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37532__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37532__7)));
        String o_testPreviousElementSiblings_add37532__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37532__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> o_testPreviousElementSiblings_add37532__12 = element1.previousElementSiblings();
        Assert.assertTrue(o_testPreviousElementSiblings_add37532__12.isEmpty());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37532__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37532__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37532__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37532__20)));
        String o_testPreviousElementSiblings_add37532__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37532__21);
        String o_testPreviousElementSiblings_add37532__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37532__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37532__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37532__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(o_testPreviousElementSiblings_add37532__12.isEmpty());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37532__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37532__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37532__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37532__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37531() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37531__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37531__7)));
        String o_testPreviousElementSiblings_add37531__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37531__8);
        Element o_testPreviousElementSiblings_add37531__10 = doc.getElementById("a");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37531__10)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37531__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37531__10)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37531__10)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add37531__10)).toString());
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37531__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37531__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37531__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37531__20)));
        String o_testPreviousElementSiblings_add37531__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37531__21);
        String o_testPreviousElementSiblings_add37531__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37531__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37531__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37531__8);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37531__10)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37531__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37531__10)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37531__10)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add37531__10)).toString());
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37531__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37531__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37531__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37531__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60741() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id=\'b\'>b/li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b/li&gt;</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b/li&gt;</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64121() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasParent();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37530() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37530__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37530__7)));
        Element o_testPreviousElementSiblings_add37530__8 = elementSiblings.get(0);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37530__8)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37530__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37530__8)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37530__8)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add37530__8)).toString());
        String o_testPreviousElementSiblings_add37530__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37530__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37530__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37530__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37530__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37530__20)));
        String o_testPreviousElementSiblings_add37530__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37530__21);
        String o_testPreviousElementSiblings_add37530__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37530__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37530__7)));
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37530__8)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37530__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37530__8)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37530__8)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add37530__8)).toString());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37530__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37530__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37530__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37530__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37530__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37536() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37536__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37536__7)));
        String o_testPreviousElementSiblings_add37536__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37536__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37536__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37536__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37536__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37536__19)));
        int o_testPreviousElementSiblings_add37536__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37536__20)));
        String o_testPreviousElementSiblings_add37536__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37536__21);
        String o_testPreviousElementSiblings_add37536__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37536__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37536__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37536__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37536__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37536__19)));
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37536__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37536__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37536__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37535() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37535__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37535__7)));
        String o_testPreviousElementSiblings_add37535__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37535__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37535__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37535__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> o_testPreviousElementSiblings_add37535__17 = element2.previousElementSiblings();
        Assert.assertFalse(o_testPreviousElementSiblings_add37535__17.isEmpty());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37535__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37535__20)));
        String o_testPreviousElementSiblings_add37535__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37535__21);
        String o_testPreviousElementSiblings_add37535__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37535__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37535__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37535__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37535__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(o_testPreviousElementSiblings_add37535__17.isEmpty());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37535__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37535__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37535__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37534() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37534__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37534__7)));
        String o_testPreviousElementSiblings_add37534__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37534__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37534__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37534__14)));
        Element o_testPreviousElementSiblings_add37534__15 = doc.getElementById("c");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37534__15)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37534__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37534__15)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37534__15)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (o_testPreviousElementSiblings_add37534__15)).toString());
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37534__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37534__20)));
        String o_testPreviousElementSiblings_add37534__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37534__21);
        String o_testPreviousElementSiblings_add37534__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37534__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37534__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37534__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37534__14)));
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37534__15)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37534__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37534__15)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37534__15)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (o_testPreviousElementSiblings_add37534__15)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37534__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37534__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37534__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37533() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37533__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37533__7)));
        String o_testPreviousElementSiblings_add37533__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37533__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37533__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37533__14)));
        int o_testPreviousElementSiblings_add37533__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37533__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37533__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37533__20)));
        String o_testPreviousElementSiblings_add37533__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37533__21);
        String o_testPreviousElementSiblings_add37533__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37533__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37533__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37533__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37533__14)));
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37533__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37533__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37533__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37533__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62188() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li> Hello there &nbsp; \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64126() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).toString();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64061() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasText();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37517() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37517__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37517__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37517__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37517__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37517__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37517__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37517__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37517__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37517__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37517__20);
        String o_testPreviousElementSiblings_literalMutationNumber37517__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37517__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37517__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37517__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37517__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37517__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37517__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37517__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37516() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37516__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37516__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37516__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37516__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37516__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37516__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37516__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37516__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37516__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37516__20);
        String o_testPreviousElementSiblings_literalMutationNumber37516__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37516__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37516__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37516__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37516__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37516__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37516__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37516__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString60869() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id=\'b\'>b</l*i>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61896() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<l id=\'c\'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <l id=\"c\">\n   c\n   <li id=\"d\">d</li>\n  </l>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertFalse(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<l id=\"c\">\n c\n <li id=\"d\">d</li>\n</l>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37515() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37515__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37515__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37515__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37515__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37515__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37515__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37515__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37515__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37515__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37515__20);
        String o_testPreviousElementSiblings_literalMutationNumber37515__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37515__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37515__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37515__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37515__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37515__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37515__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37515__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString61655() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id=\'b\'>b</l0i>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37513() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37513__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37513__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37513__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37513__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37513__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37513__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37513__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37513__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37513__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37513__20);
        String o_testPreviousElementSiblings_literalMutationNumber37513__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37513__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37513__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37513__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37513__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37513__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37513__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37513__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37512() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37512__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37512__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37512__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37512__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37512__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37512__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37512__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37512__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37512__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37512__20);
        String o_testPreviousElementSiblings_literalMutationNumber37512__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37512__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37512__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37512__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37512__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37512__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37512__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37512__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37510() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37510__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37510__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37510__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37510__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37510__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37510__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37510__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37510__19)));
        String o_testPreviousElementSiblings_literalMutationNumber37510__20 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37510__20);
        String o_testPreviousElementSiblings_literalMutationNumber37510__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37510__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37510__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37510__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37510__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37510__19)));
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37510__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37510__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63881() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63881__9 = elementSiblings.size();
            Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63881__9)));
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62825() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37539() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37539__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37539__7)));
        String o_testPreviousElementSiblings_add37539__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37539__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37539__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37539__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37539__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37539__19)));
        String o_testPreviousElementSiblings_add37539__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37539__20);
        String o_testPreviousElementSiblings_add37539__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37539__22);
        String o_testPreviousElementSiblings_add37539__24 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37539__24);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37539__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37539__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37539__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37539__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37539__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37539__22);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37539__24);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37538() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37538__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37538__7)));
        String o_testPreviousElementSiblings_add37538__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37538__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37538__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37538__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37538__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37538__19)));
        Element o_testPreviousElementSiblings_add37538__20 = elementSiblings2.get(0);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37538__20)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37538__20)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37538__20)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37538__20)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add37538__20)).toString());
        String o_testPreviousElementSiblings_add37538__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37538__21);
        String o_testPreviousElementSiblings_add37538__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37538__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37538__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37538__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37538__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37538__19)));
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37538__20)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37538__20)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37538__20)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37538__20)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add37538__20)).toString());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37538__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37538__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37537() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37537__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37537__7)));
        String o_testPreviousElementSiblings_add37537__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37537__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37537__14 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37537__14)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37537__19 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37537__19)));
        String o_testPreviousElementSiblings_add37537__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37537__20);
        String o_testPreviousElementSiblings_add37537__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37537__22);
        String o_testPreviousElementSiblings_add37537__24 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37537__24);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37537__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37537__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37537__14)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37537__19)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37537__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37537__22);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37537__24);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63857() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63762() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63647() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).isBlock();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64110() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber63243() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37525() throws Exception {
        Document o_testPreviousElementSiblings_add37525__1 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (o_testPreviousElementSiblings_add37525__1)).hasText());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add37525__1)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add37525__1)).isBlock());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add37525__1)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblings_add37525__1)).toString());
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37525__8 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37525__8)));
        String o_testPreviousElementSiblings_add37525__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37525__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37525__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37525__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37525__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37525__20)));
        String o_testPreviousElementSiblings_add37525__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37525__21);
        String o_testPreviousElementSiblings_add37525__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37525__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (o_testPreviousElementSiblings_add37525__1)).hasText());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add37525__1)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add37525__1)).isBlock());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add37525__1)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblings_add37525__1)).toString());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37525__8)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37525__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37525__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37525__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37525__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37525__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61046() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id=\'c\'>c</l>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c\n   <div id=\"div\"></div></li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c\n <div id=\"div\"></div></li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString62014() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + " Hello\nthere \u00a0  ")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n    Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationString62297() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + " ") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li> \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationNumber62955() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_add64115() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).isBlock();
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050__23 = doc.getElementById("c");
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050__23)).hasText());
            Assert.assertFalse(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050__23)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050__23)).isBlock());
            Assert.assertTrue(((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050__23)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add64050__23)).toString());
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString61603() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<di! id=\'div\'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <di! id=\"div\"></di!>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37503() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37503__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37503__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37503__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37503__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37503__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37503__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37503__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37503__20)));
        String o_testPreviousElementSiblings_literalMutationNumber37503__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37503__21);
        String o_testPreviousElementSiblings_literalMutationNumber37503__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37503__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37503__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37503__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37503__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37503__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37503__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37503__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber37502() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37502__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37502__7)));
        String o_testPreviousElementSiblings_literalMutationNumber37502__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37502__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_literalMutationNumber37502__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37502__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_literalMutationNumber37502__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37502__20)));
        String o_testPreviousElementSiblings_literalMutationNumber37502__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37502__21);
        String o_testPreviousElementSiblings_literalMutationNumber37502__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37502__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_literalMutationNumber37502__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37502__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_literalMutationNumber37502__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_literalMutationNumber37502__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber37502__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber37502__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63569_failAssert325() throws Exception {
        try {
            try {
                Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
                Element element = doc.getElementById("b");
                List<Element> elementSiblings = element.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
                Element element1 = doc.getElementById("a");
                List<Element> elementSiblings1 = element1.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
                Element element2 = doc.getElementById("c");
                List<Element> elementSiblings2 = element2.previousElementSiblings();
                int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(-1).id();
                String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
                Element ul = doc.getElementById("ul");
                List<Element> elementSiblings3 = ul.previousElementSiblings();
                try {
                    Element element3 = elementSiblings3.get(0);
                } catch (IndexOutOfBoundsException e) {
                }
                org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
            } catch (NullPointerException expected_1) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63569 should have thrown IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException expected_2) {
            Assert.assertEquals("Index: -1, Size: 2", expected_2.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37529() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37529__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37529__7)));
        String o_testPreviousElementSiblings_add37529__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37529__8);
        String o_testPreviousElementSiblings_add37529__10 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37529__10);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37529__16 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37529__16)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37529__21 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37529__21)));
        String o_testPreviousElementSiblings_add37529__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37529__22);
        String o_testPreviousElementSiblings_add37529__24 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37529__24);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37529__7)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37529__8);
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37529__10);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37529__16)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37529__21)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37529__22);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37529__24);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63726() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37528() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37528__7 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37528__7)));
        int o_testPreviousElementSiblings_add37528__8 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37528__8)));
        String o_testPreviousElementSiblings_add37528__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37528__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37528__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37528__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37528__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37528__20)));
        String o_testPreviousElementSiblings_add37528__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37528__21);
        String o_testPreviousElementSiblings_add37528__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37528__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37528__7)));
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37528__8)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37528__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37528__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37528__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37528__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37528__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37527() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> o_testPreviousElementSiblings_add37527__5 = element.previousElementSiblings();
        Assert.assertFalse(o_testPreviousElementSiblings_add37527__5.isEmpty());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37527__8 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37527__8)));
        String o_testPreviousElementSiblings_add37527__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37527__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37527__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37527__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37527__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37527__20)));
        String o_testPreviousElementSiblings_add37527__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37527__21);
        String o_testPreviousElementSiblings_add37527__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37527__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(o_testPreviousElementSiblings_add37527__5.isEmpty());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37527__8)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37527__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37527__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37527__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37527__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37527__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_literalMutationString62144() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</iv>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268_literalMutationNumber63603() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45268__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add37526() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element o_testPreviousElementSiblings_add37526__3 = doc.getElementById("b");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37526__3)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37526__3)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37526__3)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37526__3)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add37526__3)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        int o_testPreviousElementSiblings_add37526__8 = elementSiblings.size();
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37526__8)));
        String o_testPreviousElementSiblings_add37526__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37526__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        int o_testPreviousElementSiblings_add37526__15 = elementSiblings1.size();
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37526__15)));
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        int o_testPreviousElementSiblings_add37526__20 = elementSiblings2.size();
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37526__20)));
        String o_testPreviousElementSiblings_add37526__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37526__21);
        String o_testPreviousElementSiblings_add37526__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37526__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37526__3)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add37526__3)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37526__3)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add37526__3)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add37526__3)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals(1, ((int) (o_testPreviousElementSiblings_add37526__8)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37526__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertEquals(0, ((int) (o_testPreviousElementSiblings_add37526__15)));
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals(2, ((int) (o_testPreviousElementSiblings_add37526__20)));
        Assert.assertEquals("a", o_testPreviousElementSiblings_add37526__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add37526__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358_add63993() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__9 = elementSiblings.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasParent();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__16 = elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            int o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__21 = elementSiblings2.size();
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__22);
            String o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString37449_failAssert219_literalMutationString45358__24);
            Element ul = doc.getElementById("ul");
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblings_literalMutationString37449 should have thrown NullPointerException");
        } catch (NullPointerException expected_1) {
        }
    }
}

