package org.jsoup.nodes;


import java.util.List;
import org.jsoup.Jsoup;
import org.junit.Assert;
import org.junit.Test;


public class AmplElementTest {
    private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38193() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38193__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38193__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38193__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38193__20);
        String o_testPreviousElementSiblings_literalMutationNumber38193__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38193__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(1);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38193__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38193__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38193__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38194() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38194__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38194__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38194__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38194__20);
        String o_testPreviousElementSiblings_literalMutationNumber38194__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38194__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(-1);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38194__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38194__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38194__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64928() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38195() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38195__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38195__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38195__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38195__20);
        String o_testPreviousElementSiblings_literalMutationNumber38195__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38195__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38195__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38195__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38195__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38196() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38196__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38196__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38196__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38196__20);
        String o_testPreviousElementSiblings_literalMutationNumber38196__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38196__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38196__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38196__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38196__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57088() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).toString();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add62487() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add57726() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986__3 = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920_add60986__3)).toString());
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56694() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61733() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56631__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56557() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add65002() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64710() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add64179() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38168() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</iv>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38168__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38168__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38168__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38168__20);
        String o_testPreviousElementSiblings_literalMutationString38168__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38168__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38168__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38168__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38168__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38167() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "<8/div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>&lt;8/div&gt;\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38167__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38167__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38167__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38167__20);
        String o_testPreviousElementSiblings_literalMutationString38167__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38167__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>&lt;8/div&gt;\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38167__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38167__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38167__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38166() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</@iv>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n   <!--@iv-->\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38166__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38166__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38166__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38166__20);
        String o_testPreviousElementSiblings_literalMutationString38166__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38166__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n   <!--@iv-->\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38166__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38166__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38166__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38165() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "BD@nbP")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>BD@nbP\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38165__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38165__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38165__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38165__20);
        String o_testPreviousElementSiblings_literalMutationString38165__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38165__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>BD@nbP\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38165__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38165__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38165__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38164() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + " Hello\nthere \u00a0  ")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li> Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38164__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38164__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38164__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38164__20);
        String o_testPreviousElementSiblings_literalMutationString38164__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38164__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li> Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38164__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38164__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38164__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38163() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38163__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38163__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38163__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38163__20);
        String o_testPreviousElementSiblings_literalMutationString38163__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38163__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38163__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38163__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38163__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38162() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=\'\'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38162__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38162__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38162__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38162__20);
        String o_testPreviousElementSiblings_literalMutationString38162__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38162__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38162__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38162__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38162__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38161() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=\'d\'>d</l*i>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38161__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38161__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38161__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38161__20);
        String o_testPreviousElementSiblings_literalMutationString38161__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38161__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38161__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38161__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38161__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38160() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=Rd\'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"Rd\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38160__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38160__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38160__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38160__20);
        String o_testPreviousElementSiblings_literalMutationString38160__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38160__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"Rd\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38160__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38160__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38160__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56329() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56440() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).hasParent();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56689() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).toString();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62643() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38159() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + " Hello\nthere \u00a0  ") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n    Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38159__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38159__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38159__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38159__20);
        String o_testPreviousElementSiblings_literalMutationString38159__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38159__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n    Hello there &nbsp; \n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38159__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38159__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38159__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add57299() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63898() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38158() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "gvL^Dom[H+gxmQPBz") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   gvL^Dom[H+gxmQPBz\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38158__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38158__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38158__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38158__20);
        String o_testPreviousElementSiblings_literalMutationString38158__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38158__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   gvL^Dom[H+gxmQPBz\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38158__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38158__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38158__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64857() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasParent();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38157() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38157__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38157__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38157__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38157__20);
        String o_testPreviousElementSiblings_literalMutationString38157__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38157__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38157__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38157__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38157__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38156() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id=\'di\'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"di\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38156__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38156__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38156__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38156__20);
        String o_testPreviousElementSiblings_literalMutationString38156__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38156__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"di\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38156__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38156__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38156__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63616__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38174() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38174__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38174__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38174__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38174__21);
        String o_testPreviousElementSiblings_literalMutationNumber38174__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38174__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38174__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38174__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38174__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38175() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38175__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38175__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38175__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38175__21);
        String o_testPreviousElementSiblings_literalMutationNumber38175__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38175__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38175__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38175__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38175__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470_add64495__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add60328() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56410() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).isBlock();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60624() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65001() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56525() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasText();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add64392() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56879() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56920() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add60691() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60341() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64537__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56514__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56870() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62676() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add64326() throws Exception {
        try {
            Document doc = Jsoup.parse(("GJ;j=f(8H}st" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  GJ;j=f(8H}st\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add57600() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add57695() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasParent();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38182() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38182__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38182__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38182__20 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38182__20);
        String o_testPreviousElementSiblings_literalMutationNumber38182__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38182__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38182__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38182__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38182__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add62452() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65114() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38184() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38184__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38184__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38184__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38184__20);
        String o_testPreviousElementSiblings_literalMutationNumber38184__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38184__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38184__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38184__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38184__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38185() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38185__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38185__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38185__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38185__20);
        String o_testPreviousElementSiblings_literalMutationNumber38185__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38185__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38185__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38185__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationNumber38185__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add57676() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38187() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38187__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38187__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38187__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38187__20);
        String o_testPreviousElementSiblings_literalMutationNumber38187__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38187__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38187__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38187__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38187__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38188() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38188__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38188__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38188__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38188__20);
        String o_testPreviousElementSiblings_literalMutationNumber38188__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38188__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38188__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38188__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38188__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationNumber38189() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationNumber38189__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38189__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationNumber38189__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38189__20);
        String o_testPreviousElementSiblings_literalMutationNumber38189__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38189__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38189__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38189__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationNumber38189__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56546() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65110() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56302() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).hasText();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56658() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasParent();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add57277() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add57322() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56622() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63870() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add57808() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60606() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56591() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add57407() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add57344() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929() throws Exception {
        try {
            Document doc = Jsoup.parse(("GJ;j=f(8H}st" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  GJ;j=f(8H}st\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add60992() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64676() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56902() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasText();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add63680() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56665() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64825() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64915() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64706() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add64494() throws Exception {
        try {
            Document doc = Jsoup.parse(("GJ;j=f(8H}st" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  GJ;j=f(8H}st\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65136() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65134() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60555__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57332() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).isBlock();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add57467() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add57623() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920() throws Exception {
        try {
            Document doc = Jsoup.parse(("" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41920__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add57530() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64925() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64937() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasParent();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65049() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add62785() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56952() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57420() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57420__21 = element2.previousElementSiblings();
            Assert.assertFalse(o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57420__21.isEmpty());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56699() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57302() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add61351() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add64988__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add64547() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64607() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56561__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38214() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38214__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38214__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38214__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38214__20);
        String o_testPreviousElementSiblings_add38214__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38214__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> o_testPreviousElementSiblings_add38214__26 = ul.previousElementSiblings();
        Assert.assertTrue(o_testPreviousElementSiblings_add38214__26.isEmpty());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38214__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38214__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38214__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        Assert.assertTrue(o_testPreviousElementSiblings_add38214__26.isEmpty());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38213() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38213__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38213__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38213__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38213__20);
        String o_testPreviousElementSiblings_add38213__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38213__22);
        Element o_testPreviousElementSiblings_add38213__24 = doc.getElementById("ul");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38213__24)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38213__24)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38213__24)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38213__24)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (o_testPreviousElementSiblings_add38213__24)).toString());
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38213__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38213__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38213__22);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38213__24)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38213__24)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38213__24)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38213__24)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (o_testPreviousElementSiblings_add38213__24)).toString());
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38212() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38212__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38212__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38212__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38212__20);
        Element o_testPreviousElementSiblings_add38212__22 = elementSiblings2.get(1);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38212__22)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38212__22)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38212__22)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38212__22)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add38212__22)).toString());
        String o_testPreviousElementSiblings_add38212__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38212__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38212__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38212__20);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38212__22)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38212__22)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38212__22)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38212__22)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add38212__22)).toString());
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38212__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38211() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38211__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38211__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38211__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38211__20);
        String o_testPreviousElementSiblings_add38211__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38211__22);
        String o_testPreviousElementSiblings_add38211__24 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38211__24);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38211__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38211__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38211__22);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38211__24);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38215() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38215__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38215__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38215__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38215__20);
        String o_testPreviousElementSiblings_add38215__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38215__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            elementSiblings3.get(0);
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38215__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38215__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38215__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56342() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings__20);
        String o_testPreviousElementSiblings__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38210() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38210__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38210__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        Element o_testPreviousElementSiblings_add38210__20 = elementSiblings2.get(0);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38210__20)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38210__20)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38210__20)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38210__20)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add38210__20)).toString());
        String o_testPreviousElementSiblings_add38210__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38210__21);
        String o_testPreviousElementSiblings_add38210__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38210__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38210__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38210__20)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38210__20)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38210__20)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38210__20)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add38210__20)).toString());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38210__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38210__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56583() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add57311() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56469() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).toString();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add65069() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64567() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add61932__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826__3 = Jsoup.parse(("GJ;j=f(8H}st" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  GJ;j=f(8H}st\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add63826__3)).toString());
            Document doc = Jsoup.parse(("GJ;j=f(8H}st" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  GJ;j=f(8H}st\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add65063() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add64531() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\"></div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42470__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365_add64709__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42365__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64838() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60259__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38203() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38203__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38203__8);
        Element o_testPreviousElementSiblings_add38203__10 = doc.getElementById("a");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38203__10)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38203__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38203__10)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38203__10)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add38203__10)).toString());
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38203__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38203__21);
        String o_testPreviousElementSiblings_add38203__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38203__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38203__8);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38203__10)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38203__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38203__10)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38203__10)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add38203__10)).toString());
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38203__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38203__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38202() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        Element o_testPreviousElementSiblings_add38202__8 = elementSiblings.get(0);
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38202__8)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38202__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38202__8)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38202__8)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add38202__8)).toString());
        String o_testPreviousElementSiblings_add38202__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38202__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38202__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38202__21);
        String o_testPreviousElementSiblings_add38202__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38202__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38202__8)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38202__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38202__8)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38202__8)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (o_testPreviousElementSiblings_add38202__8)).toString());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38202__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38202__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38202__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38201() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38201__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38201__8);
        String o_testPreviousElementSiblings_add38201__10 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38201__10);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38201__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38201__22);
        String o_testPreviousElementSiblings_add38201__24 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38201__24);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38201__8);
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38201__10);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38201__22);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38201__24);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38200() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38200__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38200__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38200__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38200__21);
        String o_testPreviousElementSiblings_add38200__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38200__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38200__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38200__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38200__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38207() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38207__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38207__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> o_testPreviousElementSiblings_add38207__17 = element2.previousElementSiblings();
        Assert.assertFalse(o_testPreviousElementSiblings_add38207__17.isEmpty());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38207__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38207__21);
        String o_testPreviousElementSiblings_add38207__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38207__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38207__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(o_testPreviousElementSiblings_add38207__17.isEmpty());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38207__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38207__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38206() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38206__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38206__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element o_testPreviousElementSiblings_add38206__15 = doc.getElementById("c");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38206__15)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38206__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38206__15)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38206__15)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (o_testPreviousElementSiblings_add38206__15)).toString());
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38206__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38206__21);
        String o_testPreviousElementSiblings_add38206__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38206__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38206__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38206__15)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38206__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38206__15)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38206__15)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (o_testPreviousElementSiblings_add38206__15)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38206__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38206__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38205() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38205__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38205__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38205__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38205__21);
        String o_testPreviousElementSiblings_add38205__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38205__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38205__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38205__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38205__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38204() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38204__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38204__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> o_testPreviousElementSiblings_add38204__12 = element1.previousElementSiblings();
        Assert.assertTrue(o_testPreviousElementSiblings_add38204__12.isEmpty());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38204__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38204__21);
        String o_testPreviousElementSiblings_add38204__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38204__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38204__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(o_testPreviousElementSiblings_add38204__12.isEmpty());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38204__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38204__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57125() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57125__16 = element1.previousElementSiblings();
            Assert.assertTrue(o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57125__16.isEmpty());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add57688() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64791() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56943() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "/EM%Y@^FO*96qU") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>/EM%Y@^FO*96qU\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add57437() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add65048() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60642() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38209() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38209__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38209__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38209__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38209__20);
        String o_testPreviousElementSiblings_add38209__22 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38209__22);
        String o_testPreviousElementSiblings_add38209__24 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38209__24);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38209__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38209__20);
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38209__22);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38209__24);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38208() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38208__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38208__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38208__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38208__21);
        String o_testPreviousElementSiblings_add38208__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38208__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38208__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38208__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38208__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63996() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64878() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add57307() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add57382() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasParent();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add62753() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929_add64056() throws Exception {
        try {
            Document doc = Jsoup.parse(("GJ;j=f(8H}st" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  GJ;j=f(8H}st\n  <li id=\"a\">a</li>\n  <li id=\"b\">b</li>\n  <li id=\"c\">c</li>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString41929__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add57374() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56696__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57017() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).isBlock();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588_add65054() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</di>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42588__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add62072() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64696() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64687__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64980() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62246() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add64157() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add64399() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62001() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add60997() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64989() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56903() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add61558() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61774__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add57290() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56632__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56257__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56377() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add56991() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add57096() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add60721() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62955() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64932() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add61033() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add60290() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add57568() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64922() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64863() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add57561() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56947() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56266__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57356() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasParent();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57236() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).hasText();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add61028() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add57769() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64594() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add65055() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61494() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909_add61387() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42909__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(-1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56996() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).hasParent();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56878() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add56635() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64762__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56587() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add64178() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64887() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add64206() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64912() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add61419__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56626() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).isBlock();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840_add64995() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42840__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64835() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64846__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add57268() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303_add64377() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</Ql>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42303__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add65015() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add63950__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62282() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "/EM%Y@^FO*96qU") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>/EM%Y@^FO*96qU\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424_add63945__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "/EM%Y@^FO*96qU") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>/EM%Y@^FO*96qU\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42424__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57054() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).hasParent();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add60835() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38199() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> o_testPreviousElementSiblings_add38199__5 = element.previousElementSiblings();
        Assert.assertFalse(o_testPreviousElementSiblings_add38199__5.isEmpty());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38199__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38199__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38199__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38199__21);
        String o_testPreviousElementSiblings_add38199__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38199__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(o_testPreviousElementSiblings_add38199__5.isEmpty());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38199__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38199__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38199__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38198() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element o_testPreviousElementSiblings_add38198__3 = doc.getElementById("b");
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38198__3)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38198__3)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38198__3)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38198__3)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add38198__3)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38198__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38198__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38198__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38198__21);
        String o_testPreviousElementSiblings_add38198__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38198__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38198__3)).hasText());
        Assert.assertFalse(((Element) (o_testPreviousElementSiblings_add38198__3)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38198__3)).isBlock());
        Assert.assertTrue(((Element) (o_testPreviousElementSiblings_add38198__3)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (o_testPreviousElementSiblings_add38198__3)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38198__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38198__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38198__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_add38197() throws Exception {
        Document o_testPreviousElementSiblings_add38197__1 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (o_testPreviousElementSiblings_add38197__1)).hasText());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add38197__1)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add38197__1)).isBlock());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add38197__1)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblings_add38197__1)).toString());
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_add38197__9 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38197__9);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_add38197__21 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38197__21);
        String o_testPreviousElementSiblings_add38197__23 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38197__23);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (o_testPreviousElementSiblings_add38197__1)).hasText());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add38197__1)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add38197__1)).isBlock());
        Assert.assertFalse(((Document) (o_testPreviousElementSiblings_add38197__1)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblings_add38197__1)).toString());
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38197__9);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_add38197__21);
        Assert.assertEquals("b", o_testPreviousElementSiblings_add38197__23);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add56776() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64941() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932_add64821() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42932__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829_add56843() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42829__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315_add57586() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "LTlF%") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>LTlF%\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42315__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add65008() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807_add64787() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42807__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38155() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id=\'d5v\'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"d5v\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38155__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38155__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38155__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38155__20);
        String o_testPreviousElementSiblings_literalMutationString38155__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38155__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"d5v\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38155__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38155__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38155__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38154() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id=\'dxiv\'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"dxiv\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38154__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38154__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38154__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38154__20);
        String o_testPreviousElementSiblings_literalMutationString38154__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38154__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"dxiv\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38154__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38154__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38154__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38153() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "B9x.=SIlnwc=eY") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>B9x.=SIlnwc=eY\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38153__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38153__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38153__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38153__20);
        String o_testPreviousElementSiblings_literalMutationString38153__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38153__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>B9x.=SIlnwc=eY\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38153__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38153__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38153__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38152() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + " Hello\nthere \u00a0  ") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul> Hello there &nbsp; \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38152__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38152__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38152__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38152__20);
        String o_testPreviousElementSiblings_literalMutationString38152__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38152__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul> Hello there &nbsp; \n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38152__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38152__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38152__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38151() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38151__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38151__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38151__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38151__20);
        String o_testPreviousElementSiblings_literalMutationString38151__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38151__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <li id=\"d\">d</li>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38151__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38151__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38151__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38150() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</?ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <!--?ul-->\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38150__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38150__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38150__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38150__20);
        String o_testPreviousElementSiblings_literalMutationString38150__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38150__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <!--?ul-->\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <!--?ul-->\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38150__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38150__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38150__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <!--?ul-->\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618_add64384() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</d8v>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42618__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896_add57056() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57387() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).toString();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42896__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(1);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859_add57641() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42859__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add56973() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements().isEmpty();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add57269() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604_add64562__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "6hO4YX")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>6hO4YX\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42604__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add59940__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add62098() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412_add60011() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div i=\'div\'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div i=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42412__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553() throws Exception {
        try {
            Document o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553__3 = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553__3)).hasText());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553__3)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553__3)).isBlock());
            Assert.assertFalse(((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553__3)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510_add56553__3)).toString());
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38149() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</yl>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38149__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38149__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38149__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38149__20);
        String o_testPreviousElementSiblings_literalMutationString38149__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38149__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38149__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38149__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38149__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38148() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38148__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38148__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38148__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38148__20);
        String o_testPreviousElementSiblings_literalMutationString38148__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38148__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </ul>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38148__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38148__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38148__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </ul>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38147() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "!9>)r") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>!9&gt;)r\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38147__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38147__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38147__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38147__20);
        String o_testPreviousElementSiblings_literalMutationString38147__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38147__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>!9&gt;)r\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>!9&gt;)r\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38147__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38147__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38147__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>!9&gt;)r\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38146() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + " Hello\nthere \u00a0  ") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li> Hello there &nbsp; \n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38146__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38146__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38146__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38146__20);
        String o_testPreviousElementSiblings_literalMutationString38146__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38146__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li> Hello there &nbsp; \n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li> Hello there &nbsp; \n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38146__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38146__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38146__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li> Hello there &nbsp; \n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38145() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38145__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38145__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38145__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38145__20);
        String o_testPreviousElementSiblings_literalMutationString38145__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38145__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38145__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38145__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38145__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">c</li>\n <div id=\"div\">\n  <li id=\"d\">d</li>\n </div>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38142() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id=\'c\'>nc</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">nc</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38142__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38142__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">nc</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38142__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38142__20);
        String o_testPreviousElementSiblings_literalMutationString38142__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38142__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">nc</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">nc</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38142__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">nc</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38142__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38142__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">b</li>\n <li id=\"c\">nc</li>\n</ul>", ((Element) (ul)).toString());
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275_add61227() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <div id=\"div\">\n    <li id=\"d\">d</li>\n   </div>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42275__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719_add64936() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            ((Element) (element)).getAllElements();
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42719__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551_add62411() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42551__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add56985() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331_add56981() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "<ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n   <ul>\n    <div id=\"div\">\n     <li id=\"d\">d</li>\n    </div>\n   </ul>\n  </ul>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42331__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873_add57378() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            ((Element) (element1)).getAllElements().isEmpty();
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42873__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919_add57279() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements().isEmpty();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42919__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id=d\'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\'\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationString42510__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883_add62989() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            ((Element) (element2)).getAllElements();
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__22);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42883__24);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705_add61844() throws Exception {
        try {
            Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id='b'>b</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
            Assert.assertTrue(((Document) (doc)).hasText());
            Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
            Assert.assertFalse(((Document) (doc)).isBlock());
            Assert.assertFalse(((Document) (doc)).hasParent());
            Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">b</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
            ((Document) (doc)).getAllElements().isEmpty();
            Element element = doc.getElementById("b");
            Assert.assertTrue(((Element) (element)).hasText());
            Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element)).isBlock());
            Assert.assertTrue(((Element) (element)).hasParent());
            Assert.assertEquals("<li id=\"b\">b</li>", ((Element) (element)).toString());
            List<Element> elementSiblings = element.previousElementSiblings();
            elementSiblings.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10 = elementSiblings.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__10);
            Element element1 = doc.getElementById("a");
            Assert.assertTrue(((Element) (element1)).hasText());
            Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element1)).isBlock());
            Assert.assertTrue(((Element) (element1)).hasParent());
            Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
            List<Element> elementSiblings1 = element1.previousElementSiblings();
            elementSiblings1.size();
            Element element2 = doc.getElementById("c");
            Assert.assertTrue(((Element) (element2)).hasText());
            Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
            Assert.assertTrue(((Element) (element2)).isBlock());
            Assert.assertTrue(((Element) (element2)).hasParent());
            Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
            List<Element> elementSiblings2 = element2.previousElementSiblings();
            elementSiblings2.size();
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23 = elementSiblings2.get(0).id();
            Assert.assertEquals("a", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__23);
            String o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25 = elementSiblings2.get(1).id();
            Assert.assertEquals("b", o_testPreviousElementSiblingsnull38220_failAssert237_literalMutationNumber42705__25);
            Element ul = doc.getElementById(null);
            List<Element> elementSiblings3 = ul.previousElementSiblings();
            try {
                Element element3 = elementSiblings3.get(0);
            } catch (IndexOutOfBoundsException e) {
            }
            org.junit.Assert.fail("testPreviousElementSiblingsnull38220 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected_1) {
        }
    }

    @Test(timeout = 10000)
    public void testPreviousElementSiblings_literalMutationString38138() throws Exception {
        Document doc = Jsoup.parse(("<ul id='ul'>" + (((((("<li id='a'>a</li>" + "<li id=\'b\'>f</li>") + "<li id='c'>c</li>") + "</ul>") + "<div id='div'>") + "<li id='d'>d</li>") + "</div>")));
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">f</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Element element = doc.getElementById("b");
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">f</li>", ((Element) (element)).toString());
        List<Element> elementSiblings = element.previousElementSiblings();
        Assert.assertFalse(elementSiblings.isEmpty());
        elementSiblings.size();
        String o_testPreviousElementSiblings_literalMutationString38138__8 = elementSiblings.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38138__8);
        Element element1 = doc.getElementById("a");
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        List<Element> elementSiblings1 = element1.previousElementSiblings();
        elementSiblings1.size();
        Element element2 = doc.getElementById("c");
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        List<Element> elementSiblings2 = element2.previousElementSiblings();
        Assert.assertFalse(elementSiblings2.isEmpty());
        elementSiblings2.size();
        String o_testPreviousElementSiblings_literalMutationString38138__20 = elementSiblings2.get(0).id();
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38138__20);
        String o_testPreviousElementSiblings_literalMutationString38138__22 = elementSiblings2.get(1).id();
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38138__22);
        Element ul = doc.getElementById("ul");
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">f</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
        List<Element> elementSiblings3 = ul.previousElementSiblings();
        try {
            Element element3 = elementSiblings3.get(0);
        } catch (IndexOutOfBoundsException e) {
        }
        Assert.assertTrue(((Document) (doc)).hasText());
        Assert.assertFalse(((Document) (doc)).getAllElements().isEmpty());
        Assert.assertFalse(((Document) (doc)).isBlock());
        Assert.assertFalse(((Document) (doc)).hasParent());
        Assert.assertEquals("<html>\n <head></head>\n <body>\n  <ul id=\"ul\">\n   <li id=\"a\">a</li>\n   <li id=\"b\">f</li>\n   <li id=\"c\">c</li>\n  </ul>\n  <div id=\"div\">\n   <li id=\"d\">d</li>\n  </div>\n </body>\n</html>", ((Document) (doc)).toString());
        Assert.assertTrue(((Element) (element)).hasText());
        Assert.assertFalse(((Element) (element)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element)).isBlock());
        Assert.assertTrue(((Element) (element)).hasParent());
        Assert.assertEquals("<li id=\"b\">f</li>", ((Element) (element)).toString());
        Assert.assertFalse(elementSiblings.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38138__8);
        Assert.assertTrue(((Element) (element1)).hasText());
        Assert.assertFalse(((Element) (element1)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element1)).isBlock());
        Assert.assertTrue(((Element) (element1)).hasParent());
        Assert.assertEquals("<li id=\"a\">a</li>", ((Element) (element1)).toString());
        Assert.assertTrue(((Element) (element2)).hasText());
        Assert.assertFalse(((Element) (element2)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (element2)).isBlock());
        Assert.assertTrue(((Element) (element2)).hasParent());
        Assert.assertEquals("<li id=\"c\">c</li>", ((Element) (element2)).toString());
        Assert.assertFalse(elementSiblings2.isEmpty());
        Assert.assertEquals("a", o_testPreviousElementSiblings_literalMutationString38138__20);
        Assert.assertEquals("b", o_testPreviousElementSiblings_literalMutationString38138__22);
        Assert.assertTrue(((Element) (ul)).hasText());
        Assert.assertFalse(((Element) (ul)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (ul)).isBlock());
        Assert.assertTrue(((Element) (ul)).hasParent());
        Assert.assertEquals("<ul id=\"ul\">\n <li id=\"a\">a</li>\n <li id=\"b\">f</li>\n <li id=\"c\">c</li>\n</ul>", ((Element) (ul)).toString());
    }
}

