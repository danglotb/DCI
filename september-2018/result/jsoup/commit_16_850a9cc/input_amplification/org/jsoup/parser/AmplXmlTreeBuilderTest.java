package org.jsoup.parser;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Collections;
import java.util.Set;
import org.jsoup.Jsoup;
import org.jsoup.TextUtil;
import org.jsoup.helper.StringUtil;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.Elements;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import static org.jsoup.nodes.Document.OutputSettings.Syntax.xml;


public class AmplXmlTreeBuilderTest {
    @Test(timeout = 10000)
    public void testPopToClose_mg47684_mg49070() throws Exception {
        String __DSPOT_tagName_102347 = "?[&=}Na|frpEv-4K(GqJ";
        String __DSPOT_tagName_102040 = "F+M0K )zU$hbV/=1#(GN";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testPopToClose_mg47684__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
        Element o_testPopToClose_mg47684__10 = doc.createElement(__DSPOT_tagName_102040);
        Element o_testPopToClose_mg47684_mg49070__16 = o_testPopToClose_mg47684__10.appendElement(__DSPOT_tagName_102347);
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49070__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49070__16)).hasText());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49070__16)).isBlock());
        Assert.assertEquals("<?[&=}Na|frpEv-4K(GqJ></?[&=}Na|frpEv-4K(GqJ>", ((Element) (o_testPopToClose_mg47684_mg49070__16)).toString());
        Assert.assertTrue(((Element) (o_testPopToClose_mg47684_mg49070__16)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
    }

    @Test(timeout = 10000)
    public void testPopToClose_mg47684_mg49088() throws Exception {
        String __DSPOT_attributeValue_102354 = "Qm&2F27&p{FdD`&Jmp<R";
        String __DSPOT_attributeKey_102353 = "XaM;qDkZgOfhk>VIa^6s";
        String __DSPOT_tagName_102040 = "F+M0K )zU$hbV/=1#(GN";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testPopToClose_mg47684__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
        Element o_testPopToClose_mg47684__10 = doc.createElement(__DSPOT_tagName_102040);
        Element o_testPopToClose_mg47684_mg49088__17 = o_testPopToClose_mg47684__10.attr(__DSPOT_attributeKey_102353, __DSPOT_attributeValue_102354);
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49088__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49088__17)).hasText());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49088__17)).isBlock());
        Assert.assertEquals("<F+M0K )zU$hbV/=1#(GN XaM;qDkZgOfhk>VIa^6s=\"Qm&amp;2F27&amp;p{FdD`&amp;Jmp<R\"></F+M0K )zU$hbV/=1#(GN>", ((Element) (o_testPopToClose_mg47684_mg49088__17)).toString());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49088__17)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
    }

    @Test(timeout = 10000)
    public void testPopToClose_mg47684_mg49265() throws Exception {
        String __DSPOT_tagName_102423 = "tB8gxJwI,H-.!umPH&68";
        String __DSPOT_tagName_102040 = "F+M0K )zU$hbV/=1#(GN";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testPopToClose_mg47684__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
        Element o_testPopToClose_mg47684__10 = doc.createElement(__DSPOT_tagName_102040);
        Element o_testPopToClose_mg47684_mg49265__16 = o_testPopToClose_mg47684__10.prependElement(__DSPOT_tagName_102423);
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49265__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49265__16)).hasText());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49265__16)).isBlock());
        Assert.assertEquals("<tB8gxJwI,H-.!umPH&68></tB8gxJwI,H-.!umPH&68>", ((Element) (o_testPopToClose_mg47684_mg49265__16)).toString());
        Assert.assertTrue(((Element) (o_testPopToClose_mg47684_mg49265__16)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
    }

    @Test(timeout = 10000)
    public void testPopToClose_mg47684_mg49318() throws Exception {
        String __DSPOT_tagName_102431 = "5Mr^_pK+iLRIqf{Xs-S)";
        String __DSPOT_tagName_102040 = "F+M0K )zU$hbV/=1#(GN";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testPopToClose_mg47684__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
        Element o_testPopToClose_mg47684__10 = doc.createElement(__DSPOT_tagName_102040);
        Element o_testPopToClose_mg47684_mg49318__16 = o_testPopToClose_mg47684__10.tagName(__DSPOT_tagName_102431);
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49318__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49318__16)).hasText());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49318__16)).isBlock());
        Assert.assertEquals("<5Mr^_pK+iLRIqf{Xs-S)></5Mr^_pK+iLRIqf{Xs-S)>", ((Element) (o_testPopToClose_mg47684_mg49318__16)).toString());
        Assert.assertFalse(((Element) (o_testPopToClose_mg47684_mg49318__16)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testPopToClose_mg47684__8);
    }

    @Test(timeout = 10000)
    public void testCommentAndDocType_mg385610_mg387346() throws Exception {
        String __DSPOT_tagName_201230 = "FI{h0|8v[/PIgfOf?S+3";
        String __DSPOT_tagName_200823 = "QP7A+O&f0[bxxdx{-k)@";
        String xml = "<!DOCTYPE HTML><!-- a comment -->One <qux />Two";
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testCommentAndDocType_mg385610__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
        Element o_testCommentAndDocType_mg385610__9 = doc.createElement(__DSPOT_tagName_200823);
        Element o_testCommentAndDocType_mg385610_mg387346__15 = o_testCommentAndDocType_mg385610__9.prependElement(__DSPOT_tagName_201230);
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387346__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387346__15)).hasText());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387346__15)).isBlock());
        Assert.assertEquals("<FI{h0|8v[/PIgfOf?S+3></FI{h0|8v[/PIgfOf?S+3>", ((Element) (o_testCommentAndDocType_mg385610_mg387346__15)).toString());
        Assert.assertTrue(((Element) (o_testCommentAndDocType_mg385610_mg387346__15)).hasParent());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
    }

    @Test(timeout = 10000)
    public void testCommentAndDocType_mg385610_mg387356() throws Exception {
        String __DSPOT_tagName_201235 = "HiDll7?}RxW}*jR&XwYG";
        String __DSPOT_tagName_200823 = "QP7A+O&f0[bxxdx{-k)@";
        String xml = "<!DOCTYPE HTML><!-- a comment -->One <qux />Two";
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testCommentAndDocType_mg385610__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
        Element o_testCommentAndDocType_mg385610__9 = doc.createElement(__DSPOT_tagName_200823);
        Element o_testCommentAndDocType_mg385610_mg387356__15 = o_testCommentAndDocType_mg385610__9.tagName(__DSPOT_tagName_201235);
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387356__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387356__15)).hasText());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387356__15)).isBlock());
        Assert.assertEquals("<HiDll7?}RxW}*jR&XwYG></HiDll7?}RxW}*jR&XwYG>", ((Element) (o_testCommentAndDocType_mg385610_mg387356__15)).toString());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387356__15)).hasParent());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
    }

    @Test(timeout = 10000)
    public void testCommentAndDocType_mg385610_mg387253() throws Exception {
        String __DSPOT_tagName_201180 = "#4!sLOCbZH_?*=|[6`Ga";
        String __DSPOT_tagName_200823 = "QP7A+O&f0[bxxdx{-k)@";
        String xml = "<!DOCTYPE HTML><!-- a comment -->One <qux />Two";
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testCommentAndDocType_mg385610__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
        Element o_testCommentAndDocType_mg385610__9 = doc.createElement(__DSPOT_tagName_200823);
        Element o_testCommentAndDocType_mg385610_mg387253__15 = o_testCommentAndDocType_mg385610__9.appendElement(__DSPOT_tagName_201180);
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387253__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387253__15)).hasText());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387253__15)).isBlock());
        Assert.assertEquals("<#4!sLOCbZH_?*=|[6`Ga></#4!sLOCbZH_?*=|[6`Ga>", ((Element) (o_testCommentAndDocType_mg385610_mg387253__15)).toString());
        Assert.assertTrue(((Element) (o_testCommentAndDocType_mg385610_mg387253__15)).hasParent());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
    }

    @Test(timeout = 10000)
    public void testCommentAndDocType_mg385610_mg387271() throws Exception {
        String __DSPOT_attributeValue_201189 = "H0k!_Rzd(?%[W7x]D(].";
        String __DSPOT_attributeKey_201188 = "^I?`BM2_30We@o+fgj_e";
        String __DSPOT_tagName_200823 = "QP7A+O&f0[bxxdx{-k)@";
        String xml = "<!DOCTYPE HTML><!-- a comment -->One <qux />Two";
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        XmlTreeBuilder tb = new XmlTreeBuilder();
        Document doc = tb.parse(xml, "http://foo.com/");
        String o_testCommentAndDocType_mg385610__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
        Element o_testCommentAndDocType_mg385610__9 = doc.createElement(__DSPOT_tagName_200823);
        Element o_testCommentAndDocType_mg385610_mg387271__16 = o_testCommentAndDocType_mg385610__9.attr(__DSPOT_attributeKey_201188, __DSPOT_attributeValue_201189);
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387271__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387271__16)).hasText());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387271__16)).isBlock());
        Assert.assertEquals("<QP7A+O&f0[bxxdx{-k)@ ^I?`BM2_30We@o+fgj_e=\"H0k!_Rzd(?%[W7x]D(].\"></QP7A+O&f0[bxxdx{-k)@>", ((Element) (o_testCommentAndDocType_mg385610_mg387271__16)).toString());
        Assert.assertFalse(((Element) (o_testCommentAndDocType_mg385610_mg387271__16)).hasParent());
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", xml);
        Assert.assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", o_testCommentAndDocType_mg385610__7);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172612_mg174378() throws Exception {
        String __DSPOT_tagName_138424 = ">Qi%@Hzup7&RwCuM[h]-";
        String __DSPOT_tagName_138056 = "GeCXzu4kej.t7I1ZD0#l";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172612__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
        Element o_testSupplyParserToJsoupClass_mg172612__8 = doc.createElement(__DSPOT_tagName_138056);
        Element o_testSupplyParserToJsoupClass_mg172612_mg174378__14 = o_testSupplyParserToJsoupClass_mg172612__8.appendElement(__DSPOT_tagName_138424);
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174378__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174378__14)).hasText());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174378__14)).isBlock());
        Assert.assertEquals("<>Qi%@Hzup7&RwCuM[h]-></>Qi%@Hzup7&RwCuM[h]->", ((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174378__14)).toString());
        Assert.assertTrue(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174378__14)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172612_mg174391() throws Exception {
        String __DSPOT_attributeValue_138434 = "%1&+NR>t}foW1C?>c6]X";
        String __DSPOT_attributeKey_138432 = "R-b#?*1(m]OJI1^mgc&y";
        String __DSPOT_tagName_138056 = "GeCXzu4kej.t7I1ZD0#l";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172612__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
        Element o_testSupplyParserToJsoupClass_mg172612__8 = doc.createElement(__DSPOT_tagName_138056);
        Element o_testSupplyParserToJsoupClass_mg172612_mg174391__15 = o_testSupplyParserToJsoupClass_mg172612__8.attr(__DSPOT_attributeKey_138432, __DSPOT_attributeValue_138434);
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174391__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174391__15)).hasText());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174391__15)).isBlock());
        Assert.assertEquals("<GeCXzu4kej.t7I1ZD0#l R-b#?*1(m]OJI1^mgc&y=\"%1&amp;+NR>t}foW1C?>c6]X\"></GeCXzu4kej.t7I1ZD0#l>", ((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174391__15)).toString());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174391__15)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_add172606() throws Exception {
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Parser o_testSupplyParserToJsoupClass_add172606__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_add172606__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_add172606__2)).getErrors());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_add172606__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_add172606__6);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_add172606__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_add172606__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172619_add174235_add190220() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_138057 = new Document.OutputSettings();
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Parser o_testSupplyParserToJsoupClass_mg172619_add174235_add190220__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190220__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190220__4)).getErrors());
        Document o_testSupplyParserToJsoupClass_mg172619_add174235__4 = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172619__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
        Document o_testSupplyParserToJsoupClass_mg172619__9 = doc.outputSettings(__DSPOT_outputSettings_138057);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190220__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190220__4)).getErrors());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172619_add174249_add175364() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_138057 = new Document.OutputSettings();
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Parser o_testSupplyParserToJsoupClass_mg172619_add174249_add175364__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174249_add175364__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174249_add175364__4)).getErrors());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172619__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
        Document o_testSupplyParserToJsoupClass_mg172619_add174249__11 = doc.outputSettings(__DSPOT_outputSettings_138057);
        Document o_testSupplyParserToJsoupClass_mg172619__9 = doc.outputSettings(__DSPOT_outputSettings_138057);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174249_add175364__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174249_add175364__4)).getErrors());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_add172605_add173504() throws Exception {
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Document o_testSupplyParserToJsoupClass_add172605__2 = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        Parser o_testSupplyParserToJsoupClass_add172605_add173504__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173504__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173504__6)).getErrors());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_add172605__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_add172605__7);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173504__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173504__6)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172612_mg174465() throws Exception {
        String __DSPOT_tagName_138478 = "Y;W]v)0-l1Z& f?K?v[X";
        String __DSPOT_tagName_138056 = "GeCXzu4kej.t7I1ZD0#l";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172612__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
        Element o_testSupplyParserToJsoupClass_mg172612__8 = doc.createElement(__DSPOT_tagName_138056);
        Element o_testSupplyParserToJsoupClass_mg172612_mg174465__14 = o_testSupplyParserToJsoupClass_mg172612__8.tagName(__DSPOT_tagName_138478);
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174465__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174465__14)).hasText());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174465__14)).isBlock());
        Assert.assertEquals("<Y;W]v)0-l1Z& f?K?v[X></Y;W]v)0-l1Z& f?K?v[X>", ((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174465__14)).toString());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174465__14)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172619_add174240() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_138057 = new Document.OutputSettings();
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Parser o_testSupplyParserToJsoupClass_mg172619_add174240__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174240__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174240__4)).getErrors());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172619__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
        Document o_testSupplyParserToJsoupClass_mg172619__9 = doc.outputSettings(__DSPOT_outputSettings_138057);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174240__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174240__4)).getErrors());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172612_mg174455() throws Exception {
        String __DSPOT_tagName_138473 = "1/*_6p=w|f5|nZ=2J7Xw";
        String __DSPOT_tagName_138056 = "GeCXzu4kej.t7I1ZD0#l";
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172612__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
        Element o_testSupplyParserToJsoupClass_mg172612__8 = doc.createElement(__DSPOT_tagName_138056);
        Element o_testSupplyParserToJsoupClass_mg172612_mg174455__14 = o_testSupplyParserToJsoupClass_mg172612__8.prependElement(__DSPOT_tagName_138473);
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174455__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174455__14)).hasText());
        Assert.assertFalse(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174455__14)).isBlock());
        Assert.assertEquals("<1/*_6p=w|f5|nZ=2J7Xw></1/*_6p=w|f5|nZ=2J7Xw>", ((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174455__14)).toString());
        Assert.assertTrue(((Element) (o_testSupplyParserToJsoupClass_mg172612_mg174455__14)).hasParent());
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172612__6);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_mg172619_add174235_add190278() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_138057 = new Document.OutputSettings();
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Document o_testSupplyParserToJsoupClass_mg172619_add174235__4 = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        Parser o_testSupplyParserToJsoupClass_mg172619_add174235_add190278__8 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190278__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190278__8)).getErrors());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_mg172619__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
        Document o_testSupplyParserToJsoupClass_mg172619__9 = doc.outputSettings(__DSPOT_outputSettings_138057);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190278__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_mg172619_add174235_add190278__8)).getErrors());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_mg172619__7);
    }

    @Test(timeout = 10000)
    public void testSupplyParserToJsoupClass_add172605_add173426() throws Exception {
        String xml = "<doc><val>One<val>Two</val></bar>Three</doc>";
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Parser o_testSupplyParserToJsoupClass_add172605_add173426__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173426__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173426__2)).getErrors());
        Document o_testSupplyParserToJsoupClass_add172605__2 = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "http://foo.com/", Parser.xmlParser());
        String o_testSupplyParserToJsoupClass_add172605__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToJsoupClass_add172605__7);
        Assert.assertEquals("<doc><val>One<val>Two</val></bar>Three</doc>", xml);
        Assert.assertFalse(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173426__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToJsoupClass_add172605_add173426__2)).getErrors());
    }

    @Ignore
    @Test
    public void testSupplyParserToConnection() throws IOException {
        String xmlUrl = "http://direct.infohound.net/tools/jsoup-xml-test.xml";
        Document xmlDoc = Jsoup.connect(xmlUrl).parser(Parser.xmlParser()).get();
        Document htmlDoc = Jsoup.connect(xmlUrl).parser(Parser.htmlParser()).get();
        Document autoXmlDoc = Jsoup.connect(xmlUrl).get();
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(xmlDoc.html()));
        Assert.assertFalse(htmlDoc.equals(xmlDoc));
        Assert.assertEquals(xmlDoc, autoXmlDoc);
        Assert.assertEquals(1, htmlDoc.select("head").size());
        Assert.assertEquals(0, xmlDoc.select("head").size());
        Assert.assertEquals(0, autoXmlDoc.select("head").size());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStreamnull345699_add345986() throws IOException, Exception, URISyntaxException {
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStreamnull345699_add345986__7 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStreamnull345699_add345986__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStreamnull345699_add345986__7)).getErrors());
        Document doc = Jsoup.parse(null, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStreamnull345699__10 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("", o_testSupplyParserToDataStreamnull345699__10);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStreamnull345699_add345986__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStreamnull345699_add345986__7)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347715() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URL o_testSupplyParserToDataStream_add345675_add347715__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347715__5)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712__5)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add357887() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345675_add347712_add357887__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getRef());
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357887__1)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676__1)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676__1)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347719() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStream_add345675_add347719__11 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345675_add347719__11)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345675_add347719__11)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345675_add347719__11)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345675_add347719__11)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawUserInfo());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawPath());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawFragment());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675__1)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawUserInfo());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawPath());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getRawFragment());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675__1)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345678() throws IOException, Exception, URISyntaxException {
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStream_add345678__7 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345678__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345678__7)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345678__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345678__11);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345678__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345678__7)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add357878() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347712_add357878__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getPort())));
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357878__1)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_literalMutationString347278_failAssert956() throws IOException, Exception, URISyntaxException {
        try {
            URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
            String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testSupplyParserToDataStream_add345675_literalMutationString347278 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getPort())));
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583__1)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359892() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345675_add347583_add359892__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getRef());
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359892__1)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347594() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345675_add347594__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getRef());
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347594__1)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839_add353130() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStream_add345676_add346839_add353130__14 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345676_add346839_add353130__14)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345676_add346839_add353130__14)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345676_add346839_add353130__14)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345676_add346839_add353130__14)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839_add353116() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345676_add346839_add353116__8 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add353116__8)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839_add353120() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URL o_testSupplyParserToDataStream_add345676_add346839_add353120__8 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add353120__8)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346762() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676_add346762__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getRef());
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346762__1)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359920() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStream_add345675_add347583_add359920__15 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345675_add347583_add359920__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345675_add347583_add359920__15)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345675_add347583_add359920__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345675_add347583_add359920__15)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359915() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347583_add359915__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getPort())));
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359915__5)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359916() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URL o_testSupplyParserToDataStream_add345675_add347583_add359916__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getRef());
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359916__5)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359917() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347583_add359917__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359917__9)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359918() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URL o_testSupplyParserToDataStream_add345675_add347583_add359918__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347583_add359918__9)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_mg345681_literalMutationString345810_failAssert985() throws IOException, Exception, URISyntaxException {
        try {
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
            String o_testSupplyParserToDataStream_mg345681__10 = TextUtil.stripNewlines(doc.html());
            doc.body();
            org.junit.Assert.fail("testSupplyParserToDataStream_mg345681_literalMutationString345810 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStreamnull345699_literalMutationString345809_failAssert974() throws IOException, Exception, URISyntaxException {
        try {
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(null, null, "http://foo.com", Parser.xmlParser());
            String o_testSupplyParserToDataStreamnull345699__10 = TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testSupplyParserToDataStreamnull345699_literalMutationString345809 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_literalMutationString346535_failAssert968() throws IOException, Exception, URISyntaxException {
        try {
            URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
            String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testSupplyParserToDataStream_add345676_literalMutationString346535 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add357923() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URL o_testSupplyParserToDataStream_add345675_add347712_add357923__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getRef());
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add357923__5)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_mg345685_literalMutationString347070_failAssert984() throws IOException, Exception, URISyntaxException {
        try {
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
            String o_testSupplyParserToDataStream_mg345685__10 = TextUtil.stripNewlines(doc.html());
            doc.head();
            org.junit.Assert.fail("testSupplyParserToDataStream_mg345685_literalMutationString347070 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add357904() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712_add357904__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getPort())));
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add357904__5)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add358146() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712_add358146__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347712_add358146__9)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add358189() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStream_add345675_add347712_add358189__15 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345675_add347712_add358189__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345675_add347712_add358189__15)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345675_add347712_add358189__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345675_add347712_add358189__15)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347712_add358161() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675_add347712__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URL o_testSupplyParserToDataStream_add345675_add347712_add358161__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345675_add347712_add358161__9)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345675_add347583_add359890() throws IOException, Exception, URISyntaxException {
        URI o_testSupplyParserToDataStream_add345675_add347583_add359890__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getPort())));
        URI o_testSupplyParserToDataStream_add345675_add347583__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        URI o_testSupplyParserToDataStream_add345675__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345675__12 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345675__12);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345675_add347583_add359890__1)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_literalMutationString345663_failAssert932() throws IOException, Exception, URISyntaxException {
        try {
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
            TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testSupplyParserToDataStream_literalMutationString345663 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839_add352928() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676_add346839_add352928__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getRef());
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352928__1)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346850() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testSupplyParserToDataStream_add345676_add346850__10 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345676_add346850__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345676_add346850__10)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertFalse(((Parser) (o_testSupplyParserToDataStream_add345676_add346850__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testSupplyParserToDataStream_add345676_add346850__10)).getErrors());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346843() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URL o_testSupplyParserToDataStream_add345676_add346843__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346843__4)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839_add352934() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URI o_testSupplyParserToDataStream_add345676_add346839_add352934__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getPort())));
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839_add352934__4)).getPort())));
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839_add352940() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URL o_testSupplyParserToDataStream_add345676_add346839_add352940__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getRef());
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getAuthority());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getHost());
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testSupplyParserToDataStream_add345676_add346839_add352940__4)).getRef());
    }

    @Test(timeout = 10000)
    public void testSupplyParserToDataStream_add345676_add346839() throws IOException, Exception, URISyntaxException {
        URL o_testSupplyParserToDataStream_add345676__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml");
        URI o_testSupplyParserToDataStream_add345676_add346839__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-test.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://foo.com", Parser.xmlParser());
        String o_testSupplyParserToDataStream_add345676__11 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", o_testSupplyParserToDataStream_add345676__11);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).toString());
        Assert.assertEquals(1064420468, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-test.xml", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getPath());
        Assert.assertFalse(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getScheme());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getAuthority());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getFragment());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getQuery());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getHost());
        Assert.assertNull(((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testSupplyParserToDataStream_add345676_add346839__4)).getPort())));
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392() throws Exception {
        String __DSPOT_attributeValue_112337 = "rlISkaH-flC/43HwzE<z";
        String __DSPOT_attributeKey_112336 = "gceWHyC<y)2@|%_JMHv:";
        Document o_testDoesNotForceSelfClosingKnownTags_add71276__1 = Jsoup.parse("<br>one</br>");
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        Element o_testDoesNotForceSelfClosingKnownTags_add71276_add73042__7 = htmlDoc.body();
        String o_testDoesNotForceSelfClosingKnownTags_add71276__5 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71276__5);
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71276__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71276__10);
        Element o_testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392__22 = o_testDoesNotForceSelfClosingKnownTags_add71276_add73042__7.attr(__DSPOT_attributeKey_112336, __DSPOT_attributeValue_112337);
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392__22)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392__22)).hasText());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392__22)).isBlock());
        Assert.assertEquals("<body gceWHyC<y)2@|%_JMHv:=\"rlISkaH-flC/43HwzE<z\">\n <br>one\n <br>\n</body>", ((Element) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392__22)).toString());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73042_mg80392__22)).hasParent());
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71276__5);
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71276__10);
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71276_add73056() throws Exception {
        Document o_testDoesNotForceSelfClosingKnownTags_add71276__1 = Jsoup.parse("<br>one</br>");
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        String o_testDoesNotForceSelfClosingKnownTags_add71276__5 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71276__5);
        Parser o_testDoesNotForceSelfClosingKnownTags_add71276_add73056__11 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73056__11)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73056__11)).getErrors());
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71276__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71276__10);
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71276__5);
        Assert.assertFalse(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73056__11)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71276_add73056__11)).getErrors());
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71278_mg72104() throws Exception {
        String __DSPOT_tagName_110233 = "d21(n%Tw:9c.EAtU0sdl";
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        Element o_testDoesNotForceSelfClosingKnownTags_add71278__4 = htmlDoc.body();
        String o_testDoesNotForceSelfClosingKnownTags_add71278__5 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71278__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
        Element o_testDoesNotForceSelfClosingKnownTags_add71278_mg72104__18 = o_testDoesNotForceSelfClosingKnownTags_add71278__4.appendElement(__DSPOT_tagName_110233);
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72104__18)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72104__18)).hasText());
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72104__18)).isBlock());
        Assert.assertEquals("<d21(n%Tw:9c.EAtU0sdl></d21(n%Tw:9c.EAtU0sdl>", ((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72104__18)).toString());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72104__18)).hasParent());
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71278_mg72143() throws Exception {
        String __DSPOT_attributeValue_110250 = ";imc,B#[)8+_T7fMj`)J";
        String __DSPOT_attributeKey_110249 = "K7d7cofili7#OW%!5YSz";
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        Element o_testDoesNotForceSelfClosingKnownTags_add71278__4 = htmlDoc.body();
        String o_testDoesNotForceSelfClosingKnownTags_add71278__5 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71278__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
        Element o_testDoesNotForceSelfClosingKnownTags_add71278_mg72143__19 = o_testDoesNotForceSelfClosingKnownTags_add71278__4.attr(__DSPOT_attributeKey_110249, __DSPOT_attributeValue_110250);
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72143__19)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72143__19)).hasText());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72143__19)).isBlock());
        Assert.assertEquals("<body K7d7cofili7#OW%!5YSz=\";imc,B#[)8+_T7fMj`)J\">\n <br>one\n <br>\n</body>", ((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72143__19)).toString());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72143__19)).hasParent());
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71280() throws Exception {
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        String o_testDoesNotForceSelfClosingKnownTags_add71280__4 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71280__4);
        Parser o_testDoesNotForceSelfClosingKnownTags_add71280__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71280__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71280__6)).getErrors());
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71280__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71280__10);
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71280__4);
        Assert.assertFalse(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71280__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesNotForceSelfClosingKnownTags_add71280__6)).getErrors());
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71278_mg72711() throws Exception {
        String __DSPOT_tagName_110511 = "!Ptxk5jp$! @c|%fB:#l";
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        Element o_testDoesNotForceSelfClosingKnownTags_add71278__4 = htmlDoc.body();
        String o_testDoesNotForceSelfClosingKnownTags_add71278__5 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71278__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
        Element o_testDoesNotForceSelfClosingKnownTags_add71278_mg72711__18 = o_testDoesNotForceSelfClosingKnownTags_add71278__4.tagName(__DSPOT_tagName_110511);
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72711__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72711__18)).hasText());
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72711__18)).isBlock());
        Assert.assertEquals("<!Ptxk5jp$! @c|%fB:#l>\n <br>one\n <br>\n</!Ptxk5jp$! @c|%fB:#l>", ((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72711__18)).toString());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72711__18)).hasParent());
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
    }

    @Test(timeout = 10000)
    public void testDoesNotForceSelfClosingKnownTags_add71278_mg72631() throws Exception {
        String __DSPOT_tagName_110470 = "580f*+WgYM_=|(RbV:>P";
        Document htmlDoc = Jsoup.parse("<br>one</br>");
        Element o_testDoesNotForceSelfClosingKnownTags_add71278__4 = htmlDoc.body();
        String o_testDoesNotForceSelfClosingKnownTags_add71278__5 = htmlDoc.body().html();
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
        String o_testDoesNotForceSelfClosingKnownTags_add71278__10 = xmlDoc.html();
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
        Element o_testDoesNotForceSelfClosingKnownTags_add71278_mg72631__18 = o_testDoesNotForceSelfClosingKnownTags_add71278__4.prependElement(__DSPOT_tagName_110470);
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72631__18)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72631__18)).hasText());
        Assert.assertFalse(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72631__18)).isBlock());
        Assert.assertEquals("<580f*+WgYM_=|(RbV:>P></580f*+WgYM_=|(RbV:>P>", ((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72631__18)).toString());
        Assert.assertTrue(((Element) (o_testDoesNotForceSelfClosingKnownTags_add71278_mg72631__18)).hasParent());
        Assert.assertEquals("<br>one\n<br>", o_testDoesNotForceSelfClosingKnownTags_add71278__5);
        Assert.assertEquals("<br>one</br>", o_testDoesNotForceSelfClosingKnownTags_add71278__10);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105212_add107107() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Document o_handlesXmlDeclarationAsDeclaration_add103095_add105212__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107107__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107107__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107107__6)).getErrors());
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107107__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107107__6)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105212_add107116() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Document o_handlesXmlDeclarationAsDeclaration_add103095_add105212__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107116__10 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107116__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107116__10)).getErrors());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107116__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107116__10)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105212_add107041() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107041__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107041__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107041__2)).getErrors());
        Document o_handlesXmlDeclarationAsDeclaration_add103095_add105212__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107041__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105212_add107041__2)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105268() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105268__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105268__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105268__6)).getErrors());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105268__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105268__6)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105262_add113794() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113794__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113794__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113794__2)).getErrors());
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document o_handlesXmlDeclarationAsDeclaration_add103095_add105262__6 = Jsoup.parse(html, "", Parser.xmlParser());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113794__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113794__2)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103096() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Parser o_handlesXmlDeclarationAsDeclaration_add103096__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103096__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103096__2)).getErrors());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103096__6 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103096__6);
        String o_handlesXmlDeclarationAsDeclaration_add103096__8 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103096__8);
        String o_handlesXmlDeclarationAsDeclaration_add103096__10 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103096__10);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103096__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103096__2)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103096__6);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103096__8);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105220() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105220__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105220__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105220__2)).getErrors());
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105220__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105220__2)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105262_add113811() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113811__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113811__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113811__6)).getErrors());
        Document o_handlesXmlDeclarationAsDeclaration_add103095_add105262__6 = Jsoup.parse(html, "", Parser.xmlParser());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113811__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113811__6)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void handlesXmlDeclarationAsDeclaration_add103095_add105262_add113882() throws Exception {
        String html = "<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->";
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Document o_handlesXmlDeclarationAsDeclaration_add103095__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document o_handlesXmlDeclarationAsDeclaration_add103095_add105262__6 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113882__10 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113882__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113882__10)).getErrors());
        Document doc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_handlesXmlDeclarationAsDeclaration_add103095__7 = StringUtil.normaliseWhitespace(doc.outerHtml());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        String o_handlesXmlDeclarationAsDeclaration_add103095__9 = doc.childNode(0).nodeName();
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
        String o_handlesXmlDeclarationAsDeclaration_add103095__11 = doc.childNode(2).nodeName();
        Assert.assertEquals("#comment", o_handlesXmlDeclarationAsDeclaration_add103095__11);
        Assert.assertEquals("<?xml encoding=\'UTF-8\' ?><body>One</body><!-- comment -->", html);
        Assert.assertFalse(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113882__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesXmlDeclarationAsDeclaration_add103095_add105262_add113882__10)).getErrors());
        Assert.assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", o_handlesXmlDeclarationAsDeclaration_add103095__7);
        Assert.assertEquals("#declaration", o_handlesXmlDeclarationAsDeclaration_add103095__9);
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_mg304527_add304664() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_mg304527_add304664__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304527_add304664__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304527_add304664__1)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        boolean o_xmlParseDefaultsToHtmlOutputSyntax_mg304527__6 = doc.updateMetaCharsetElement();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304527_add304664__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304527_add304664__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211() throws Exception {
        String __DSPOT_attributeValue_175537 = "XfmAi@Enl<NMmHCA`&9N";
        String __DSPOT_attributeKey_175536 = "#>C?at:`4f%45i}IxGgR";
        String __DSPOT_tagName_175417 = "G466rl9lyk<xUNpg@GKC";
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        Element o_xmlParseDefaultsToHtmlOutputSyntax_mg304515__7 = doc.createElement(__DSPOT_tagName_175417);
        Element o_xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211__12 = o_xmlParseDefaultsToHtmlOutputSyntax_mg304515__7.attr(__DSPOT_attributeKey_175536, __DSPOT_attributeValue_175537);
        Assert.assertFalse(((Element) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211__12)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211__12)).hasText());
        Assert.assertFalse(((Element) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211__12)).isBlock());
        Assert.assertEquals("<G466rl9lyk<xUNpg@GKC #>C?at:`4f%45i}IxGgR=\"XfmAi@Enl<NMmHCA`&amp;9N\"></G466rl9lyk<xUNpg@GKC>", ((Element) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211__12)).toString());
        Assert.assertFalse(((Element) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304515_mg305211__12)).hasParent());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_mg304525_add304779() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_mg304525_add304779__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304525_add304779__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304525_add304779__1)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        String o_xmlParseDefaultsToHtmlOutputSyntax_mg304525__6 = doc.title();
        Assert.assertEquals("", o_xmlParseDefaultsToHtmlOutputSyntax_mg304525__6);
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304525_add304779__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304525_add304779__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_add304509() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_add304509__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304509__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304509__1)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304509__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304509__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_add304508_add305042() throws Exception {
        Document o_xmlParseDefaultsToHtmlOutputSyntax_add304508__1 = Jsoup.parse("x", "", Parser.xmlParser());
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add305042__5 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add305042__5)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add305042__5)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add305042__5)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add305042__5)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_add304508_add304995() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add304995__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add304995__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add304995__1)).getErrors());
        Document o_xmlParseDefaultsToHtmlOutputSyntax_add304508__1 = Jsoup.parse("x", "", Parser.xmlParser());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add304995__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_add304508_add304995__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_mg304517_add304737() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_mg304517_add304737__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304517_add304737__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304517_add304737__1)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        String o_xmlParseDefaultsToHtmlOutputSyntax_mg304517__6 = doc.location();
        Assert.assertEquals("", o_xmlParseDefaultsToHtmlOutputSyntax_mg304517__6);
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304517_add304737__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304517_add304737__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_mg304520_add304700() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_mg304520_add304700__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304520_add304700__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304520_add304700__1)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        String o_xmlParseDefaultsToHtmlOutputSyntax_mg304520__6 = doc.outerHtml();
        Assert.assertEquals("x", o_xmlParseDefaultsToHtmlOutputSyntax_mg304520__6);
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304520_add304700__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304520_add304700__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void xmlParseDefaultsToHtmlOutputSyntax_mg304518_add305012() throws Exception {
        Parser o_xmlParseDefaultsToHtmlOutputSyntax_mg304518_add305012__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304518_add305012__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304518_add305012__1)).getErrors());
        Document doc = Jsoup.parse("x", "", Parser.xmlParser());
        doc.outputSettings().syntax();
        String o_xmlParseDefaultsToHtmlOutputSyntax_mg304518__6 = doc.nodeName();
        Assert.assertEquals("#document", o_xmlParseDefaultsToHtmlOutputSyntax_mg304518__6);
        Assert.assertFalse(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304518_add305012__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_xmlParseDefaultsToHtmlOutputSyntax_mg304518_add305012__1)).getErrors());
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_add455025_mg463843() throws Exception {
        String __DSPOT_attributeValue_233453 = "b{ njOXZi69:QSgKbV2L";
        String __DSPOT_attributeKey_233452 = "1Z(<2!*<tKCpv}(g={v ";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document o_testDoesHandleEOFInTag_mg454129_add455025__3 = Jsoup.parse(html, "", Parser.xmlParser());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_add455025_mg463843__18 = o_testDoesHandleEOFInTag_mg454129__7.attr(__DSPOT_attributeKey_233452, __DSPOT_attributeValue_233453);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463843__18)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463843__18)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463843__18)).isBlock());
        Assert.assertEquals("<-Ru5N/Y[.o{qfLW[D7XT 1Z(<2!*<tKCpv}(g={v =\"b{ njOXZi69:QSgKbV2L\"></-Ru5N/Y[.o{qfLW[D7XT>", ((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463843__18)).toString());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463843__18)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454136_add455224() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_230364 = new Document.OutputSettings();
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Parser o_testDoesHandleEOFInTag_mg454136_add455224__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455224__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455224__4)).getErrors());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454136__7 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
        Document o_testDoesHandleEOFInTag_mg454136__8 = xmlDoc.outputSettings(__DSPOT_outputSettings_230364);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455224__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455224__4)).getErrors());
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_mg455204() throws Exception {
        String __DSPOT_attributeValue_230566 = "<<f&LBBQNAM/<!#}lR0P";
        String __DSPOT_attributeKey_230565 = "vXUHIV[vFMAVIUx7hm|J";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_mg455204__14 = o_testDoesHandleEOFInTag_mg454129__7.attr(__DSPOT_attributeKey_230565, __DSPOT_attributeValue_230566);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455204__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455204__14)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455204__14)).isBlock());
        Assert.assertEquals("<-Ru5N/Y[.o{qfLW[D7XT vXUHIV[vFMAVIUx7hm|J=\"<<f&amp;LBBQNAM/<!#}lR0P\"></-Ru5N/Y[.o{qfLW[D7XT>", ((Element) (o_testDoesHandleEOFInTag_mg454129_mg455204__14)).toString());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455204__14)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_add455025_mg464482() throws Exception {
        String __DSPOT_tagName_233806 = "c;]WCT?s^$/Qe@<7H1BM";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document o_testDoesHandleEOFInTag_mg454129_add455025__3 = Jsoup.parse(html, "", Parser.xmlParser());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_add455025_mg464482__17 = o_testDoesHandleEOFInTag_mg454129__7.prependElement(__DSPOT_tagName_233806);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464482__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464482__17)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464482__17)).isBlock());
        Assert.assertEquals("<c;]WCT?s^$/Qe@<7H1BM></c;]WCT?s^$/Qe@<7H1BM>", ((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464482__17)).toString());
        Assert.assertTrue(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464482__17)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_add455025_mg463793() throws Exception {
        String __DSPOT_tagName_233418 = "7ab/)$u7T(o#?e(=oZVq";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document o_testDoesHandleEOFInTag_mg454129_add455025__3 = Jsoup.parse(html, "", Parser.xmlParser());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_add455025_mg463793__17 = o_testDoesHandleEOFInTag_mg454129__7.appendElement(__DSPOT_tagName_233418);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463793__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463793__17)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463793__17)).isBlock());
        Assert.assertEquals("<7ab/)$u7T(o#?e(=oZVq></7ab/)$u7T(o#?e(=oZVq>", ((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463793__17)).toString());
        Assert.assertTrue(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg463793__17)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454136_add455221_add468737() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_230364 = new Document.OutputSettings();
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Parser o_testDoesHandleEOFInTag_mg454136_add455221_add468737__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468737__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468737__4)).getErrors());
        Document o_testDoesHandleEOFInTag_mg454136_add455221__4 = Jsoup.parse(html, "", Parser.xmlParser());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454136__7 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
        Document o_testDoesHandleEOFInTag_mg454136__8 = xmlDoc.outputSettings(__DSPOT_outputSettings_230364);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468737__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468737__4)).getErrors());
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_mg455182() throws Exception {
        String __DSPOT_tagName_230555 = "xX`F[Q,[9WD?Xy:r#J^K";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_mg455182__13 = o_testDoesHandleEOFInTag_mg454129__7.appendElement(__DSPOT_tagName_230555);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455182__13)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455182__13)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455182__13)).isBlock());
        Assert.assertEquals("<xX`F[Q,[9WD?Xy:r#J^K></xX`F[Q,[9WD?Xy:r#J^K>", ((Element) (o_testDoesHandleEOFInTag_mg454129_mg455182__13)).toString());
        Assert.assertTrue(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455182__13)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_mg455520() throws Exception {
        String __DSPOT_tagName_230669 = "YY2lkH00kZ*on+t[<l,w";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_mg455520__13 = o_testDoesHandleEOFInTag_mg454129__7.prependElement(__DSPOT_tagName_230669);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455520__13)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455520__13)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455520__13)).isBlock());
        Assert.assertEquals("<YY2lkH00kZ*on+t[<l,w></YY2lkH00kZ*on+t[<l,w>", ((Element) (o_testDoesHandleEOFInTag_mg454129_mg455520__13)).toString());
        Assert.assertTrue(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455520__13)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_mg455578() throws Exception {
        String __DSPOT_tagName_230696 = "`>l.KvPL&1.=fNdk[[Lm";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_mg455578__13 = o_testDoesHandleEOFInTag_mg454129__7.tagName(__DSPOT_tagName_230696);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455578__13)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455578__13)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455578__13)).isBlock());
        Assert.assertEquals("<`>l.KvPL&1.=fNdk[[Lm></`>l.KvPL&1.=fNdk[[Lm>", ((Element) (o_testDoesHandleEOFInTag_mg454129_mg455578__13)).toString());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_mg455578__13)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_add454123_add454701() throws Exception {
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Parser o_testDoesHandleEOFInTag_add454123_add454701__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_add454123_add454701__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_add454123_add454701__2)).getErrors());
        Document o_testDoesHandleEOFInTag_add454123__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_add454123__7 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_add454123__7);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_add454123_add454701__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_add454123_add454701__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454136_add455230_add471440() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_230364 = new Document.OutputSettings();
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Parser o_testDoesHandleEOFInTag_mg454136_add455230_add471440__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455230_add471440__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455230_add471440__4)).getErrors());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454136__7 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
        Document o_testDoesHandleEOFInTag_mg454136_add455230__10 = xmlDoc.outputSettings(__DSPOT_outputSettings_230364);
        Document o_testDoesHandleEOFInTag_mg454136__8 = xmlDoc.outputSettings(__DSPOT_outputSettings_230364);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455230_add471440__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455230_add471440__4)).getErrors());
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454129_add455025_mg464593() throws Exception {
        String __DSPOT_tagName_233874 = "}T%.v[Ot2jg&l|s]MIbc";
        String __DSPOT_tagName_230363 = "-Ru5N/Y[.o{qfLW[D7XT";
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document o_testDoesHandleEOFInTag_mg454129_add455025__3 = Jsoup.parse(html, "", Parser.xmlParser());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454129__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
        Element o_testDoesHandleEOFInTag_mg454129__7 = xmlDoc.createElement(__DSPOT_tagName_230363);
        Element o_testDoesHandleEOFInTag_mg454129_add455025_mg464593__17 = o_testDoesHandleEOFInTag_mg454129__7.tagName(__DSPOT_tagName_233874);
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464593__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464593__17)).hasText());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464593__17)).isBlock());
        Assert.assertEquals("<}T%.v[Ot2jg&l|s]MIbc></}T%.v[Ot2jg&l|s]MIbc>", ((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464593__17)).toString());
        Assert.assertFalse(((Element) (o_testDoesHandleEOFInTag_mg454129_add455025_mg464593__17)).hasParent());
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454129__6);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_add454123_add454748() throws Exception {
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document o_testDoesHandleEOFInTag_add454123__2 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_testDoesHandleEOFInTag_add454123_add454748__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_add454123_add454748__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_add454123_add454748__6)).getErrors());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_add454123__7 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_add454123__7);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_add454123_add454748__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_add454123_add454748__6)).getErrors());
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_mg454136_add455221_add468800() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_230364 = new Document.OutputSettings();
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Document o_testDoesHandleEOFInTag_mg454136_add455221__4 = Jsoup.parse(html, "", Parser.xmlParser());
        Parser o_testDoesHandleEOFInTag_mg454136_add455221_add468800__8 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468800__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468800__8)).getErrors());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_mg454136__7 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
        Document o_testDoesHandleEOFInTag_mg454136__8 = xmlDoc.outputSettings(__DSPOT_outputSettings_230364);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468800__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_mg454136_add455221_add468800__8)).getErrors());
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_mg454136__7);
    }

    @Test(timeout = 10000)
    public void testDoesHandleEOFInTag_add454124() throws Exception {
        String html = "<img src=asdf onerror=\"alert(1)\" x=";
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Parser o_testDoesHandleEOFInTag_add454124__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_add454124__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_add454124__2)).getErrors());
        Document xmlDoc = Jsoup.parse(html, "", Parser.xmlParser());
        String o_testDoesHandleEOFInTag_add454124__6 = xmlDoc.html();
        Assert.assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", o_testDoesHandleEOFInTag_add454124__6);
        Assert.assertEquals("<img src=asdf onerror=\"alert(1)\" x=", html);
        Assert.assertFalse(((Parser) (o_testDoesHandleEOFInTag_add454124__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDoesHandleEOFInTag_add454124__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_literalMutationString196905_failAssert415() throws IOException, Exception, URISyntaxException {
        try {
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
            doc.charset().name();
            TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testDetectCharsetEncodingDeclaration_literalMutationString196905 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198085() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198085__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getRef());
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198085__1)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getPort())));
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075__1)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add204924() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getRef());
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204924__1)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196920() throws IOException, Exception, URISyntaxException {
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testDetectCharsetEncodingDeclaration_add196920__7 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196920__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196920__7)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196920__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196920__11);
        String o_testDetectCharsetEncodingDeclaration_add196920__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196920__13);
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196920__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196920__7)).getErrors());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196920__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add204911() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getPort())));
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add204911__1)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawUserInfo());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawPath());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawFragment());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawUserInfo());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawPath());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getRawFragment());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917__1)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918__1)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add205159() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205159__15 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205159__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205159__15)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205159__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205159__15)).getErrors());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add205144() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205144__9)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add205134() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205134__9)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclarationnull196944_failAssert425_literalMutationString198663_failAssert456() throws IOException, Exception, URISyntaxException {
        try {
            try {
                File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
                InputStream inStream = new FileInputStream(xmlFile);
                Document doc = Jsoup.parse(inStream, null, null, Parser.xmlParser());
                doc.charset().name();
                TextUtil.stripNewlines(doc.html());
                org.junit.Assert.fail("testDetectCharsetEncodingDeclarationnull196944 should have thrown IllegalArgumentException");
            } catch (IllegalArgumentException expected) {
            }
            org.junit.Assert.fail("testDetectCharsetEncodingDeclarationnull196944_failAssert425_literalMutationString198663 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected_1) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected_1.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206363() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206363__15 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206363__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206363__15)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206363__15)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206363__15)).getErrors());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206335() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206335__9)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206342() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206342__9)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_literalMutationString197789_failAssert451() throws IOException, Exception, URISyntaxException {
        try {
            URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
            String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
            String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testDetectCharsetEncodingDeclaration_add196918_literalMutationString197789 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add205120() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getRef());
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205120__5)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198075_add205109() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getPort())));
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198075_add205109__5)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206153() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getRef());
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206153__5)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206149() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getPort())));
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206149__5)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206145() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getPort())));
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206145__1)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252_add206146() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getRef());
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198252_add206146__1)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198051() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URL o_testDetectCharsetEncodingDeclaration_add196918_add198051__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198051__4)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198058() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testDetectCharsetEncodingDeclaration_add196918_add198058__10 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198058__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198058__10)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198058__10)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198058__10)).getErrors());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046_add205176() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getRef());
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205176__1)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198290() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testDetectCharsetEncodingDeclaration_add196917_add198290__11 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198290__11)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198290__11)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198290__11)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196917_add198290__11)).getErrors());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046_add205193() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URL o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getRef());
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205193__4)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046_add205185() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getPort())));
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205185__4)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198267() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URL o_testDetectCharsetEncodingDeclaration_add196917_add198267__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196917_add198267__5)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_add198252() throws IOException, Exception, URISyntaxException {
        URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196917_add198252__5 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
        String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196917__14);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196917_add198252__5)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196917__12);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046__4)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046_add205431() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Parser o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205431__14 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205431__14)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205431__14)).getErrors());
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertFalse(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205431__14)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205431__14)).getErrors());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046_add205416() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URL o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getRef());
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205416__8)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196917_literalMutationString197854_failAssert439() throws IOException, Exception, URISyntaxException {
        try {
            URI o_testDetectCharsetEncodingDeclaration_add196917__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
            File xmlFile = new File(XmlTreeBuilder.class.getResource("").toURI());
            InputStream inStream = new FileInputStream(xmlFile);
            Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
            String o_testDetectCharsetEncodingDeclaration_add196917__12 = doc.charset().name();
            String o_testDetectCharsetEncodingDeclaration_add196917__14 = TextUtil.stripNewlines(doc.html());
            org.junit.Assert.fail("testDetectCharsetEncodingDeclaration_add196917_literalMutationString197854 should have thrown FileNotFoundException");
        } catch (FileNotFoundException expected) {
            Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/org/jsoup/parser (Is a directory)", expected.getMessage());
        }
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add198046_add205408() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046__4 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        URI o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI();
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getPort())));
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawSchemeSpecificPart());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getSchemeSpecificPart());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawUserInfo());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawQuery());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getRawPath());
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).toString());
        Assert.assertEquals(1475313060, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).hashCode())));
        Assert.assertTrue(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).isAbsolute());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getPath());
        Assert.assertFalse(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).isOpaque());
        Assert.assertEquals("file", ((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getScheme());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getAuthority());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getFragment());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getQuery());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getHost());
        Assert.assertNull(((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URI) (o_testDetectCharsetEncodingDeclaration_add196918_add198046_add205408__8)).getPort())));
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testDetectCharsetEncodingDeclaration_add196918_add197978() throws IOException, Exception, URISyntaxException {
        URL o_testDetectCharsetEncodingDeclaration_add196918_add197978__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getRef());
        URL o_testDetectCharsetEncodingDeclaration_add196918__1 = XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml");
        File xmlFile = new File(XmlTreeBuilder.class.getResource("/htmltests/xml-charset.xml").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, "http://example.com/", Parser.xmlParser());
        String o_testDetectCharsetEncodingDeclaration_add196918__11 = doc.charset().name();
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
        String o_testDetectCharsetEncodingDeclaration_add196918__13 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>", o_testDetectCharsetEncodingDeclaration_add196918__13);
        Assert.assertEquals("file:/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).toString());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getPath());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getAuthority());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getQuery());
        Assert.assertEquals("file", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getProtocol());
        Assert.assertEquals("/tmp/icst-2019/september-2018/dataset/jsoup_parent/target/test-classes/htmltests/xml-charset.xml", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getFile());
        Assert.assertEquals("", ((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getHost());
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getUserInfo());
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getPort())));
        Assert.assertEquals(-1, ((int) (((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getDefaultPort())));
        Assert.assertNull(((URL) (o_testDetectCharsetEncodingDeclaration_add196918_add197978__1)).getRef());
        Assert.assertEquals("ISO-8859-1", o_testDetectCharsetEncodingDeclaration_add196918__11);
    }

    @Test(timeout = 10000)
    public void testParseDeclarationAttributes_add232928_add233629() throws Exception {
        String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Document o_testParseDeclarationAttributes_add232928__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_testParseDeclarationAttributes_add232928_add233629__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_add232928_add233629__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_add232928_add233629__6)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        XmlDeclaration decl = ((XmlDeclaration) (doc.childNode(0)));
        String o_testParseDeclarationAttributes_add232928__9 = decl.attr("version");
        Assert.assertEquals("1", o_testParseDeclarationAttributes_add232928__9);
        String o_testParseDeclarationAttributes_add232928__10 = decl.attr("encoding");
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_add232928__10);
        String o_testParseDeclarationAttributes_add232928__11 = decl.attr("something");
        Assert.assertEquals("else", o_testParseDeclarationAttributes_add232928__11);
        decl.getWholeDeclaration();
        String o_testParseDeclarationAttributes_add232928__13 = decl.outerHtml();
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_add232928__13);
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_add232928_add233629__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_add232928_add233629__6)).getErrors());
        Assert.assertEquals("1", o_testParseDeclarationAttributes_add232928__9);
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_add232928__10);
        Assert.assertEquals("else", o_testParseDeclarationAttributes_add232928__11);
    }

    @Test(timeout = 10000)
    public void testParseDeclarationAttributes_mg232939_mg234768() throws Exception {
        String __DSPOT_attributeValue_156729 = "#&f>Ji]A]IS]gij3@ {C";
        String __DSPOT_attributeKey_156728 = "6^}5OQ:-e)B@RdUnd:.]";
        String __DSPOT_tagName_156538 = "cHBPwL;22O?|Ty/lw_<^";
        String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        XmlDeclaration decl = ((XmlDeclaration) (doc.childNode(0)));
        String o_testParseDeclarationAttributes_mg232939__8 = decl.attr("version");
        Assert.assertEquals("1", o_testParseDeclarationAttributes_mg232939__8);
        String o_testParseDeclarationAttributes_mg232939__9 = decl.attr("encoding");
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_mg232939__9);
        String o_testParseDeclarationAttributes_mg232939__10 = decl.attr("something");
        Assert.assertEquals("else", o_testParseDeclarationAttributes_mg232939__10);
        decl.getWholeDeclaration();
        String o_testParseDeclarationAttributes_mg232939__12 = decl.outerHtml();
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_mg232939__12);
        Element o_testParseDeclarationAttributes_mg232939__13 = doc.createElement(__DSPOT_tagName_156538);
        Element o_testParseDeclarationAttributes_mg232939_mg234768__26 = o_testParseDeclarationAttributes_mg232939__13.attr(__DSPOT_attributeKey_156728, __DSPOT_attributeValue_156729);
        Assert.assertFalse(((Element) (o_testParseDeclarationAttributes_mg232939_mg234768__26)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testParseDeclarationAttributes_mg232939_mg234768__26)).hasText());
        Assert.assertFalse(((Element) (o_testParseDeclarationAttributes_mg232939_mg234768__26)).isBlock());
        Assert.assertEquals("<cHBPwL;22O?|Ty/lw_<^ 6^}5OQ:-e)B@RdUnd:.]=\"#&amp;f>Ji]A]IS]gij3@ {C\"></cHBPwL;22O?|Ty/lw_<^>", ((Element) (o_testParseDeclarationAttributes_mg232939_mg234768__26)).toString());
        Assert.assertFalse(((Element) (o_testParseDeclarationAttributes_mg232939_mg234768__26)).hasParent());
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Assert.assertEquals("1", o_testParseDeclarationAttributes_mg232939__8);
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_mg232939__9);
        Assert.assertEquals("else", o_testParseDeclarationAttributes_mg232939__10);
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_mg232939__12);
    }

    @Test(timeout = 10000)
    public void testParseDeclarationAttributes_add232929() throws Exception {
        String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Parser o_testParseDeclarationAttributes_add232929__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_add232929__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_add232929__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        XmlDeclaration decl = ((XmlDeclaration) (doc.childNode(0)));
        String o_testParseDeclarationAttributes_add232929__8 = decl.attr("version");
        Assert.assertEquals("1", o_testParseDeclarationAttributes_add232929__8);
        String o_testParseDeclarationAttributes_add232929__9 = decl.attr("encoding");
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_add232929__9);
        String o_testParseDeclarationAttributes_add232929__10 = decl.attr("something");
        Assert.assertEquals("else", o_testParseDeclarationAttributes_add232929__10);
        decl.getWholeDeclaration();
        String o_testParseDeclarationAttributes_add232929__12 = decl.outerHtml();
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_add232929__12);
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_add232929__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_add232929__2)).getErrors());
        Assert.assertEquals("1", o_testParseDeclarationAttributes_add232929__8);
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_add232929__9);
        Assert.assertEquals("else", o_testParseDeclarationAttributes_add232929__10);
    }

    @Test(timeout = 10000)
    public void testParseDeclarationAttributes_add232928_add233591() throws Exception {
        String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Parser o_testParseDeclarationAttributes_add232928_add233591__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_add232928_add233591__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_add232928_add233591__2)).getErrors());
        Document o_testParseDeclarationAttributes_add232928__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        XmlDeclaration decl = ((XmlDeclaration) (doc.childNode(0)));
        String o_testParseDeclarationAttributes_add232928__9 = decl.attr("version");
        Assert.assertEquals("1", o_testParseDeclarationAttributes_add232928__9);
        String o_testParseDeclarationAttributes_add232928__10 = decl.attr("encoding");
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_add232928__10);
        String o_testParseDeclarationAttributes_add232928__11 = decl.attr("something");
        Assert.assertEquals("else", o_testParseDeclarationAttributes_add232928__11);
        decl.getWholeDeclaration();
        String o_testParseDeclarationAttributes_add232928__13 = decl.outerHtml();
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_add232928__13);
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_add232928_add233591__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_add232928_add233591__2)).getErrors());
        Assert.assertEquals("1", o_testParseDeclarationAttributes_add232928__9);
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_add232928__10);
        Assert.assertEquals("else", o_testParseDeclarationAttributes_add232928__11);
    }

    @Test(timeout = 10000)
    public void testParseDeclarationAttributes_mg232946_add236626_add252386() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_156539 = new Document.OutputSettings();
        String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Document o_testParseDeclarationAttributes_mg232946_add236626__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_testParseDeclarationAttributes_mg232946_add236626_add252386__8 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252386__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252386__8)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        XmlDeclaration decl = ((XmlDeclaration) (doc.childNode(0)));
        String o_testParseDeclarationAttributes_mg232946__9 = decl.attr("version");
        Assert.assertEquals("1", o_testParseDeclarationAttributes_mg232946__9);
        String o_testParseDeclarationAttributes_mg232946__10 = decl.attr("encoding");
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_mg232946__10);
        String o_testParseDeclarationAttributes_mg232946__11 = decl.attr("something");
        Assert.assertEquals("else", o_testParseDeclarationAttributes_mg232946__11);
        decl.getWholeDeclaration();
        String o_testParseDeclarationAttributes_mg232946__13 = decl.outerHtml();
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_mg232946__13);
        Document o_testParseDeclarationAttributes_mg232946__14 = doc.outputSettings(__DSPOT_outputSettings_156539);
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252386__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252386__8)).getErrors());
        Assert.assertEquals("1", o_testParseDeclarationAttributes_mg232946__9);
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_mg232946__10);
        Assert.assertEquals("else", o_testParseDeclarationAttributes_mg232946__11);
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_mg232946__13);
    }

    @Test(timeout = 10000)
    public void testParseDeclarationAttributes_mg232946_add236626_add252320() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_156539 = new Document.OutputSettings();
        String xml = "<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>";
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Parser o_testParseDeclarationAttributes_mg232946_add236626_add252320__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252320__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252320__4)).getErrors());
        Document o_testParseDeclarationAttributes_mg232946_add236626__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        XmlDeclaration decl = ((XmlDeclaration) (doc.childNode(0)));
        String o_testParseDeclarationAttributes_mg232946__9 = decl.attr("version");
        Assert.assertEquals("1", o_testParseDeclarationAttributes_mg232946__9);
        String o_testParseDeclarationAttributes_mg232946__10 = decl.attr("encoding");
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_mg232946__10);
        String o_testParseDeclarationAttributes_mg232946__11 = decl.attr("something");
        Assert.assertEquals("else", o_testParseDeclarationAttributes_mg232946__11);
        decl.getWholeDeclaration();
        String o_testParseDeclarationAttributes_mg232946__13 = decl.outerHtml();
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_mg232946__13);
        Document o_testParseDeclarationAttributes_mg232946__14 = doc.outputSettings(__DSPOT_outputSettings_156539);
        Assert.assertEquals("<?xml version=\'1\' encoding=\'UTF-8\' something=\'else\'?><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252320__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_testParseDeclarationAttributes_mg232946_add236626_add252320__4)).getErrors());
        Assert.assertEquals("1", o_testParseDeclarationAttributes_mg232946__9);
        Assert.assertEquals("UTF-8", o_testParseDeclarationAttributes_mg232946__10);
        Assert.assertEquals("else", o_testParseDeclarationAttributes_mg232946__11);
        Assert.assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_testParseDeclarationAttributes_mg232946__13);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_add11() throws Exception {
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Parser o_caseSensitiveDeclaration_add11__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_add11__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_add11__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_add11__6 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_add11__6);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_add11__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_add11__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg16_mg984() throws Exception {
        String __DSPOT_tagName_84801 = "W@Uhl;Gxfe_H(p]8y]Jd";
        String __DSPOT_tagName_84644 = "K3Jy):7q[hduc}o(]d=)";
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg16__6 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
        Element o_caseSensitiveDeclaration_mg16__7 = doc.createElement(__DSPOT_tagName_84644);
        Element o_caseSensitiveDeclaration_mg16_mg984__13 = o_caseSensitiveDeclaration_mg16__7.appendElement(__DSPOT_tagName_84801);
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg984__13)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg984__13)).hasText());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg984__13)).isBlock());
        Assert.assertEquals("<W@Uhl;Gxfe_H(p]8y]Jd></W@Uhl;Gxfe_H(p]8y]Jd>", ((Element) (o_caseSensitiveDeclaration_mg16_mg984__13)).toString());
        Assert.assertTrue(((Element) (o_caseSensitiveDeclaration_mg16_mg984__13)).hasParent());
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg23_add250_add20839() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_84645 = new Document.OutputSettings();
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Document o_caseSensitiveDeclaration_mg23_add250__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_caseSensitiveDeclaration_mg23_add250_add20839__8 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20839__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20839__8)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg23__7 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
        Document o_caseSensitiveDeclaration_mg23__8 = doc.outputSettings(__DSPOT_outputSettings_84645);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20839__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20839__8)).getErrors());
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_add10_add468() throws Exception {
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Document o_caseSensitiveDeclaration_add10__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_caseSensitiveDeclaration_add10_add468__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_add10_add468__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_add10_add468__6)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_add10__7 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_add10__7);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_add10_add468__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_add10_add468__6)).getErrors());
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg16_mg1455() throws Exception {
        String __DSPOT_tagName_84968 = "%lVM {ht6Jt4j<58t&x+";
        String __DSPOT_tagName_84644 = "K3Jy):7q[hduc}o(]d=)";
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg16__6 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
        Element o_caseSensitiveDeclaration_mg16__7 = doc.createElement(__DSPOT_tagName_84644);
        Element o_caseSensitiveDeclaration_mg16_mg1455__13 = o_caseSensitiveDeclaration_mg16__7.prependElement(__DSPOT_tagName_84968);
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1455__13)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1455__13)).hasText());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1455__13)).isBlock());
        Assert.assertEquals("<%lVM {ht6Jt4j<58t&x+></%lVM {ht6Jt4j<58t&x+>", ((Element) (o_caseSensitiveDeclaration_mg16_mg1455__13)).toString());
        Assert.assertTrue(((Element) (o_caseSensitiveDeclaration_mg16_mg1455__13)).hasParent());
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg23_add267_add21381() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_84645 = new Document.OutputSettings();
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Parser o_caseSensitiveDeclaration_mg23_add267_add21381__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add267_add21381__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add267_add21381__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg23__7 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
        Document o_caseSensitiveDeclaration_mg23_add267__10 = doc.outputSettings(__DSPOT_outputSettings_84645);
        Document o_caseSensitiveDeclaration_mg23__8 = doc.outputSettings(__DSPOT_outputSettings_84645);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add267_add21381__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add267_add21381__4)).getErrors());
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg16_mg1018() throws Exception {
        String __DSPOT_attributeValue_84823 = "(t8V5MfHAbEcoBM^|qds";
        String __DSPOT_attributeKey_84822 = "BdY1!d#jo-6pl+FC6Wk&";
        String __DSPOT_tagName_84644 = "K3Jy):7q[hduc}o(]d=)";
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg16__6 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
        Element o_caseSensitiveDeclaration_mg16__7 = doc.createElement(__DSPOT_tagName_84644);
        Element o_caseSensitiveDeclaration_mg16_mg1018__14 = o_caseSensitiveDeclaration_mg16__7.attr(__DSPOT_attributeKey_84822, __DSPOT_attributeValue_84823);
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1018__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1018__14)).hasText());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1018__14)).isBlock());
        Assert.assertEquals("<K3Jy):7q[hduc}o(]d=) BdY1!d#jo-6pl+FC6Wk&=\"(t8V5MfHAbEcoBM^|qds\"></K3Jy):7q[hduc}o(]d=)>", ((Element) (o_caseSensitiveDeclaration_mg16_mg1018__14)).toString());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1018__14)).hasParent());
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg16_mg1498() throws Exception {
        String __DSPOT_tagName_85002 = "$Jzga,M7b!!)#1)&%HW*";
        String __DSPOT_tagName_84644 = "K3Jy):7q[hduc}o(]d=)";
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg16__6 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
        Element o_caseSensitiveDeclaration_mg16__7 = doc.createElement(__DSPOT_tagName_84644);
        Element o_caseSensitiveDeclaration_mg16_mg1498__13 = o_caseSensitiveDeclaration_mg16__7.tagName(__DSPOT_tagName_85002);
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1498__13)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1498__13)).hasText());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1498__13)).isBlock());
        Assert.assertEquals("<$Jzga,M7b!!)#1)&%HW*></$Jzga,M7b!!)#1)&%HW*>", ((Element) (o_caseSensitiveDeclaration_mg16_mg1498__13)).toString());
        Assert.assertFalse(((Element) (o_caseSensitiveDeclaration_mg16_mg1498__13)).hasParent());
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg16__6);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg23_add258() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_84645 = new Document.OutputSettings();
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Parser o_caseSensitiveDeclaration_mg23_add258__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add258__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add258__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg23__7 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
        Document o_caseSensitiveDeclaration_mg23__8 = doc.outputSettings(__DSPOT_outputSettings_84645);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add258__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add258__4)).getErrors());
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_add10_add408() throws Exception {
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Parser o_caseSensitiveDeclaration_add10_add408__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_add10_add408__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_add10_add408__2)).getErrors());
        Document o_caseSensitiveDeclaration_add10__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_add10__7 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_add10__7);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_add10_add408__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_add10_add408__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void caseSensitiveDeclaration_mg23_add250_add20791() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_84645 = new Document.OutputSettings();
        String xml = "<?XML version='1' encoding='UTF-8' something='else'?>";
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Parser o_caseSensitiveDeclaration_mg23_add250_add20791__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20791__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20791__4)).getErrors());
        Document o_caseSensitiveDeclaration_mg23_add250__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_caseSensitiveDeclaration_mg23__7 = doc.outerHtml();
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
        Document o_caseSensitiveDeclaration_mg23__8 = doc.outputSettings(__DSPOT_outputSettings_84645);
        Assert.assertEquals("<?XML version=\'1\' encoding=\'UTF-8\' something=\'else\'?>", xml);
        Assert.assertFalse(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20791__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_caseSensitiveDeclaration_mg23_add250_add20791__4)).getErrors());
        Assert.assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", o_caseSensitiveDeclaration_mg23__7);
    }

    @Test(timeout = 10000)
    public void testCreatesValidProlog_mg118317_mg119945() throws Exception {
        String __DSPOT_tagName_123416 = "LRBoz[y.#Eu*{)`>kag9";
        String __DSPOT_text_123206 = "Fg{@%{Y:,xa_E%0cyH]>";
        Document document = Document.createShell("");
        document.outputSettings().syntax(xml);
        document.charset(Charset.forName("utf-8"));
        String String_30 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + ((("<html>\n" + " <head></head>\n") + " <body></body>\n") + "</html>");
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", String_30);
        String o_testCreatesValidProlog_mg118317__9 = document.outerHtml();
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", o_testCreatesValidProlog_mg118317__9);
        Element o_testCreatesValidProlog_mg118317__10 = document.text(__DSPOT_text_123206);
        Element o_testCreatesValidProlog_mg118317_mg119945__16 = o_testCreatesValidProlog_mg118317__10.appendElement(__DSPOT_tagName_123416);
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118317_mg119945__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118317_mg119945__16)).hasText());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118317_mg119945__16)).isBlock());
        Assert.assertEquals("<LRBoz[y.#Eu*{)`>kag9></LRBoz[y.#Eu*{)`>kag9>", ((Element) (o_testCreatesValidProlog_mg118317_mg119945__16)).toString());
        Assert.assertTrue(((Element) (o_testCreatesValidProlog_mg118317_mg119945__16)).hasParent());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", String_30);
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", o_testCreatesValidProlog_mg118317__9);
    }

    @Test(timeout = 10000)
    public void testCreatesValidProlog_mg118308_mg119179() throws Exception {
        String __DSPOT_attributeValue_123294 = "L=Knn|[Ko Khz|U:]Gy2";
        String __DSPOT_attributeKey_123293 = "vEP]bW0?mJ[C6[w{HS}Q";
        String __DSPOT_tagName_123204 = "fK7_HH[-;&$rKQD=.RVd";
        Document document = Document.createShell("");
        document.outputSettings().syntax(xml);
        document.charset(Charset.forName("utf-8"));
        String String_21 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + ((("<html>\n" + " <head></head>\n") + " <body></body>\n") + "</html>");
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", String_21);
        String o_testCreatesValidProlog_mg118308__9 = document.outerHtml();
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", o_testCreatesValidProlog_mg118308__9);
        Element o_testCreatesValidProlog_mg118308__10 = document.createElement(__DSPOT_tagName_123204);
        Element o_testCreatesValidProlog_mg118308_mg119179__17 = o_testCreatesValidProlog_mg118308__10.attr(__DSPOT_attributeKey_123293, __DSPOT_attributeValue_123294);
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118308_mg119179__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118308_mg119179__17)).hasText());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118308_mg119179__17)).isBlock());
        Assert.assertEquals("<fK7_HH[-;&$rKQD=.RVd vEP]bW0?mJ[C6[w{HS}Q=\"L=Knn|[Ko Khz|U:]Gy2\"></fK7_HH[-;&$rKQD=.RVd>", ((Element) (o_testCreatesValidProlog_mg118308_mg119179__17)).toString());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118308_mg119179__17)).hasParent());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", String_21);
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", o_testCreatesValidProlog_mg118308__9);
    }

    @Test(timeout = 10000)
    public void testCreatesValidProlog_mg118317_mg120121() throws Exception {
        String __DSPOT_tagName_123465 = "egIA:D2bAzL9.[Su_nWM";
        String __DSPOT_text_123206 = "Fg{@%{Y:,xa_E%0cyH]>";
        Document document = Document.createShell("");
        document.outputSettings().syntax(xml);
        document.charset(Charset.forName("utf-8"));
        String String_30 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + ((("<html>\n" + " <head></head>\n") + " <body></body>\n") + "</html>");
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", String_30);
        String o_testCreatesValidProlog_mg118317__9 = document.outerHtml();
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", o_testCreatesValidProlog_mg118317__9);
        Element o_testCreatesValidProlog_mg118317__10 = document.text(__DSPOT_text_123206);
        Element o_testCreatesValidProlog_mg118317_mg120121__16 = o_testCreatesValidProlog_mg118317__10.prependElement(__DSPOT_tagName_123465);
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118317_mg120121__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118317_mg120121__16)).hasText());
        Assert.assertFalse(((Element) (o_testCreatesValidProlog_mg118317_mg120121__16)).isBlock());
        Assert.assertEquals("<egIA:D2bAzL9.[Su_nWM></egIA:D2bAzL9.[Su_nWM>", ((Element) (o_testCreatesValidProlog_mg118317_mg120121__16)).toString());
        Assert.assertTrue(((Element) (o_testCreatesValidProlog_mg118317_mg120121__16)).hasParent());
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", String_30);
        Assert.assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n <head></head>\n <body></body>\n</html>", o_testCreatesValidProlog_mg118317__9);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_add23771_add24790() throws Exception {
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Parser o_preservesCaseByDefault_add23771_add24790__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_add23771_add24790__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_add23771_add24790__2)).getErrors());
        Document o_preservesCaseByDefault_add23771__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_add23771__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_add23771__7);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_add23771_add24790__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_add23771_add24790__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23785_add24896_add26896() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_93381 = new Document.OutputSettings();
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Parser o_preservesCaseByDefault_mg23785_add24896_add26896__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26896__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26896__4)).getErrors());
        Document o_preservesCaseByDefault_mg23785_add24896__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23785__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
        Document o_preservesCaseByDefault_mg23785__9 = doc.outputSettings(__DSPOT_outputSettings_93381);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26896__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26896__4)).getErrors());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23778_mg25411() throws Exception {
        String __DSPOT_tagName_93782 = "sc-o$0ed2v@%j6KtI0a.";
        String __DSPOT_tagName_93380 = "]o;>*W2S8ZZQ2WdQ,_pI";
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23778__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23778__6);
        Element o_preservesCaseByDefault_mg23778__8 = doc.createElement(__DSPOT_tagName_93380);
        Element o_preservesCaseByDefault_mg23778_mg25411__14 = o_preservesCaseByDefault_mg23778__8.prependElement(__DSPOT_tagName_93782);
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25411__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25411__14)).hasText());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25411__14)).isBlock());
        Assert.assertEquals("<sc-o$0ed2v@%j6KtI0a.></sc-o$0ed2v@%j6KtI0a.>", ((Element) (o_preservesCaseByDefault_mg23778_mg25411__14)).toString());
        Assert.assertTrue(((Element) (o_preservesCaseByDefault_mg23778_mg25411__14)).hasParent());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23778__6);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23785_add24916_add33420() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_93381 = new Document.OutputSettings();
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Parser o_preservesCaseByDefault_mg23785_add24916_add33420__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24916_add33420__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24916_add33420__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23785__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
        Document o_preservesCaseByDefault_mg23785_add24916__11 = doc.outputSettings(__DSPOT_outputSettings_93381);
        Document o_preservesCaseByDefault_mg23785__9 = doc.outputSettings(__DSPOT_outputSettings_93381);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24916_add33420__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24916_add33420__4)).getErrors());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_add23772() throws Exception {
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Parser o_preservesCaseByDefault_add23772__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_add23772__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_add23772__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_add23772__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_add23772__6);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_add23772__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_add23772__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23785_add24896_add26976() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_93381 = new Document.OutputSettings();
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Document o_preservesCaseByDefault_mg23785_add24896__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_preservesCaseByDefault_mg23785_add24896_add26976__8 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26976__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26976__8)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23785__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
        Document o_preservesCaseByDefault_mg23785__9 = doc.outputSettings(__DSPOT_outputSettings_93381);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26976__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24896_add26976__8)).getErrors());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_add23771_add24844() throws Exception {
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Document o_preservesCaseByDefault_add23771__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_preservesCaseByDefault_add23771_add24844__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_add23771_add24844__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_add23771_add24844__6)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_add23771__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_add23771__7);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_add23771_add24844__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_add23771_add24844__6)).getErrors());
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23785_add24901() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_93381 = new Document.OutputSettings();
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Parser o_preservesCaseByDefault_mg23785_add24901__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24901__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24901__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23785__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
        Document o_preservesCaseByDefault_mg23785__9 = doc.outputSettings(__DSPOT_outputSettings_93381);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_preservesCaseByDefault_mg23785_add24901__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_preservesCaseByDefault_mg23785_add24901__4)).getErrors());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23785__7);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23778_mg25157() throws Exception {
        String __DSPOT_attributeValue_93636 = "|^@O=,#q)&zg 90%bI/2";
        String __DSPOT_attributeKey_93635 = "AQEj[>%1 0FSt{!XPH7y";
        String __DSPOT_tagName_93380 = "]o;>*W2S8ZZQ2WdQ,_pI";
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23778__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23778__6);
        Element o_preservesCaseByDefault_mg23778__8 = doc.createElement(__DSPOT_tagName_93380);
        Element o_preservesCaseByDefault_mg23778_mg25157__15 = o_preservesCaseByDefault_mg23778__8.attr(__DSPOT_attributeKey_93635, __DSPOT_attributeValue_93636);
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25157__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25157__15)).hasText());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25157__15)).isBlock());
        Assert.assertEquals("<]o;>*W2S8ZZQ2WdQ,_pI AQEj[>%1 0FSt{!XPH7y=\"|^@O=,#q)&amp;zg 90%bI/2\"></]o;>*W2S8ZZQ2WdQ,_pI>", ((Element) (o_preservesCaseByDefault_mg23778_mg25157__15)).toString());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25157__15)).hasParent());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23778__6);
    }

    @Test(timeout = 10000)
    public void preservesCaseByDefault_mg23778_mg25124() throws Exception {
        String __DSPOT_tagName_93626 = "{`7P/(bhmSVY[/gnI4zd";
        String __DSPOT_tagName_93380 = "]o;>*W2S8ZZQ2WdQ,_pI";
        String xml = "<CHECK>One</CHECK><TEST ID=1>Check</TEST>";
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_preservesCaseByDefault_mg23778__6 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23778__6);
        Element o_preservesCaseByDefault_mg23778__8 = doc.createElement(__DSPOT_tagName_93380);
        Element o_preservesCaseByDefault_mg23778_mg25124__14 = o_preservesCaseByDefault_mg23778__8.appendElement(__DSPOT_tagName_93626);
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25124__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25124__14)).hasText());
        Assert.assertFalse(((Element) (o_preservesCaseByDefault_mg23778_mg25124__14)).isBlock());
        Assert.assertEquals("<{`7P/(bhmSVY[/gnI4zd></{`7P/(bhmSVY[/gnI4zd>", ((Element) (o_preservesCaseByDefault_mg23778_mg25124__14)).toString());
        Assert.assertTrue(((Element) (o_preservesCaseByDefault_mg23778_mg25124__14)).hasParent());
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", o_preservesCaseByDefault_mg23778__6);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add208995_add221284() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208733_add208995_add221284__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221284__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221284__4)).getErrors());
        Document o_canNormalizeCase_mg208733_add208995__4 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221284__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221284__4)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add208995_add221280() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208733_add208995_add221280__4 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221280__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221280__4)).getErrors());
        Document o_canNormalizeCase_mg208733_add208995__4 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221280__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221280__4)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_add208718_add209927() throws Exception {
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_add208718__2 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Parser o_canNormalizeCase_add208718_add209927__7 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209927__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209927__7)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_add208718__9 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_add208718__9);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209927__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209927__7)).getErrors());
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_add208718_add209918() throws Exception {
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_add208718__2 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Parser o_canNormalizeCase_add208718_add209918__7 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209918__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209918__7)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_add208718__9 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_add208718__9);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209918__7)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209918__7)).getErrors());
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210193_add223926() throws Exception {
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208726_add210193__3 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Parser o_canNormalizeCase_mg208726_add210193_add223926__8 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208726_add210193_add223926__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208726_add210193_add223926__8)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208726_add210193_add223926__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208726_add210193_add223926__8)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_add208718_add209841() throws Exception {
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_add208718_add209841__2 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209841__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209841__2)).getErrors());
        Document o_canNormalizeCase_add208718__2 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_add208718__9 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_add208718__9);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209841__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209841__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_add208718_add209847() throws Exception {
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_add208718_add209847__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209847__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209847__2)).getErrors());
        Document o_canNormalizeCase_add208718__2 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_add208718__9 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_add208718__9);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208718_add209847__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208718_add209847__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_add208720() throws Exception {
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_add208720__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208720__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208720__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_add208720__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_add208720__7);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208720__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208720__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210193_mg224415() throws Exception {
        String __DSPOT_attributeValue_153645 = "@/dM^[!#5(e8MmDIv5Zg";
        String __DSPOT_attributeKey_153644 = "77O5F4d/eMPk3;d&zF)#";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208726_add210193__3 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_add210193_mg224415__21 = o_canNormalizeCase_mg208726__9.attr(__DSPOT_attributeKey_153644, __DSPOT_attributeValue_153645);
        Assert.assertEquals("<!^qhf8Q9z]9n?s#j*!J9 77O5F4d/eMPk3;d&zF)#=\"@/dM^[!#5(e8MmDIv5Zg\"></!^qhf8Q9z]9n?s#j*!J9>", ((Element) (o_canNormalizeCase_mg208726_add210193_mg224415__21)).toString());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224415__21)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224415__21)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224415__21)).isBlock());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224415__21)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_add208719() throws Exception {
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_add208719__2 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208719__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208719__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_add208719__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_add208719__8);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_add208719__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_add208719__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210200() throws Exception {
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208726_add210200__3 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208726_add210200__3)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208726_add210200__3)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208726_add210200__3)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208726_add210200__3)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210193_mg224362() throws Exception {
        String __DSPOT_tagName_153621 = "[7&fXa0@[>J-h[y|}X0!";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208726_add210193__3 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_add210193_mg224362__20 = o_canNormalizeCase_mg208726__9.appendElement(__DSPOT_tagName_153621);
        Assert.assertEquals("<[7&fXa0@[>J-h[y|}X0!></[7&fXa0@[>J-h[y|}X0!>", ((Element) (o_canNormalizeCase_mg208726_add210193_mg224362__20)).toString());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224362__20)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224362__20)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224362__20)).isBlock());
        Assert.assertTrue(((Element) (o_canNormalizeCase_mg208726_add210193_mg224362__20)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add208995_add221346() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208733_add208995__4 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Parser o_canNormalizeCase_mg208733_add208995_add221346__9 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221346__9)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221346__9)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221346__9)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221346__9)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add208995_add221341() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208733_add208995__4 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Parser o_canNormalizeCase_mg208733_add208995_add221341__9 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221341__9)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221341__9)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add208995_add221341__9)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add208995_add221341__9)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_mg210370() throws Exception {
        String __DSPOT_tagName_148338 = "o(O+.laNBS&||,E!n@Yn";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_mg210370__15 = o_canNormalizeCase_mg208726__9.appendElement(__DSPOT_tagName_148338);
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210370__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210370__15)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210370__15)).isBlock());
        Assert.assertEquals("<o(O+.laNBS&||,E!n@Yn></o(O+.laNBS&||,E!n@Yn>", ((Element) (o_canNormalizeCase_mg208726_mg210370__15)).toString());
        Assert.assertTrue(((Element) (o_canNormalizeCase_mg208726_mg210370__15)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_mg210387() throws Exception {
        String __DSPOT_attributeValue_148348 = "+mv)Nd@H#}8[Yp,+)N[=";
        String __DSPOT_attributeKey_148347 = ":#qGA4Bl:.QHpcU;Tl0n";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_mg210387__16 = o_canNormalizeCase_mg208726__9.attr(__DSPOT_attributeKey_148347, __DSPOT_attributeValue_148348);
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210387__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210387__16)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210387__16)).isBlock());
        Assert.assertEquals("<!^qhf8Q9z]9n?s#j*!J9 :#qGA4Bl:.QHpcU;Tl0n=\"+mv)Nd@H#}8[Yp,+)N[=\"></!^qhf8Q9z]9n?s#j*!J9>", ((Element) (o_canNormalizeCase_mg208726_mg210387__16)).toString());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210387__16)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add209001() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208733_add209001__4 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add209001__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add209001__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add209001__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add209001__4)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add209008() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208733_add209008__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add209008__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add209008__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add209008__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add209008__4)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210193_add223845() throws Exception {
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208726_add210193_add223845__3 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208726_add210193_add223845__3)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208726_add210193_add223845__3)).getErrors());
        Document o_canNormalizeCase_mg208726_add210193__3 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208726_add210193_add223845__3)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208726_add210193_add223845__3)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210193_mg225038() throws Exception {
        String __DSPOT_tagName_153982 = "QA|i9le[(O]6H (?PWw-";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208726_add210193__3 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_add210193_mg225038__20 = o_canNormalizeCase_mg208726__9.tagName(__DSPOT_tagName_153982);
        Assert.assertEquals("<QA|i9le[(O]6H (?PWw-></QA|i9le[(O]6H (?PWw->", ((Element) (o_canNormalizeCase_mg208726_add210193_mg225038__20)).toString());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg225038__20)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg225038__20)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg225038__20)).isBlock());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg225038__20)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_add210193_mg224921() throws Exception {
        String __DSPOT_tagName_153921 = "op]_Ls=k&(k&a4eM}P3P";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document o_canNormalizeCase_mg208726_add210193__3 = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_add210193_mg224921__20 = o_canNormalizeCase_mg208726__9.prependElement(__DSPOT_tagName_153921);
        Assert.assertEquals("<op]_Ls=k&(k&a4eM}P3P></op]_Ls=k&(k&a4eM}P3P>", ((Element) (o_canNormalizeCase_mg208726_add210193_mg224921__20)).toString());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224921__20)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224921__20)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_add210193_mg224921__20)).isBlock());
        Assert.assertTrue(((Element) (o_canNormalizeCase_mg208726_add210193_mg224921__20)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_mg210454() throws Exception {
        String __DSPOT_tagName_148388 = "r)0Q,(+.`m|PFS4=i!h+";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_mg210454__15 = o_canNormalizeCase_mg208726__9.prependElement(__DSPOT_tagName_148388);
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210454__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210454__15)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210454__15)).isBlock());
        Assert.assertEquals("<r)0Q,(+.`m|PFS4=i!h+></r)0Q,(+.`m|PFS4=i!h+>", ((Element) (o_canNormalizeCase_mg208726_mg210454__15)).toString());
        Assert.assertTrue(((Element) (o_canNormalizeCase_mg208726_mg210454__15)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208726_mg210464() throws Exception {
        String __DSPOT_tagName_148393 = "T1uh2U5pHc&j1UNv$&V ";
        String __DSPOT_tagName_147973 = "!^qhf8Q9z]9n?s#j*!J9";
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208726__7 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
        Element o_canNormalizeCase_mg208726__9 = doc.createElement(__DSPOT_tagName_147973);
        Element o_canNormalizeCase_mg208726_mg210464__15 = o_canNormalizeCase_mg208726__9.tagName(__DSPOT_tagName_148393);
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210464__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210464__15)).hasText());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210464__15)).isBlock());
        Assert.assertEquals("<T1uh2U5pHc&j1UNv$&V></T1uh2U5pHc&j1UNv$&V>", ((Element) (o_canNormalizeCase_mg208726_mg210464__15)).toString());
        Assert.assertFalse(((Element) (o_canNormalizeCase_mg208726_mg210464__15)).hasParent());
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208726__7);
    }

    @Test(timeout = 10000)
    public void canNormalizeCase_mg208733_add209025_add218091() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_147974 = new Document.OutputSettings();
        String xml = "<TEST ID=1>Check</TEST>";
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Parser o_canNormalizeCase_mg208733_add209025_add218091__4 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add209025_add218091__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add209025_add218091__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser().settings(ParseSettings.htmlDefault));
        String o_canNormalizeCase_mg208733__8 = TextUtil.stripNewlines(doc.html());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
        Document o_canNormalizeCase_mg208733_add209025__12 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Document o_canNormalizeCase_mg208733__10 = doc.outputSettings(__DSPOT_outputSettings_147974);
        Assert.assertEquals("<TEST ID=1>Check</TEST>", xml);
        Assert.assertFalse(((Parser) (o_canNormalizeCase_mg208733_add209025_add218091__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_canNormalizeCase_mg208733_add209025_add218091__4)).getErrors());
        Assert.assertEquals("<test id=\"1\">Check</test>", o_canNormalizeCase_mg208733__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151587() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479438() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478499() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050__4)).getAllElements().isEmpty();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162995() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152162() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152162__13 = o_normalizesDiscordantTags_add151389__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152162__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152162__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152162__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_mg152162__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152162__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162758() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg162758__16 = o_normalizesDiscordantTags_add151389_add151844__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162758__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162758__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162758__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162758__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162758__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478823() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        ((Document) (o_normalizesDiscordantTags_mg478066__10)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478830() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        ((Document) (o_normalizesDiscordantTags_mg478066__10)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494835() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152781() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.clone();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152789() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.head();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151581() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478491() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050__4)).isBlock();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479446() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><j></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495160() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543_add495160__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).hasParent());
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495160__7)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg152990() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.body();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479449() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<iv>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478838() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        ((Document) (o_normalizesDiscordantTags_mg478066__10)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg152994() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.charset();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152394() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131920 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152394__15 = document.outputSettings(__DSPOT_outputSettings_131920);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152394__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152394__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152394__15)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_mg152394__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152394__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg152996() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.clone();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495168() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).getAllElements().isEmpty();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152794() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.location();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151395() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151395__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151395__6);

        document.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151393() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151393__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151393__6);

        parser.settings();
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151393__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151394() throws Exception {
        ParseSettings __DSPOT_settings_131662 = new ParseSettings(true, false);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151394__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151394__8);

        Parser o_normalizesDiscordantTags_mg151394__10 = parser.settings(__DSPOT_settings_131662);
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151394__10)).isTrackErrors());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151394__10)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151394__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151399() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151399__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151399__6);

        document.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494844() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "9", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151397() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151397__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151397__6);

        Document o_normalizesDiscordantTags_mg151397__8 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151397__8)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151397__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151397__8)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg151397__8)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151397__8)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151397__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152799() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.nodeName();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160829() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test7</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test7\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test7\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398() throws Exception {
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398__9)).isBlock());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398__9)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398__9)).hasText());
        Assert.assertEquals("<D^HU SUX{h>]a9y?y?)C></D^HU SUX{h>]a9y?y?)C>", ((Element) (o_normalizesDiscordantTags_mg151398__9)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398__9)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495701() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495701__16 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478543_mg495701__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152148() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152148__13 = o_normalizesDiscordantTags_add151389__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_mg152148__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495176() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).getAllElements();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152383() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162977() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg162977__16 = o_normalizesDiscordantTags_add151389__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162977__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162977__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162977__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162977__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162977__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162734() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151844__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478846() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        ((Document) (o_normalizesDiscordantTags_mg478066__10)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160817() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV%<p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495185() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasText();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495712() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495712__16 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_add478543_mg495712__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152137() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152137__13 = o_normalizesDiscordantTags_add151389__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_mg152137__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152373() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152373__13 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_mg152373__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162988() throws Exception {
        String __DSPOT_tagName_135327 = "k}#8#>oJF0S9Smj##p1M";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_add151844_mg162988__17 = o_normalizesDiscordantTags_add151389__4.createElement(__DSPOT_tagName_135327);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162988__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162988__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162988__17)).isBlock());
        Assert.assertEquals("<k}#8#>oJF0S9Smj##p1M></k}#8#>oJF0S9Smj##p1M>", ((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162988__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162988__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add160998() throws Exception {
        Parser o_normalizesDiscordantTags_add151389_add151908_add160998__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add160998__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add160998__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add160998__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add160998__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494826() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_add153458() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        ((Document) (o_normalizesDiscordantTags_mg151391__10)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg478928() throws Exception {
        int __DSPOT_indentAmount_239426 = 596309147;
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        __DSPOT_outputSettings_239214.indentAmount(__DSPOT_indentAmount_239426);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160800() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse(":DfqV#ZPc*Cq)XPf-o0rv0", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals(":DfqV#ZPc*Cq)XPf-o0rv0", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals(":DfqV#ZPc*Cq)XPf-o0rv0", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_add153453() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        ((Document) (o_normalizesDiscordantTags_mg151391__10)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_add153450() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        ((Document) (o_normalizesDiscordantTags_mg151391__10)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_add153451() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        ((Document) (o_normalizesDiscordantTags_mg151391__10)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160809() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>&lt;&gt;", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>&lt;&gt;", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152128() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151591() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "d", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479479() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "d", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495197() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).toString();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162717() throws Exception {
        ParseSettings __DSPOT_settings_135269 = new ParseSettings(true, false);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Parser o_normalizesDiscordantTags_add151389_add151844_mg162717__18 = parser.settings(__DSPOT_settings_135269);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add151389_add151844_mg162717__18)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151844_mg162717__18)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162957() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152362() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152362__13 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152362__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152362__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152362__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_mg152362__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152362__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495192() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).isBlock();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479194() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239537 = new Document.OutputSettings();
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Document o_normalizesDiscordantTags_mg478066_mg479194__17 = o_normalizesDiscordantTags_mg478066__10.outputSettings(__DSPOT_outputSettings_239537);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg479194__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478066_mg479194__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg479194__17)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg478066_mg479194__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg479194__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161817() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162532() throws Exception {
        Parser o_normalizesDiscordantTags_add151389_add151844_add162532__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162532__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162532__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162532__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162532__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479471() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152113() throws Exception {
        String __DSPOT_tagName_131826 = "iEl^k37lD7,:!yaQX09y";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_mg152113__14 = o_normalizesDiscordantTags_add151389__4.createElement(__DSPOT_tagName_131826);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152113__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152113__14)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152113__14)).isBlock());
        Assert.assertEquals("<iEl^k37lD7,:!yaQX09y></iEl^k37lD7,:!yaQX09y>", ((Element) (o_normalizesDiscordantTags_add151389_mg152113__14)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152113__14)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162538() throws Exception {
        Parser o_normalizesDiscordantTags_add151389_add151844_add162538__1 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162538__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162538__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162538__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151844_add162538__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg479156() throws Exception {
        String __DSPOT_className_239533 = "{4G$eS}y[*c6D<|eUgG$";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg479156__15 = o_normalizesDiscordantTags_mg478059__9.toggleClass(__DSPOT_className_239533);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479156__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479156__15)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479156__15)).isBlock());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx class=\"{4G$eS}y[*c6D<|eUgG$\"></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059_mg479156__15)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479156__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162543() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).getErrors();
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151402_mg152222() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131853 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151402__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151402__6);

        Document o_normalizesDiscordantTags_mg151402__8 = document.normalise();
        Document o_normalizesDiscordantTags_mg151402_mg152222__15 = o_normalizesDiscordantTags_mg151402__8.outputSettings(__DSPOT_outputSettings_131853);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151402_mg152222__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151402_mg152222__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151402_mg152222__15)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_mg151402_mg152222__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151402_mg152222__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151402__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494806() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("p1_l1L}m1sR/,4#waUvhQ|", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_literalMutationString478698() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152349() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152349__13 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_mg152349__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479457() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("g..A&QmNsN5`+)dkGngQrR", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152105() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152105__13 = o_normalizesDiscordantTags_add151389__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152105__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152105__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152105__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_mg152105__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152105__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162936() throws Exception {
        boolean __DSPOT_update_135311 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151844__4.updateMetaCharsetElement(__DSPOT_update_135311);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152343() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152343__13 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_mg152343__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161839() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161839__16 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151908_mg161839__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478799() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478051() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478051__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478051__6);
        String o_normalizesDiscordantTags_add478051__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478051__7);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478051__6);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478051__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050__4)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050__4)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050__4)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050__4)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050__4)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_literalMutationString479452() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p><&/p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162707() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        parser.settings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152336() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add494000() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152795() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_132027 = new Document.OutputSettings();
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Document o_normalizesDiscordantTags_mg151398_mg152795__16 = document.outputSettings(__DSPOT_outputSettings_132027);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151398_mg152795__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151398_mg152795__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151398_mg152795__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg151398_mg152795__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151398_mg152795__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg152976() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            parser.settings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161607() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161607__16 = o_normalizesDiscordantTags_add151389_add151908__7.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151908_mg161607__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152326() throws Exception {
        String __DSPOT_tagName_131906 = "g5aXuyA v{0Dgb8F$M)`";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_mg152326__14 = document.createElement(__DSPOT_tagName_131906);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152326__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152326__14)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152326__14)).isBlock());
        Assert.assertEquals("<g5aXuyA v{0Dgb8F$M)`></g5aXuyA v{0Dgb8F$M)`>", ((Element) (o_normalizesDiscordantTags_add151389_mg152326__14)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_mg152326__14)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479159() throws Exception {
        String __DSPOT_tagName_239534 = "53GrT+URXe6&{&Pk:GJ}";
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Element o_normalizesDiscordantTags_mg478066_mg479159__16 = o_normalizesDiscordantTags_mg478066__10.createElement(__DSPOT_tagName_239534);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479159__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479159__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479159__16)).isBlock());
        Assert.assertEquals("<53GrT+URXe6&{&Pk:GJ}></53GrT+URXe6&{&Pk:GJ}>", ((Element) (o_normalizesDiscordantTags_mg478066_mg479159__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479159__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495525() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495525__16 = o_normalizesDiscordantTags_add478050_add478543__7.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495525__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495525__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495525__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495525__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495525__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151877() throws Exception {
        boolean __DSPOT_pretty_131749 = true;
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        __DSPOT_outputSettings_131664.prettyPrint(__DSPOT_pretty_131749);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg479102() throws Exception {
        String __DSPOT_className_239515 = ";n +0k1uItnR^_n/-er{";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg479102__15 = o_normalizesDiscordantTags_mg478059__9.removeClass(__DSPOT_className_239515);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479102__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479102__15)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479102__15)).isBlock());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059_mg479102__15)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479102__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152998() throws Exception {
        Set<String> __DSPOT_classNames_132097 = Collections.<String>emptySet();
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Element o_normalizesDiscordantTags_mg151398_mg152998__16 = o_normalizesDiscordantTags_mg151398__9.classNames(__DSPOT_classNames_132097);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152998__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152998__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152998__16)).isBlock());
        Assert.assertEquals("<D^HU SUX{h>]a9y?y?)C></D^HU SUX{h>]a9y?y?)C>", ((Element) (o_normalizesDiscordantTags_mg151398_mg152998__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152998__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162575() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).getAllElements();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493608() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162927() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_add151844_mg162927__16 = o_normalizesDiscordantTags_add151389_add151844__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_add151844_mg162927__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495534() throws Exception {
        String __DSPOT_tagName_244907 = "x^9qC=+{^h{YK0E48.qo";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_add478543_mg495534__17 = o_normalizesDiscordantTags_add478050_add478543__7.createElement(__DSPOT_tagName_244907);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495534__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495534__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495534__17)).isBlock());
        Assert.assertEquals("<x^9qC=+{^h{YK0E48.qo></x^9qC=+{^h{YK0E48.qo>", ((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495534__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495534__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495773() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162589() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).isBlock();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493614() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478048() throws Exception {
        Parser o_normalizesDiscordantTags_add478048__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478048__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478048__1)).getErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478048__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478048__8);

        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478048__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478048__1)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478048__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478049() throws Exception {
        Parser o_normalizesDiscordantTags_add478049__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478049__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478049__1)).getErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478049__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478049__7);

        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478049__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478049__1)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478049__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161185() throws Exception {
        String __DSPOT_baseUri_134751 = "M#=LGpaG&v``6Mp%<{BI";
        String __DSPOT_html_134750 = "><M=>-Nu#{,}]|UL.lGn";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161185__18 = parser.parseInput(__DSPOT_html_134750, __DSPOT_baseUri_134751);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161185__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161185__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161185__18)).isBlock());
        Assert.assertEquals("&gt;\n<m=>\n -Nu#{,}]|UL.lGn\n</m=>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161185__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161185__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162581() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasText();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_add479692() throws Exception {
        try {
            Parser o_normalizesDiscordantTagsnull478073_failAssert1273_add479692__3 = Parser.xmlParser();
            Assert.assertNull(((Parser) (o_normalizesDiscordantTagsnull478073_failAssert1273_add479692__3)).getErrors());
            Assert.assertFalse(((Parser) (o_normalizesDiscordantTagsnull478073_failAssert1273_add479692__3)).isTrackErrors());
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495305() throws Exception {
        String __DSPOT_baseUri_244848 = "abyuA,!r08<(`SK?w{=}";
        String __DSPOT_html_244847 = "j}3-}e%*+m]#?m4obeD^";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495305__18 = parser.parseInput(__DSPOT_html_244847, __DSPOT_baseUri_244848);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495305__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495305__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495305__18)).isBlock());
        Assert.assertEquals("j}3-}e%*+m]#?m4obeD^", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495305__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495305__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495547() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495547__16 = o_normalizesDiscordantTags_add478050_add478543__7.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478543_mg495547__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151897() throws Exception {
        String __DSPOT_baseUri_131759 = "^=<,v09a$T`5s|H7yNnV";
        String __DSPOT_html_131758 = "!r{PbabZcEHwy`_tr&e4";
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Document o_normalizesDiscordantTags_mg151405_mg151897__17 = parser.parseInput(__DSPOT_html_131758, __DSPOT_baseUri_131759);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg151897__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151405_mg151897__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg151897__17)).isBlock());
        Assert.assertEquals("!r{PbabZcEHwy`_tr&amp;e4", ((Document) (o_normalizesDiscordantTags_mg151405_mg151897__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg151897__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg479045() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_mg479045__13 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_mg479045__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495543() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478543__7.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160651() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "M", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_add479698() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Jsoup.parse(null, "", parser);
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162558() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844_add162558__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).hasParent());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162558__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494509() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162551() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).isTrackErrors();
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495314() throws Exception {
        int __DSPOT_maxErrors_244852 = -663104029;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Parser o_normalizesDiscordantTags_add478050_add478543_mg495314__17 = parser.setTrackErrors(__DSPOT_maxErrors_244852);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add478050_add478543_mg495314__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478543_mg495314__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495553() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495553__16 = o_normalizesDiscordantTags_add478050_add478543__7.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_add478543_mg495553__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495796() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495796__16 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478543_mg495796__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg479055() throws Exception {
        boolean __DSPOT_update_239493 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.updateMetaCharsetElement(__DSPOT_update_239493);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160640() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162297() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "j", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162568() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).getAllElements().isEmpty();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495319() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        parser.settings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478326() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p><6/p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p>&lt;6/p&gt;</p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p>&lt;6/p&gt;</p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151540() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495722() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495722__16 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495722__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495722__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495722__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495722__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495722__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478457() throws Exception {
        Parser o_normalizesDiscordantTags_add478050_add478457__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478457__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478457__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478457__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478457__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg479020() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg479020__13 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_mg479020__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151544() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<d6v>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493652() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("ode{ da]W%(xdBSFMv$5Ag", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495113() throws Exception {
        Parser o_normalizesDiscordantTags_add478050_add478543_add495113__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495113__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495113__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495113__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495113__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153475() throws Exception {
        ParseSettings __DSPOT_settings_132232 = new ParseSettings(true, false);
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Parser o_normalizesDiscordantTags_mg151391_mg153475__17 = parser.settings(__DSPOT_settings_132232);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151391_mg153475__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151391_mg153475__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478449() throws Exception {
        ParseSettings __DSPOT_settings_239274 = new ParseSettings(true, false);
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Parser o_normalizesDiscordantTags_mg478059_mg478449__16 = parser.settings(__DSPOT_settings_239274);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478059_mg478449__16)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478059_mg478449__16)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494526() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494526__16 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478482_mg494526__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493645() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495729() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495729__16 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478543_mg495729__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478317() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p0</p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p0< p=\"\"></p0<>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p0< p=\"\"></p0<>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151842() throws Exception {
        int __DSPOT_indentAmount_131731 = 700138314;
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        __DSPOT_outputSettings_131664.indentAmount(__DSPOT_indentAmount_131731);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151532() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160863() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "B", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152190() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153488() throws Exception {
        String __DSPOT_tagName_132234 = "LcZw[lZMVQXPd9]PCgxX";
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Element o_normalizesDiscordantTags_mg151391_mg153488__16 = document.createElement(__DSPOT_tagName_132234);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153488__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153488__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153488__16)).isBlock());
        Assert.assertEquals("<LcZw[lZMVQXPd9]PCgxX></LcZw[lZMVQXPd9]PCgxX>", ((Element) (o_normalizesDiscordantTags_mg151391_mg153488__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153488__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495123() throws Exception {
        Parser o_normalizesDiscordantTags_add478050_add478543_add495123__1 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495123__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495123__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495123__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478543_add495123__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493660() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>est</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160629() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478461() throws Exception {
        Parser o_normalizesDiscordantTags_add478050_add478461__1 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478461__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478461__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478461__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478461__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478307() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test/DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test/DIV&gt;\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test/DIV&gt;\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151857() throws Exception {
        boolean __DSPOT_outlineMode_131739 = true;
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        __DSPOT_outputSettings_131664.outline(__DSPOT_outlineMode_131739);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478476() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).getErrors();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495131() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).getErrors();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479135() throws Exception {
        boolean __DSPOT_update_239528 = true;
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        document.updateMetaCharsetElement(__DSPOT_update_239528);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478346() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391__10)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151391__10)).hasText());
        Assert.assertEquals("KanebD?(_{nZJiv{kWqs", ((Document) (o_normalizesDiscordantTags_mg151391__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391__10)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151392() throws Exception {
        int __DSPOT_maxErrors_131661 = -1533071858;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151392__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151392__7);

        Parser o_normalizesDiscordantTags_mg151392__9 = parser.setTrackErrors(__DSPOT_maxErrors_131661);
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151392__9)).isTrackErrors());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151392__9)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151392__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151565() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIVF><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495741() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg479000() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151387() throws Exception {
        Parser o_normalizesDiscordantTags_add151387__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151387__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151387__1)).getErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151387__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151387__8);

        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151387__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151387__1)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151387__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151388() throws Exception {
        Parser o_normalizesDiscordantTags_add151388__1 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151388__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151388__1)).getErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151388__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151388__7);

        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151388__1)).isTrackErrors());
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151388__1)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151388__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389__4)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389__4)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389__4)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389__4)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389__4)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152676() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("zpV$aMKj_M2P9r9N#hZbM%", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163186() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg163186__16 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163186__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163186__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163186__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163186__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163186__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162598() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).toString();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151390() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151390__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151390__6);
        String o_normalizesDiscordantTags_add151390__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151390__7);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151390__6);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151390__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494306() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152672() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>testE/DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160856() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493623() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "j", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494544() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_add478482_mg494544__16 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_add478482_mg494544__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString495027() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "c", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478471() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).isTrackErrors();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495507() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478543__7.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151551() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>est</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495750() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_244950 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495750__18 = document.outputSettings(__DSPOT_outputSettings_244950);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495750__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495750__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495750__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495750__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495750__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495140() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).isTrackErrors();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151557() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("X@z;+ynfdoMXZQ3b:>>XR&", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495149() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478543_add495149__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).hasParent());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495149__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478818() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        ((Document) (o_normalizesDiscordantTags_mg478066__10)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152173() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152173__13 = o_normalizesDiscordantTags_add151389__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_mg152173__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153468() throws Exception {
        String __DSPOT_baseUri_132229 = "l670e@7`g;cR 3iNf6(b";
        String __DSPOT_html_132228 = "jT[xj@,f&x9GO%`b!PsD";
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Document o_normalizesDiscordantTags_mg151391_mg153468__17 = parser.parseInput(__DSPOT_html_132228, __DSPOT_baseUri_132229);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153468__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151391_mg153468__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153468__17)).isBlock());
        Assert.assertEquals("jT[xj@,f&amp;x9GO%`b!PsD", ((Document) (o_normalizesDiscordantTags_mg151391_mg153468__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153468__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478811() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        ((Document) (o_normalizesDiscordantTags_mg478066__10)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163195() throws Exception {
        String __DSPOT_tagName_135388 = ")k)&DhUt_#2pr1?4S^B&";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_add151844_mg163195__17 = document.createElement(__DSPOT_tagName_135388);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg163195__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg163195__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg163195__17)).isBlock());
        Assert.assertEquals("<)k)&DhUt_#2pr1?4S^B&></)k)&DhUt_#2pr1?4S^B&>", ((Element) (o_normalizesDiscordantTags_add151389_add151844_mg163195__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg163195__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152666() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160606() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test@/DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153470() throws Exception {
        int __DSPOT_maxErrors_132230 = 1881278690;
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Parser o_normalizesDiscordantTags_mg151391_mg153470__16 = parser.setTrackErrors(__DSPOT_maxErrors_132230);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151391_mg153470__16)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151391_mg153470__16)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160845() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152705() throws Exception {
        ParseSettings __DSPOT_settings_131987 = new ParseSettings(true, true);
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Parser o_normalizesDiscordantTags_mg151398_mg152705__16 = parser.settings(__DSPOT_settings_131987);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151398_mg152705__16)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151398_mg152705__16)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273null479846() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, null, parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasParent());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString495011() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161020() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).isTrackErrors();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478242() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<di>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153557() throws Exception {
        boolean __DSPOT_update_132253 = false;
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        o_normalizesDiscordantTags_mg151391__10.updateMetaCharsetElement(__DSPOT_update_132253);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493942() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).getErrors().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493692() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "&", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478534() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239292 = new Document.OutputSettings();
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Document o_normalizesDiscordantTags_mg478059_mg478534__16 = document.outputSettings(__DSPOT_outputSettings_239292);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478059_mg478534__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478059_mg478534__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478059_mg478534__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg478059_mg478534__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478059_mg478534__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162233() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIVQ<p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478769() throws Exception {
        Set<String> __DSPOT_classNames_239377 = Collections.<String>emptySet();
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg478769__16 = o_normalizesDiscordantTags_mg478059__9.classNames(__DSPOT_classNames_239377);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478769__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478769__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478769__16)).isBlock());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059_mg478769__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478769__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494448() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494448__16 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_add478482_mg494448__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152912() throws Exception {
        Element __DSPOT_parent_132072 = new Element("?-pvOS7tb0`kv[_#uX-n");
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Element o_normalizesDiscordantTags_mg151398_mg152912__16 = o_normalizesDiscordantTags_mg151398__9.appendTo(__DSPOT_parent_132072);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152912__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152912__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152912__16)).isBlock());
        Assert.assertEquals("<D^HU SUX{h>]a9y?y?)C></D^HU SUX{h>]a9y?y?)C>", ((Element) (o_normalizesDiscordantTags_mg151398_mg152912__16)).toString());
        Assert.assertTrue(((Element) (o_normalizesDiscordantTags_mg151398_mg152912__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161213() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        parser.settings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494202() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_add478482_mg494202__16 = o_normalizesDiscordantTags_add478050_add478482__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_add478482_mg494202__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161013() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).getErrors();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479800() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.updateMetaCharsetElement();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478234() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV$><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495496() throws Exception {
        boolean __DSPOT_update_244900 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.updateMetaCharsetElement(__DSPOT_update_244900);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString495020() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478820() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478820__13 = o_normalizesDiscordantTags_add478050__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_mg478820__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151861() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389__4)).getAllElements().isEmpty();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495490() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_add478543_mg495490__16 = o_normalizesDiscordantTags_add478050__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_add478543_mg495490__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493934() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050_add478482_add493934__12 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478482_add493934__12);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478482_add493934__12);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152922() throws Exception {
        boolean __DSPOT_attributeValue_132078 = false;
        String __DSPOT_attributeKey_132077 = "E8RGfAGxm1C=6Q|*V$tN";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Element o_normalizesDiscordantTags_mg151398_mg152922__16 = o_normalizesDiscordantTags_mg151398__9.attr(__DSPOT_attributeKey_132077, __DSPOT_attributeValue_132078);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152922__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152922__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152922__16)).isBlock());
        Assert.assertEquals("<D^HU SUX{h>]a9y?y?)C></D^HU SUX{h>]a9y?y?)C>", ((Element) (o_normalizesDiscordantTags_mg151398_mg152922__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152922__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162225() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("@O*5Zfw15K(>h)gXkTBXk2", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161227() throws Exception {
        ParseSettings __DSPOT_settings_134761 = new ParseSettings(true, true);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Parser o_normalizesDiscordantTags_add151389_add151908_mg161227__18 = parser.settings(__DSPOT_settings_134761);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add151389_add151908_mg161227__18)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151908_mg161227__18)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494438() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494438__16 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478482_mg494438__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161466() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161466__16 = o_normalizesDiscordantTags_add151389_add151908__7.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161466__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161466__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161466__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161466__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161466__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152927() throws Exception {
        String __DSPOT_attributeValue_132080 = "vE%KYg#2gX:Gg+vFK_9b";
        String __DSPOT_attributeKey_132079 = "84=eEUAgbcO3#4R!;+k-";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Element o_normalizesDiscordantTags_mg151398_mg152927__16 = o_normalizesDiscordantTags_mg151398__9.attr(__DSPOT_attributeKey_132079, __DSPOT_attributeValue_132080);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152927__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152927__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152927__16)).isBlock());
        Assert.assertEquals("<D^HU SUX{h>]a9y?y?)C 84=eEUAgbcO3#4R!;+k-=\"vE%KYg#2gX:Gg+vFK_9b\"></D^HU SUX{h>]a9y?y?)C>", ((Element) (o_normalizesDiscordantTags_mg151398_mg152927__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151398_mg152927__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480163() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239783 = new Document.OutputSettings();
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Document o_normalizesDiscordantTags_mg478052_mg480163__17 = document.outputSettings(__DSPOT_outputSettings_239783);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480163__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478052_mg480163__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480163__17)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg478052_mg480163__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480163__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161028() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151908_add161028__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).hasParent());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161028__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg152227() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131858 = new Document.OutputSettings();
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Document o_normalizesDiscordantTags_mg151405_mg152227__17 = o_normalizesDiscordantTags_mg151405__10.outputSettings(__DSPOT_outputSettings_131858);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg152227__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151405_mg152227__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg152227__17)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg151405_mg152227__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg152227__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161041() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).getAllElements().isEmpty();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493673() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<1iv>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478262() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "e", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151871() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389__4)).getAllElements();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493925() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478482_add493925__10 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493925__10)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153531() throws Exception {
        String __DSPOT_tagName_132245 = "!g3u[2RA9SSJ|*0j;#O|";
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Element o_normalizesDiscordantTags_mg151391_mg153531__16 = o_normalizesDiscordantTags_mg151391__10.createElement(__DSPOT_tagName_132245);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153531__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153531__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153531__16)).isBlock());
        Assert.assertEquals("<!g3u[2RA9SSJ|*0j;#O|></!g3u[2RA9SSJ|*0j;#O|>", ((Element) (o_normalizesDiscordantTags_mg151391_mg153531__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151391_mg153531__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151879() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389__4)).hasText();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493917() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478482_add493917__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).hasParent());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493917__7)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494222() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493666() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DDIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161478() throws Exception {
        String __DSPOT_tagName_134847 = "=5 ^s+a:o%K64PMI=0c2";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_add151908_mg161478__17 = o_normalizesDiscordantTags_add151389_add151908__7.createElement(__DSPOT_tagName_134847);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161478__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161478__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161478__17)).isBlock());
        Assert.assertEquals("<=5 ^s+a:o%K64PMI=0c2></=5 ^s+a:o%K64PMI=0c2>", ((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161478__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161478__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163144() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_add151844_mg163144__16 = o_normalizesDiscordantTags_add151389__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_add151844_mg163144__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494466() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494466__16 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478482_mg494466__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162217() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161035() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908_add161035__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).hasParent());
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161035__7)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478259() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161052() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasText();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478601() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050__4)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478255() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493910() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasParent();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153545() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_132247 = new Document.OutputSettings();
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Document o_normalizesDiscordantTags_mg151391_mg153545__17 = o_normalizesDiscordantTags_mg151391__10.outputSettings(__DSPOT_outputSettings_132247);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153545__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151391_mg153545__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153545__17)).isBlock());
        Assert.assertEquals("KanebD?(_{nZJiv{kWqs", ((Document) (o_normalizesDiscordantTags_mg151391_mg153545__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153545__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493687() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493682() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163153() throws Exception {
        boolean __DSPOT_update_135371 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.updateMetaCharsetElement(__DSPOT_update_135371);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161489() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151908__7.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494212() throws Exception {
        boolean __DSPOT_update_244440 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478482__4.updateMetaCharsetElement(__DSPOT_update_244440);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494456() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494456__16 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494456__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494456__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494456__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494456__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494456__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161242() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161046() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).getAllElements();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151413_failAssert321_literalMutationString152476() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("", null, parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151413 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153519() throws Exception {
        boolean __DSPOT_update_132243 = true;
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        document.updateMetaCharsetElement(__DSPOT_update_132243);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493984() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495442() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_244886 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495442__18 = o_normalizesDiscordantTags_add478050__4.outputSettings(__DSPOT_outputSettings_244886);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495442__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495442__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495442__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495442__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495442__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478287() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151891() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389__4)).toString();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479538() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            parser.settings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495680() throws Exception {
        String __DSPOT_tagName_244930 = "BVc+]<J1LdK4JT&Vk}ub";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_add478543_mg495680__17 = document.createElement(__DSPOT_tagName_244930);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495680__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495680__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495680__17)).isBlock());
        Assert.assertEquals("<BVc+]<J1LdK4JT&Vk}ub></BVc+]<J1LdK4JT&Vk}ub>", ((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495680__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495680__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478615() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050__4)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494485() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_244584 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494485__18 = document.outputSettings(__DSPOT_outputSettings_244584);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494485__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494485__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494485__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494485__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494485__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478071() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478071__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478071__6);

        boolean o_normalizesDiscordantTags_mg478071__8 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_mg478071__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478071__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160593() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><;p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478072() throws Exception {
        boolean __DSPOT_update_239217 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478072__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478072__7);

        document.updateMetaCharsetElement(__DSPOT_update_239217);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478072__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162286() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151403() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151403__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151403__6);

        String o_normalizesDiscordantTags_mg151403__8 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151403__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151403__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151404() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151404__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151404__6);

        document.outputSettings();
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151404__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151898() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389__4)).hasParent();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151401() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151401__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151401__6);

        String o_normalizesDiscordantTags_mg151401__8 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_mg151401__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151401__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151402() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151402__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151402__6);

        Document o_normalizesDiscordantTags_mg151402__8 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151402__8)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151402__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151402__8)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_mg151402__8)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151402__8)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151402__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480111() throws Exception {
        String __DSPOT_tagName_239762 = "Y[#_Ze[z,O`+6@G|H538";
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Element o_normalizesDiscordantTags_mg478052_mg480111__16 = document.createElement(__DSPOT_tagName_239762);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480111__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480111__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480111__16)).isBlock());
        Assert.assertEquals("<Y[#_Ze[z,O`+6@G|H538></Y[#_Ze[z,O`+6@G|H538>", ((Element) (o_normalizesDiscordantTags_mg478052_mg480111__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480111__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494244() throws Exception {
        String __DSPOT_tagName_244451 = "!)7GB8K!Bwd*w++Ag NC";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_add478482_mg494244__17 = o_normalizesDiscordantTags_add478050__4.createElement(__DSPOT_tagName_244451);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494244__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494244__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494244__17)).isBlock());
        Assert.assertEquals("<!)7GB8K!Bwd*w++Ag NC></!)7GB8K!Bwd*w++Ag NC>", ((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494244__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494244__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151408() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151408__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151408__6);

        String o_normalizesDiscordantTags_mg151408__8 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_mg151408__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151408__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163123() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163123__16 = o_normalizesDiscordantTags_add151389__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151844_mg163123__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405__10)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151405__10)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg151405__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405__10)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161499() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161499__16 = o_normalizesDiscordantTags_add151389_add151908__7.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151908_mg161499__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151406() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151406__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151406__6);

        document.quirksMode();
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151406__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161256() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161256__16 = o_normalizesDiscordantTags_add151389__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161256__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161256__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161256__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161256__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161256__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151400() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151400__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151400__6);

        String o_normalizesDiscordantTags_mg151400__8 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_mg151400__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151400__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478063() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478063__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478063__6);

        Document o_normalizesDiscordantTags_mg478063__8 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478063__8)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478063__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478063__8)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_mg478063__8)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478063__8)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478063__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478064() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478064__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478064__6);

        String o_normalizesDiscordantTags_mg478064__8 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478064__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478064__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478065() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478065__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478065__6);

        document.outputSettings();
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478065__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066__10)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478066__10)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg478066__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066__10)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478279() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495459() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478067() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478067__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478067__6);

        document.quirksMode();
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478067__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478069() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478069__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478069__6);

        String o_normalizesDiscordantTags_mg478069__8 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_mg478069__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478069__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478621() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050__4)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493977() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162274() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478060() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478060__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478060__6);

        document.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478061() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478061__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478061__6);

        String o_normalizesDiscordantTags_mg478061__8 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_mg478061__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478061__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478629() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050__4)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478062() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478062__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478062__6);

        String o_normalizesDiscordantTags_mg478062__8 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_mg478062__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478062__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494475() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494235() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494235__16 = o_normalizesDiscordantTags_add478050__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494235__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494235__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494235__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494235__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494235__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161266() throws Exception {
        String __DSPOT_tagName_134772 = "Q*+%QZ$W|Mwp&*A%E@Cu";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_add151908_mg161266__17 = o_normalizesDiscordantTags_add151389__4.createElement(__DSPOT_tagName_134772);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161266__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161266__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161266__17)).isBlock());
        Assert.assertEquals("<Q*+%QZ$W|Mwp&*A%E@Cu></Q*+%QZ$W|Mwp&*A%E@Cu>", ((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161266__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161266__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052() throws Exception {
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052__10)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478052__10)).hasText());
        Assert.assertEquals("@=,bS&lt;]qV{@NZxZDB54p", ((Document) (o_normalizesDiscordantTags_mg478052__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052__10)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478053() throws Exception {
        int __DSPOT_maxErrors_239211 = 2022349567;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478053__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478053__7);

        Parser o_normalizesDiscordantTags_mg478053__9 = parser.setTrackErrors(__DSPOT_maxErrors_239211);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478053__9)).isTrackErrors());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478053__9)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478053__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478054() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478054__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478054__6);

        parser.settings();
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478054__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478055() throws Exception {
        ParseSettings __DSPOT_settings_239212 = new ParseSettings(false, false);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478055__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478055__8);

        Parser o_normalizesDiscordantTags_mg478055__10 = parser.settings(__DSPOT_settings_239212);
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478055__10)).isTrackErrors());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478055__10)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478055__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478056() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478056__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478056__6);

        document.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478058() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478058__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478058__6);

        Document o_normalizesDiscordantTags_mg478058__8 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478058__8)).isBlock());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478058__8)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478058__8)).hasText());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg478058__8)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478058__8)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478058__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059() throws Exception {
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059__9)).isBlock());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059__9)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059__9)).hasText());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059__9)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059__9)).hasParent());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494262() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494262__16 = o_normalizesDiscordantTags_add478050__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478482_mg494262__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151602() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494023() throws Exception {
        int __DSPOT_maxErrors_244382 = -759209592;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Parser o_normalizesDiscordantTags_add478050_add478482_mg494023__17 = parser.setTrackErrors(__DSPOT_maxErrors_244382);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add478050_add478482_mg494023__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478482_mg494023__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493963() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479557() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.clone();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493969() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479554() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.charset();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162255() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test<DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479551() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.body();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160579() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DI><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152805() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.outerHtml();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161276() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152803() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.normalise();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493950() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).getErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495476() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495476__16 = o_normalizesDiscordantTags_add478050__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478543_mg495476__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_mg153504() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_132237 = new Document.OutputSettings();
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Document o_normalizesDiscordantTags_mg151391_mg153504__17 = document.outputSettings(__DSPOT_outputSettings_132237);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153504__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151391_mg153504__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153504__17)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg151391_mg153504__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151391_mg153504__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478296() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("ZU`(W7E.*)!<?3E<NSR-{h", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("ZU`(W7E.*)!<?nsr-{?>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("ZU`(W7E.*)!<?nsr-{?>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494251() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160564() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("U%R/R$8$0]t83/JW>p9r(j", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_literalMutationString152915() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "P", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494012() throws Exception {
        String __DSPOT_baseUri_244379 = "q{&qb9+hV{O+/1k40o+=";
        String __DSPOT_html_244378 = "X0GP>l2i^]!}9 4KmF*O";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494012__18 = parser.parseInput(__DSPOT_html_244378, __DSPOT_baseUri_244379);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494012__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494012__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494012__18)).isBlock());
        Assert.assertEquals("X0GP&gt;l2i^]!}9 4KmF*O", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494012__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494012__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479568() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.location();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_literalMutationString152918() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479565() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.head();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493957() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).isTrackErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162244() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>tes-t</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151410() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151410__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151410__6);

        boolean o_normalizesDiscordantTags_mg151410__8 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_mg151410__8);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151410__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161284() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161284__16 = o_normalizesDiscordantTags_add151389__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151908_mg161284__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161005() throws Exception {
        Parser o_normalizesDiscordantTags_add151389_add151908_add161005__1 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add161005__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add161005__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add161005__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151908_add161005__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151411() throws Exception {
        boolean __DSPOT_update_131667 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151411__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151411__7);

        document.updateMetaCharsetElement(__DSPOT_update_131667);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151411__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152810() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.outputSettings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478651() throws Exception {
        int __DSPOT_maxErrors_239336 = -391042009;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Parser o_normalizesDiscordantTags_add478050_mg478651__14 = parser.setTrackErrors(__DSPOT_maxErrors_239336);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add478050_mg478651__14)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_mg478651__14)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152446() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_mg152446__13 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_mg152446__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg152048() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131803 = new Document.OutputSettings();
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Document o_normalizesDiscordantTags_mg151405_mg152048__17 = document.outputSettings(__DSPOT_outputSettings_131803);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg152048__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151405_mg152048__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg152048__17)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg151405_mg152048__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151405_mg152048__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494285() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494285__16 = o_normalizesDiscordantTags_add478050__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494285__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494285__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494285__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494285__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494285__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478897() throws Exception {
        String __DSPOT_tagName_239419 = "NtD!Fs*63H[3NY9QBs.:";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_mg478897__14 = document.createElement(__DSPOT_tagName_239419);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478897__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478897__14)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478897__14)).isBlock());
        Assert.assertEquals("<NtD!Fs*63H[3NY9QBs.:></NtD!Fs*63H[3NY9QBs.:>", ((Element) (o_normalizesDiscordantTags_add478050_mg478897__14)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478897__14)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478930() throws Exception {
        String __DSPOT_searchText_239427 = "Hx/M+9..FGVa^mp`ZHlg";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478930__15 = o_normalizesDiscordantTags_mg478059__9.getElementsContainingOwnText(__DSPOT_searchText_239427);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478930__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163321() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_add151844_mg163321__16 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_add151844_mg163321__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494048() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478482__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494796() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<divtest</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478662() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        parser.settings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg478993() throws Exception {
        int __DSPOT_maxErrors_239469 = 1349902220;
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Parser o_normalizesDiscordantTags_mg478066_mg478993__16 = parser.setTrackErrors(__DSPOT_maxErrors_239469);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478066_mg478993__16)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478066_mg478993__16)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494031() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        parser.settings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494274() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494274__16 = o_normalizesDiscordantTags_add478050__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_add478482_mg494274__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg152296() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        boolean o_normalizesDiscordantTags_mg151405_mg152296__15 = o_normalizesDiscordantTags_mg151405__10.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_mg151405_mg152296__15);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478941() throws Exception {
        String __DSPOT_searchText_239430 = "U,nCfTIOdyI5O!tF51`F";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478941__15 = o_normalizesDiscordantTags_mg478059__9.getElementsContainingText(__DSPOT_searchText_239430);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478941__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163331() throws Exception {
        boolean __DSPOT_update_135415 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.updateMetaCharsetElement(__DSPOT_update_135415);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494037() throws Exception {
        ParseSettings __DSPOT_settings_244384 = new ParseSettings(false, false);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Parser o_normalizesDiscordantTags_add478050_add478482_mg494037__18 = parser.settings(__DSPOT_settings_244384);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add478050_add478482_mg494037__18)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478482_mg494037__18)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161861() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_add151908_mg161861__16 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_add151908_mg161861__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg478988() throws Exception {
        String __DSPOT_baseUri_239464 = ",oI(W#c(D_kB|&)L?bJm";
        String __DSPOT_html_239463 = " (ze(;prW(RTwJ4)2(6Z";
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Document o_normalizesDiscordantTags_mg478066_mg478988__17 = parser.parseInput(__DSPOT_html_239463, __DSPOT_baseUri_239464);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg478988__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478066_mg478988__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg478988__17)).isBlock());
        Assert.assertEquals("(ze(;prW(RTwJ4)2(6Z", ((Document) (o_normalizesDiscordantTags_mg478066_mg478988__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg478988__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152836() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.quirksMode();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152428() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152428__13 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_mg152428__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153150() throws Exception {
        String __DSPOT_searchText_132137 = "$8P8r7PY,iqyoh{i)J}<";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153150__15 = o_normalizesDiscordantTags_mg151398__9.getElementsContainingOwnText(__DSPOT_searchText_132137);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153150__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153158() throws Exception {
        String __DSPOT_searchText_132139 = "v^]`|0CD+tlbM$oE=9#c";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153158__15 = o_normalizesDiscordantTags_mg151398__9.getElementsContainingText(__DSPOT_searchText_132139);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153158__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494067() throws Exception {
        String __DSPOT_tagName_244395 = "TwabaWB!x3I)Epd yMYN";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_add478482_mg494067__17 = o_normalizesDiscordantTags_add478050_add478482__4.createElement(__DSPOT_tagName_244395);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494067__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494067__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494067__17)).isBlock());
        Assert.assertEquals("<TwabaWB!x3I)Epd yMYN></TwabaWB!x3I)Epd yMYN>", ((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494067__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494067__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161636() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_add151908_mg161636__16 = o_normalizesDiscordantTags_add151389_add151908__7.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_add151908_mg161636__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494779() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p>G/p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162694() throws Exception {
        int __DSPOT_maxErrors_135265 = -1361767785;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Parser o_normalizesDiscordantTags_add151389_add151844_mg162694__17 = parser.setTrackErrors(__DSPOT_maxErrors_135265);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add151389_add151844_mg162694__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151844_mg162694__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161871() throws Exception {
        boolean __DSPOT_update_135041 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.updateMetaCharsetElement(__DSPOT_update_135041);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494774() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152845() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.title();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478642() throws Exception {
        String __DSPOT_baseUri_239332 = "1`>ew!n<OvPj1H*WZ&55";
        String __DSPOT_html_239331 = "!N`G(jaA ROoF1QrypbM";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478642__15 = parser.parseInput(__DSPOT_html_239331, __DSPOT_baseUri_239332);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478642__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478642__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478642__15)).isBlock());
        Assert.assertEquals("!N`G(jaA ROoF1QrypbM", ((Document) (o_normalizesDiscordantTags_add478050_mg478642__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478642__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493992() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494295() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494295__16 = o_normalizesDiscordantTags_add478050__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478482_mg494295__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478889() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478889__13 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478889__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478889__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478889__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_mg478889__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478889__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478964() throws Exception {
        String __DSPOT_regex_239438 = " 1CWe4*DbQWYLr5||q6G";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478964__15 = o_normalizesDiscordantTags_mg478059__9.getElementsMatchingText(__DSPOT_regex_239438);
        Assert.assertFalse(o_normalizesDiscordantTags_mg478059_mg478964__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161648() throws Exception {
        boolean __DSPOT_update_134929 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151908__7.updateMetaCharsetElement(__DSPOT_update_134929);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494059() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494059__16 = o_normalizesDiscordantTags_add478050_add478482__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494059__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494059__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494059__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494059__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494059__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152407() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151809() throws Exception {
        Parser o_normalizesDiscordantTags_add151389_add151809__1 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151809__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151809__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151809__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151809__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494788() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test< /DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152854() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.updateMetaCharsetElement();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320null153087() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, null, parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478857() throws Exception {
        boolean __DSPOT_update_239406 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.updateMetaCharsetElement(__DSPOT_update_239406);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_literalMutationString479653() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_literalMutationString479658() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "(", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494085() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494085__16 = o_normalizesDiscordantTags_add478050_add478482__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478482_mg494085__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151819() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).isTrackErrors();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494997() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>tst</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n tst\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n tst\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg478950() throws Exception {
        boolean __DSPOT_outlineMode_239432 = false;
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        __DSPOT_outputSettings_239214.outline(__DSPOT_outlineMode_239432);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478868() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162687() throws Exception {
        String __DSPOT_baseUri_135264 = "/2oJn;[e<BVN33M;c#Ab";
        String __DSPOT_html_135263 = "FH&vJj04>Q4)P1nJN9Tu";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg162687__18 = parser.parseInput(__DSPOT_html_135263, __DSPOT_baseUri_135264);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162687__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162687__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162687__18)).isBlock());
        Assert.assertEquals("FH&amp;vJj04&gt;Q4)P1nJN9Tu", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162687__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162687__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494076() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478482__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162420() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "t", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161421() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_add151908_mg161421__16 = o_normalizesDiscordantTags_add151389__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_add151908_mg161421__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161661() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162897() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg162897__16 = o_normalizesDiscordantTags_add151389_add151844__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151844_mg162897__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153111() throws Exception {
        String __DSPOT_className_132130 = "E0$[-_2}Up#o:U-iT=8D";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153111__15 = o_normalizesDiscordantTags_mg151398__9.getElementsByClass(__DSPOT_className_132130);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153111__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151834() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).getErrors();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161435() throws Exception {
        boolean __DSPOT_update_134817 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.updateMetaCharsetElement(__DSPOT_update_134817);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162415() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494975() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>`est</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n `est\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n `est\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494097() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494097__16 = o_normalizesDiscordantTags_add478050_add478482__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_add478482_mg494097__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_add479700() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478844() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_mg478844__13 = o_normalizesDiscordantTags_add478050__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_mg478844__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasParent());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161448() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151908__7.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478918() throws Exception {
        String __DSPOT_tagName_239425 = "#vi+Gfnf8eD8&9K;&kvr";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478918__15 = o_normalizesDiscordantTags_mg478059__9.getElementsByTag(__DSPOT_tagName_239425);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478918__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275null479666() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", null, null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161687() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161687__16 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161687__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161687__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161687__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161687__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161687__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151849() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389__4)).isBlock();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161201() throws Exception {
        int __DSPOT_maxErrors_134757 = -1320042180;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Parser o_normalizesDiscordantTags_add151389_add151908_mg161201__17 = parser.setTrackErrors(__DSPOT_maxErrors_134757);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add151389_add151908_mg161201__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151908_mg161201__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_add479704() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg478969() throws Exception {
        boolean __DSPOT_pretty_239443 = true;
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        __DSPOT_outputSettings_239214.prettyPrint(__DSPOT_pretty_239443);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494985() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("^iTL,-9> MgU@jtdhvj-m4", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("^iTL,-9&gt; MgU@jtdhvj-m4", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("^iTL,-9&gt; MgU@jtdhvj-m4", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495274() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162874() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151844__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152041() throws Exception {
        int __DSPOT_maxErrors_131800 = -1813911869;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Parser o_normalizesDiscordantTags_add151389_mg152041__14 = parser.setTrackErrors(__DSPOT_maxErrors_131800);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add151389_mg152041__14)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_mg152041__14)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152283() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        boolean o_normalizesDiscordantTags_add151389_mg152283__13 = o_normalizesDiscordantTags_add151389__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add151389_mg152283__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162608() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasParent();
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160715() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p><R/p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494956() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151906() throws Exception {
        int __DSPOT_maxErrors_131764 = 576979339;
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Parser o_normalizesDiscordantTags_mg151405_mg151906__16 = parser.setTrackErrors(__DSPOT_maxErrors_131764);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151405_mg151906__16)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151405_mg151906__16)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertTrue(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151924() throws Exception {
        ParseSettings __DSPOT_settings_131767 = new ParseSettings(true, false);
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Parser o_normalizesDiscordantTags_mg151405_mg151924__17 = parser.settings(__DSPOT_settings_131767);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg151405_mg151924__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151405_mg151924__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495284() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152033() throws Exception {
        String __DSPOT_baseUri_131797 = "Veq+o,T]O;SR`n&/Gk^m";
        String __DSPOT_html_131796 = "Hpp;l9e-ky&-vh]2T77C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152033__15 = parser.parseInput(__DSPOT_html_131796, __DSPOT_baseUri_131797);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152033__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152033__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152033__15)).isBlock());
        Assert.assertEquals("Hpp;l9e-ky&amp;-vh]2T77C", ((Document) (o_normalizesDiscordantTags_add151389_mg152033__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152033__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151699() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "#", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162615() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151844_add162615__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).hasParent());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162615__7)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153104() throws Exception {
        String __DSPOT_valuePrefix_132129 = "w|{^2a_odA-H!S&YE)yu";
        String __DSPOT_key_132128 = "<ck)dYS1s/FW>=$?u+[&";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153104__16 = o_normalizesDiscordantTags_mg151398__9.getElementsByAttributeValueStarting(__DSPOT_key_132128, __DSPOT_valuePrefix_132129);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153104__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162619() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151844_add162619__10 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_add162619__10)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494966() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test<|/DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test&lt;|/DIV&gt;\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test&lt;|/DIV&gt;\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160702() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<divtest</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162623() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389_add151844_add162623__12 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151844_add162623__12);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151844_add162623__12);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495818() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_add478543_mg495818__16 = document.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_add478543_mg495818__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160709() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV<<p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495296() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495291() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494934() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "L", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg479080() throws Exception {
        String __DSPOT_tagName_239505 = "p<V)EBwLXTH!o{vuT_S-";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg479080__15 = o_normalizesDiscordantTags_mg478059__9.prependElement(__DSPOT_tagName_239505);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479080__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479080__15)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg479080__15)).isBlock());
        Assert.assertEquals("<p<V)EBwLXTH!o{vuT_S-></p<V)EBwLXTH!o{vuT_S->", ((Element) (o_normalizesDiscordantTags_mg478059_mg479080__15)).toString());
        Assert.assertTrue(((Element) (o_normalizesDiscordantTags_mg478059_mg479080__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495829() throws Exception {
        boolean __DSPOT_update_244969 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.updateMetaCharsetElement(__DSPOT_update_244969);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_add479991() throws Exception {
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        ((Document) (o_normalizesDiscordantTags_mg478052__10)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152254() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_mg152254__13 = o_normalizesDiscordantTags_add151389__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_mg152254__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151378() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<d1v>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151378__6 = document.html();
        Assert.assertEquals("<d1v>\n test\n <p></p>\n</d1v>", o_normalizesDiscordantTags_literalMutationString151378__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<d1v>\n test\n <p></p>\n</d1v>", o_normalizesDiscordantTags_literalMutationString151378__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151379() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151379__6 = document.html();
        Assert.assertEquals("", o_normalizesDiscordantTags_literalMutationString151379__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("", o_normalizesDiscordantTags_literalMutationString151379__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_literalMutationString151597() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151380() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151380__6 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_literalMutationString151380__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_literalMutationString151380__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478696() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151381() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse(";2[>(fZ&D#n D[6f%J+;J6", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151381__6 = document.html();
        Assert.assertEquals(";2[&gt;(fZ&amp;D#n D[6f%J+;J6", o_normalizesDiscordantTags_literalMutationString151381__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals(";2[&gt;(fZ&amp;D#n D[6f%J+;J6", o_normalizesDiscordantTags_literalMutationString151381__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151382() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>testj</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151382__6 = document.html();
        Assert.assertEquals("<div>\n testj\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151382__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n testj\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151382__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151383() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test<DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151383__6 = document.html();
        Assert.assertEquals("<div>\n test\n <div>\n  <p></p>\n </div>\n</div>", o_normalizesDiscordantTags_literalMutationString151383__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n <div>\n  <p></p>\n </div>\n</div>", o_normalizesDiscordantTags_literalMutationString151383__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151384() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString151384__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151384__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151384__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151385() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_literalMutationString151385__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151385__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151385__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString151386() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "8", parser);
        String o_normalizesDiscordantTags_literalMutationString151386__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151386__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString151386__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg152682() throws Exception {
        String __DSPOT_baseUri_131985 = "7-Vk2ol.(k<$%(,D@zOK";
        String __DSPOT_html_131984 = "B)Z!y>@VP(7|3mvO)2`M";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Document o_normalizesDiscordantTags_mg151398_mg152682__16 = parser.parseInput(__DSPOT_html_131984, __DSPOT_baseUri_131985);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151398_mg152682__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg151398_mg152682__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151398_mg152682__16)).isBlock());
        Assert.assertEquals("B)Z!y&gt;@VP(7|3mvO)2`M", ((Document) (o_normalizesDiscordantTags_mg151398_mg152682__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg151398_mg152682__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162835() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151844__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162654() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162658() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162844() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_135288 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg162844__18 = o_normalizesDiscordantTags_add151389_add151844__4.outputSettings(__DSPOT_outputSettings_135288);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162844__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162844__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162844__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162844__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162844__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161700() throws Exception {
        String __DSPOT_tagName_134966 = ">TrNK 1do[J*IJ= C7&H";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_add151908_mg161700__17 = document.createElement(__DSPOT_tagName_134966);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161700__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161700__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161700__17)).isBlock());
        Assert.assertEquals("<>TrNK 1do[J*IJ= C7&H></>TrNK 1do[J*IJ= C7&H>", ((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161700__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151908_mg161700__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494922() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494928() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162666() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_add479982() throws Exception {
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        ((Document) (o_normalizesDiscordantTags_mg478052__10)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152229() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162817() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg162817__16 = o_normalizesDiscordantTags_add151389_add151844__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162817__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162817__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162817__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162817__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg162817__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478675() throws Exception {
        ParseSettings __DSPOT_settings_239344 = new ParseSettings(true, true);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Parser o_normalizesDiscordantTags_add478050_mg478675__15 = parser.settings(__DSPOT_settings_239344);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add478050_mg478675__15)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_mg478675__15)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152461() throws Exception {
        boolean __DSPOT_update_131930 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.updateMetaCharsetElement(__DSPOT_update_131930);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479098() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239512 = new Document.OutputSettings();
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Document o_normalizesDiscordantTags_mg478066_mg479098__17 = document.outputSettings(__DSPOT_outputSettings_239512);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg479098__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478066_mg479098__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg479098__17)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_mg478066_mg479098__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478066_mg479098__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162628() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).getErrors().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_add478777() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser o_normalizesDiscordantTags_mg478066_add478777__3 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg478066_add478777__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478066_add478777__3)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg478066_add478777__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478066_add478777__3)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162634() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).getErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162825() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg162825__16 = o_normalizesDiscordantTags_add151389_add151844__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151844_mg162825__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494909() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("p`}:?ue?$(WYSq2ukUh|JN", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161728() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161728__16 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151908_mg161728__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162641() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).isTrackErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494900() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<di>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162646() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152205() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131842 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152205__15 = o_normalizesDiscordantTags_add151389__4.outputSettings(__DSPOT_outputSettings_131842);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152205__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152205__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152205__15)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_mg152205__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152205__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478042() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>`est</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478042__6 = document.html();
        Assert.assertEquals("<div>\n `est\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478042__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n `est\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478042__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478043() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("C,;^I_8`89d?.T>SJoVYj[", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478043__6 = document.html();
        Assert.assertEquals("C,;^I_8`89d?.T&gt;SJoVYj[", o_normalizesDiscordantTags_literalMutationString478043__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("C,;^I_8`89d?.T&gt;SJoVYj[", o_normalizesDiscordantTags_literalMutationString478043__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478040() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478040__6 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_literalMutationString478040__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_literalMutationString478040__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478041() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p>P</p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478041__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p>P</p>", o_normalizesDiscordantTags_literalMutationString478041__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p>P</p>", o_normalizesDiscordantTags_literalMutationString478041__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495400() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495400__16 = o_normalizesDiscordantTags_add478050__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_add478543_mg495400__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495641() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_add478543_mg495641__16 = o_normalizesDiscordantTags_add478050_add478543__7.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_add478543_mg495641__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151625() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>tet</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n tet\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n tet\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478536() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050__4)).hasParent();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493731() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>tGst</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n tGst\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n tGst\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479576() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.normalise();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493725() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("jIJxON@gAzV1VoCsrIeWJK", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("jIJxON@gAzV1VoCsrIeWJK", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("jIJxON@gAzV1VoCsrIeWJK", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479573() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.nodeName();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478039() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478039__6 = document.html();
        Assert.assertEquals("", o_normalizesDiscordantTags_literalMutationString478039__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("", o_normalizesDiscordantTags_literalMutationString478039__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161295() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161295__16 = o_normalizesDiscordantTags_add151389__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_add151908_mg161295__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495649() throws Exception {
        boolean __DSPOT_update_244929 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478543__7.updateMetaCharsetElement(__DSPOT_update_244929);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495412() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495412__16 = o_normalizesDiscordantTags_add478050__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495412__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495412__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495412__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495412__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495412__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_add152733() throws Exception {
        try {
            Parser o_normalizesDiscordantTagsnull151414_failAssert322_add152733__3 = Parser.xmlParser();
            Assert.assertNull(((Parser) (o_normalizesDiscordantTagsnull151414_failAssert322_add152733__3)).getErrors());
            Assert.assertFalse(((Parser) (o_normalizesDiscordantTagsnull151414_failAssert322_add152733__3)).isTrackErrors());
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151611() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495205() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).hasParent();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478549() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050_add478549__9 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478549__9);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478549__9);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160785() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162801() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg162801__16 = o_normalizesDiscordantTags_add151389_add151844__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_add151844_mg162801__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162189() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "$", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493737() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479584() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.outputSettings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160548() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479580() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.outerHtml();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151691() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser o_normalizesDiscordantTags_mg151405_add151691__3 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg151405_add151691__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151405_add151691__3)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg151405_add151691__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151405_add151691__3)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_add152744() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_add152741() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478556() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).isTrackErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151645() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("%8q|b}?&w3ZQSXX>O<=sgW", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("%8q|b}?&amp;w3ZQSXX&gt;O&lt;=sgW", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("%8q|b}?&amp;w3ZQSXX&gt;O&lt;=sgW", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479051() throws Exception {
        String __DSPOT_tagName_239492 = "%//8t;U!d0{s</Wghg7W";
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Element o_normalizesDiscordantTags_mg478066_mg479051__16 = document.createElement(__DSPOT_tagName_239492);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479051__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479051__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479051__16)).isBlock());
        Assert.assertEquals("<%//8t;U!d0{s</Wghg7W></%//8t;U!d0{s</Wghg7W>", ((Element) (o_normalizesDiscordantTags_mg478066_mg479051__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478066_mg479051__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495214() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543_add495214__10 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_add495214__10)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162673() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_add162679() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151844__4)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495427() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495427__16 = o_normalizesDiscordantTags_add478050__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478543_mg495427__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495435() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478562() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).getErrors().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478568() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).getErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495674() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495674__16 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495674__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495674__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495674__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495674__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495674__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151636() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>tesMt</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n tesMt\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n tesMt\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493720() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</D(IV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n <p></p>\n</div>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495222() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050_add478543_add495222__12 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478543_add495222__12);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478543_add495222__12);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162177() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162168() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493711() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_add479921() throws Exception {
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser o_normalizesDiscordantTags_mg478052_add479921__3 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg478052_add479921__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478052_add479921__3)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg478052_add479921__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478052_add479921__3)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478046() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_literalMutationString478046__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478046__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478046__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478047() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "[", parser);
        String o_normalizesDiscordantTags_literalMutationString478047__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478047__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478047__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478044() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<divtest</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478044__6 = document.html();
        Assert.assertEquals("<divtest< div=\"\">\n <p></p>\n</divtest<>", o_normalizesDiscordantTags_literalMutationString478044__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<divtest< div=\"\">\n <p></p>\n</divtest<>", o_normalizesDiscordantTags_literalMutationString478044__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_literalMutationString478045() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertNull(((Parser) (parser)).getErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_literalMutationString478045__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478045__6);

        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_literalMutationString478045__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495230() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).getErrors().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479234() throws Exception {
        boolean __DSPOT_update_239544 = false;
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        o_normalizesDiscordantTags_mg478066__10.updateMetaCharsetElement(__DSPOT_update_239544);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478201() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479230() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        boolean o_normalizesDiscordantTags_mg478066_mg479230__15 = o_normalizesDiscordantTags_mg478066__10.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_mg478066_mg479230__15);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495238() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).getErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160750() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "J", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152082() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493902() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).toString();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480075() throws Exception {
        ParseSettings __DSPOT_settings_239749 = new ParseSettings(true, true);
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Parser o_normalizesDiscordantTags_mg478052_mg480075__17 = parser.settings(__DSPOT_settings_239749);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478052_mg480075__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478052_mg480075__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495609() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478543__7.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161059() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).isBlock();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161070() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasParent();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151654() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</nIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n <p></p>\n</div>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n <p></p>\n</div>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495247() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Parser) (parser)).isTrackErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163096() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161066() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).toString();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478580() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050__4)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478223() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<divGtest</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151686() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478066_mg479010() throws Exception {
        ParseSettings __DSPOT_settings_239477 = new ParseSettings(true, true);
        Document.OutputSettings __DSPOT_outputSettings_239214 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478066__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);

        Document o_normalizesDiscordantTags_mg478066__10 = document.outputSettings(__DSPOT_outputSettings_239214);
        Parser o_normalizesDiscordantTags_mg478066_mg479010__17 = parser.settings(__DSPOT_settings_239477);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_mg478066_mg479010__17)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg478066_mg479010__17)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478066__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152063() throws Exception {
        ParseSettings __DSPOT_settings_131808 = new ParseSettings(false, false);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Parser o_normalizesDiscordantTags_add151389_mg152063__15 = parser.settings(__DSPOT_settings_131808);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add151389_mg152063__15)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_mg152063__15)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495258() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add152006() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389__4)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160737() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493749() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163067() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_135350 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg163067__18 = o_normalizesDiscordantTags_add151389__4.outputSettings(__DSPOT_outputSettings_135350);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163067__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163067__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163067__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163067__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163067__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322null152902() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", null, null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161078() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908_add161078__10 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_add161078__10)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495625() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495625__16 = o_normalizesDiscordantTags_add478050_add478543__7.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478543_mg495625__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478590() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050__4)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_literalMutationString151673() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478212() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("-zhHuKB5uBfCzn(HaA(B6l", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161096() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).getErrors().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152051() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        parser.settings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg151982() throws Exception {
        String __DSPOT_tagName_131783 = "JZ]%($LK#,T>U);!82g8";
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Element o_normalizesDiscordantTags_mg151405_mg151982__16 = document.createElement(__DSPOT_tagName_131783);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg151982__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg151982__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg151982__16)).isBlock());
        Assert.assertEquals("<JZ]%($LK#,T>U);!82g8></JZ]%($LK#,T>U);!82g8>", ((Element) (o_normalizesDiscordantTags_mg151405_mg151982__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg151982__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_add479522() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152294() throws Exception {
        boolean __DSPOT_update_131894 = true;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.updateMetaCharsetElement(__DSPOT_update_131894);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493764() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "u", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_add495267() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        ((Document) (o_normalizesDiscordantTags_add478050_add478543__7)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add152018() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389__4)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_add479525() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160726() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494411() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494411__16 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494411__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494411__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494411__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494411__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494411__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493757() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161089() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389_add151908_add161089__12 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151908_add161089__12);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151908_add161089__12);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494418() throws Exception {
        String __DSPOT_tagName_244548 = "P=4ZY{,rA|5y^cp^sbgz";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_add478482_mg494418__17 = document.createElement(__DSPOT_tagName_244548);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494418__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494418__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494418__17)).isBlock());
        Assert.assertEquals("<P=4ZY{,rA|5y^cp^sbgz></P=4ZY{,rA|5y^cp^sbgz>", ((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494418__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478482_mg494418__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478890() throws Exception {
        String __DSPOT_valuePrefix_239416 = "#e8_s79LJox1dp9CveU(";
        String __DSPOT_key_239415 = "+j2qc*&5 +]hcGC%ys_G";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478890__16 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttributeValueStarting(__DSPOT_key_239415, __DSPOT_valuePrefix_239416);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478890__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153036() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.quirksMode();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478933() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478933__13 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478933__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478933__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478933__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_mg478933__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478933__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495363() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495363__16 = o_normalizesDiscordantTags_add478050__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495363__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495363__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495363__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495363__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495363__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478896() throws Exception {
        String __DSPOT_className_239417 = ":Zr/STcK/44-=&=-Pjl!";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478896__15 = o_normalizesDiscordantTags_mg478059__9.getElementsByClass(__DSPOT_className_239417);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478896__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479610() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.quirksMode();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152698() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151976() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389__4)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162112() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163041() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163041__16 = o_normalizesDiscordantTags_add151389__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151844_mg163041__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161335() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_134798 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161335__18 = o_normalizesDiscordantTags_add151389__4.outputSettings(__DSPOT_outputSettings_134798);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161335__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161335__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161335__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161335__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161335__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493568() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("x>Nq/d=&8@F>Gc&|I[1?:8", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163284() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152695() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "0", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161133() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478358() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "<span>Hello <div>there</div> <span>now</span></span>", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153043() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.title();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478663() throws Exception {
        Element __DSPOT_parent_239339 = new Element("uBRi,TEC:;|JhhmkRW?+");
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg478663__16 = o_normalizesDiscordantTags_mg478059__9.appendTo(__DSPOT_parent_239339);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478663__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478663__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478663__16)).isBlock());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059_mg478663__16)).toString());
        Assert.assertTrue(((Element) (o_normalizesDiscordantTags_mg478059_mg478663__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478947() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478947__13 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_mg478947__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495373() throws Exception {
        String __DSPOT_tagName_244868 = "Hew)AMuvvNRB%_r)4*)D";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_add478543_mg495373__17 = o_normalizesDiscordantTags_add478050__4.createElement(__DSPOT_tagName_244868);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495373__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495373__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495373__17)).isBlock());
        Assert.assertEquals("<Hew)AMuvvNRB%_r)4*)D></Hew)AMuvvNRB%_r)4*)D>", ((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495373__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_add478543_mg495373__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493588() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</D2IV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151737() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        ((Document) (o_normalizesDiscordantTags_mg151405__10)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162351() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<divM>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<divm>\n test\n <p></p>\n</divm>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<divm>\n test\n <p></p>\n</divm>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151985() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389__4)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478075_failAssert1275_mg479620() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478075 should have thrown NullPointerException");
            document.title();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163054() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163298() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163298__16 = document.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151844_mg163298__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494317() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_244481 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494317__18 = o_normalizesDiscordantTags_add478050__4.outputSettings(__DSPOT_outputSettings_244481);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494317__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494317__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494317__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494317__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494317__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480045() throws Exception {
        String __DSPOT_baseUri_239732 = "!W>CJrH;n;p!4qb3;:!i";
        String __DSPOT_html_239731 = "VlM1*{pi#j@k^REg:4r-";
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Document o_normalizesDiscordantTags_mg478052_mg480045__17 = parser.parseInput(__DSPOT_html_239731, __DSPOT_baseUri_239732);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480045__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478052_mg480045__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480045__17)).isBlock());
        Assert.assertEquals("VlM1*{pi#j@k^REg:4r-", ((Document) (o_normalizesDiscordantTags_mg478052_mg480045__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480045__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494552() throws Exception {
        boolean __DSPOT_update_244613 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.updateMetaCharsetElement(__DSPOT_update_244613);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493578() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</5IV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152685() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DBIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_literalMutationString152680() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161144() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161581() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151908__7.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153050() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.updateMetaCharsetElement();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161163() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163028() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg163028__16 = o_normalizesDiscordantTags_add151389__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163028__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163028__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163028__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163028__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163028__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494340() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495383() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162340() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p>/p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p>/p&gt;</p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p>/p&gt;</p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151995() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389__4)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478919() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478919__13 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_mg478919__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494107() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494107__16 = o_normalizesDiscordantTags_add478050_add478482__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494107__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494107__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494107__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494107__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494107__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163261() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_135406 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg163261__18 = document.outputSettings(__DSPOT_outputSettings_135406);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163261__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163261__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163261__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163261__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163261__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161154() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_add152961() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            expected.getMessage();
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161171() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478680() throws Exception {
        boolean __DSPOT_attributeValue_239348 = false;
        String __DSPOT_attributeKey_239347 = "11tXY:u-l!Vpepe,rwi%";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg478680__16 = o_normalizesDiscordantTags_mg478059__9.attr(__DSPOT_attributeKey_239347, __DSPOT_attributeValue_239348);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478680__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478680__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478680__16)).isBlock());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059_mg478680__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478680__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478371() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "W", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478689() throws Exception {
        String __DSPOT_attributeValue_239350 = "`h;qgD+p7T7{_b.GU`@^";
        String __DSPOT_attributeKey_239349 = "p(i1,(bTIbd{&8!R_l,&";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Element o_normalizesDiscordantTags_mg478059_mg478689__16 = o_normalizesDiscordantTags_mg478059__9.attr(__DSPOT_attributeKey_239349, __DSPOT_attributeValue_239350);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478689__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478689__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478689__16)).isBlock());
        Assert.assertEquals("<Xw0u`kR6RR|=?5Kyelxx p(i1,(bTIbd{&8!R_l,&=\"`h;qgD+p7T7{_b.GU`@^\"></Xw0u`kR6RR|=?5Kyelxx>", ((Element) (o_normalizesDiscordantTags_mg478059_mg478689__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478059_mg478689__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495390() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495390__16 = o_normalizesDiscordantTags_add478050__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478543_mg495390__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162330() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<span>Hello \n <div>\n  there\n </div> <span>now</span></span>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478439() throws Exception {
        String __DSPOT_baseUri_239267 = "dcTQi{)qj0y6<Lh@iUY#";
        String __DSPOT_html_239266 = "cG[{{FL@+^m13!LdKNlY";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Document o_normalizesDiscordantTags_mg478059_mg478439__16 = parser.parseInput(__DSPOT_html_239266, __DSPOT_baseUri_239267);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478059_mg478439__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478059_mg478439__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478059_mg478439__16)).isBlock());
        Assert.assertEquals("cG[{{FL@+^m13!LdKNlY", ((Document) (o_normalizesDiscordantTags_mg478059_mg478439__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478059_mg478439__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493557() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161365() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151760() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        ((Document) (o_normalizesDiscordantTags_mg151405__10)).hasParent();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495327() throws Exception {
        ParseSettings __DSPOT_settings_244857 = new ParseSettings(true, true);
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Parser o_normalizesDiscordantTags_add478050_add478543_mg495327__18 = parser.settings(__DSPOT_settings_244857);
        Assert.assertTrue(((Parser) (o_normalizesDiscordantTags_add478050_add478543_mg495327__18)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478543_mg495327__18)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153097() throws Exception {
        String __DSPOT_value_132127 = "S<-Z+q0!AePje5Of^C79";
        String __DSPOT_key_132126 = "BH(DBI1V&eUP3$X|,_Iw";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153097__16 = o_normalizesDiscordantTags_mg151398__9.getElementsByAttributeValueNot(__DSPOT_key_132126, __DSPOT_value_132127);
        Assert.assertFalse(o_normalizesDiscordantTags_mg151398_mg153097__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493862() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).isTrackErrors();
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495562() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495562__16 = o_normalizesDiscordantTags_add478050_add478543__7.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495562__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495562__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495562__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495562__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495562__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493867() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482_add493867__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).hasParent());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_add493867__4)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163006() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163006__16 = o_normalizesDiscordantTags_add151389__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151844_mg163006__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478855() throws Exception {
        String __DSPOT_match_239403 = ")UNP>}5E2N${8ykB0qXL";
        String __DSPOT_key_239402 = "0qz#70v!3MIte9UFZ#sZ";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478855__16 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttributeValueContaining(__DSPOT_key_239402, __DSPOT_match_239403);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478855__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163249() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494360() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494360__16 = o_normalizesDiscordantTags_add478050__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478482_mg494360__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494127() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478482__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162398() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480232() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239807 = new Document.OutputSettings();
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Document o_normalizesDiscordantTags_mg478052_mg480232__17 = o_normalizesDiscordantTags_mg478052__10.outputSettings(__DSPOT_outputSettings_239807);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480232__17)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478052_mg480232__17)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480232__17)).isBlock());
        Assert.assertEquals("@=,bS&lt;]qV{@NZxZDB54p", ((Document) (o_normalizesDiscordantTags_mg478052_mg480232__17)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478052_mg480232__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_add152949() throws Exception {
        try {
            Parser o_normalizesDiscordantTagsnull151412_failAssert320_add152949__3 = Parser.xmlParser();
            Assert.assertNull(((Parser) (o_normalizesDiscordantTagsnull151412_failAssert320_add152949__3)).getErrors());
            Assert.assertFalse(((Parser) (o_normalizesDiscordantTagsnull151412_failAssert320_add152949__3)).isTrackErrors());
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163241() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163241__16 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151844_mg163241__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479726() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.body();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478074_failAssert1274_literalMutationString479215() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("", null, parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478074 should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495573() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478543_mg495573__16 = o_normalizesDiscordantTags_add478050_add478543__7.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478543_mg495573__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153002() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.head();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493850() throws Exception {
        Parser o_normalizesDiscordantTags_add478050_add478482_add493850__1 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493850__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493850__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493850__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493850__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163017() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163017__16 = o_normalizesDiscordantTags_add151389__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_add151844_mg163017__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153007() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.location();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162153() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("i;[{Vwg;7$?35mgwjA+<rS", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153009() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.nodeName();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478509() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050__4)).getAllElements();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478863() throws Exception {
        String __DSPOT_valueSuffix_239408 = "#(3![.)DerT$6&X;H!ql";
        String __DSPOT_key_239407 = ":^jL R6e>P8$t3A3R[[_";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478863__16 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttributeValueEnding(__DSPOT_key_239407, __DSPOT_valueSuffix_239408);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478863__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493857() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        ((Parser) (parser)).getErrors();
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478909() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478909__13 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_mg478909__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494116() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494116__16 = o_normalizesDiscordantTags_add478050_add478482__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_add478482_mg494116__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479717() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            parser.settings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478904() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_add152956() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480241() throws Exception {
        boolean __DSPOT_update_239810 = false;
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        o_normalizesDiscordantTags_mg478052__10.updateMetaCharsetElement(__DSPOT_update_239810);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161106() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).getErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_add152953() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Jsoup.parse(null, "", parser);
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153072() throws Exception {
        String __DSPOT_value_132114 = "`U;YU>;|6vH7fl!,<spz";
        String __DSPOT_key_132113 = "5$Blc,<tq5/2(3P](5,6";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153072__16 = o_normalizesDiscordantTags_mg151398__9.getElementsByAttributeValue(__DSPOT_key_132113, __DSPOT_value_132114);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153072__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495342() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_literalMutationString478189() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153013() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.normalise();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151742() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        ((Document) (o_normalizesDiscordantTags_mg151405__10)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495587() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_244919 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478543_mg495587__18 = o_normalizesDiscordantTags_add478050_add478543__7.outputSettings(__DSPOT_outputSettings_244919);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495587__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495587__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495587__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495587__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478543_mg495587__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153014() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.outerHtml();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153076() throws Exception {
        String __DSPOT_match_132119 = "2ueX&n*1Uq8afveEouU]";
        String __DSPOT_key_132118 = "|QAd*J<5pmq_e}`YW`3}";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153076__16 = o_normalizesDiscordantTags_mg151398__9.getElementsByAttributeValueContaining(__DSPOT_key_132118, __DSPOT_match_132119);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153076__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151745() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        ((Document) (o_normalizesDiscordantTags_mg151405__10)).getAllElements();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478516() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050__4)).hasText();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493843() throws Exception {
        Parser o_normalizesDiscordantTags_add478050_add478482_add493843__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493843__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493843__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493843__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add478050_add478482_add493843__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_mg495583() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478543__7.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg152303() throws Exception {
        boolean __DSPOT_update_131898 = true;
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        o_normalizesDiscordantTags_mg151405__10.updateMetaCharsetElement(__DSPOT_update_131898);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151412_failAssert320_mg153018() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151412 should have thrown NullPointerException");
            document.outputSettings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494386() throws Exception {
        boolean __DSPOT_update_244529 = false;
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.updateMetaCharsetElement(__DSPOT_update_244529);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_literalMutationString493599() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<divtest</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160694() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("d.uyVV0@BP%ufXRep(kwXV", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151795() throws Exception {
        Parser o_normalizesDiscordantTags_add151389_add151795__1 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151795__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151795__1)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_add151389_add151795__1)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_add151389_add151795__1)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162143() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV>p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162134() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<diDv>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163221() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163221__16 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_add151844_mg163221__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479743() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.location();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161113() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).isTrackErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161393() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161393__16 = o_normalizesDiscordantTags_add151389__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151908_mg161393__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479746() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.nodeName();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153084() throws Exception {
        String __DSPOT_valueSuffix_132122 = "D!,:GlAX>+pEgp3l8r7b";
        String __DSPOT_key_132121 = "a/;bI!EA&ZY5a2u<Rdg ";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153084__16 = o_normalizesDiscordantTags_mg151398__9.getElementsByAttributeValueEnding(__DSPOT_key_132121, __DSPOT_valueSuffix_132122);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153084__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151750() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        ((Document) (o_normalizesDiscordantTags_mg151405__10)).hasText();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_add151756() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        ((Document) (o_normalizesDiscordantTags_mg151405__10)).toString();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478527() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050__4)).toString();
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478881() throws Exception {
        String __DSPOT_value_239414 = "^v[g1,/HkH@nRp>-T14k";
        String __DSPOT_key_239413 = "B.AtIaHcYm(+yf!Z!]%;";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478881__16 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttributeValueNot(__DSPOT_key_239413, __DSPOT_value_239414);
        Assert.assertFalse(o_normalizesDiscordantTags_mg478059_mg478881__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_literalMutationString160684() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162374() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>teFt</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n teFt\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n teFt\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494138() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_244420 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_add478482_mg494138__18 = o_normalizesDiscordantTags_add478050_add478482__4.outputSettings(__DSPOT_outputSettings_244420);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494138__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494138__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494138__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494138__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_add478482_mg494138__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_literalMutationString162125() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</.IV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479739() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.head();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163230() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151844_mg163230__16 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163230__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163230__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163230__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163230__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151844_mg163230__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494379() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        boolean o_normalizesDiscordantTags_add478050_add478482_mg494379__16 = o_normalizesDiscordantTags_add478050__4.updateMetaCharsetElement();
        Assert.assertFalse(o_normalizesDiscordantTags_add478050_add478482_mg494379__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479731() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.charset();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_add161125() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479734() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.clone();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478773() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478773__13 = o_normalizesDiscordantTags_add478050__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050_mg478773__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478770() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478770__13 = o_normalizesDiscordantTags_add478050__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478770__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478770__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478770__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add478050_mg478770__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478770__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479760() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.outputSettings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478775() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494162() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050_add478482__4.quirksMode();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478063_mg478899() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239420 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478063__6 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478063__6);

        Document o_normalizesDiscordantTags_mg478063__8 = document.normalise();
        Document o_normalizesDiscordantTags_mg478063_mg478899__15 = o_normalizesDiscordantTags_mg478063__8.outputSettings(__DSPOT_outputSettings_239420);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478063_mg478899__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_mg478063_mg478899__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478063_mg478899__15)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_mg478063_mg478899__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_mg478063_mg478899__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478063__6);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152318() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_mg152318__13 = document.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152318__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_mg152318__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152318__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_mg152318__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_mg152318__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_add153400() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser o_normalizesDiscordantTags_mg151391_add153400__3 = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg151391_add153400__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151391_add153400__3)).isTrackErrors());
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        Assert.assertNull(((Parser) (o_normalizesDiscordantTags_mg151391_add153400__3)).getErrors());
        Assert.assertFalse(((Parser) (o_normalizesDiscordantTags_mg151391_add153400__3)).isTrackErrors());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478783() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239380 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478783__15 = o_normalizesDiscordantTags_add478050__4.outputSettings(__DSPOT_outputSettings_239380);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478783__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478783__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478783__15)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_mg478783__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478783__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493890() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).hasText();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479751() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.normalise();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493895() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).isBlock();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151398_mg153067() throws Exception {
        String __DSPOT_keyPrefix_132112 = "wRc=ISp|v2#EOBsPDLoC";
        String __DSPOT_tagName_131663 = "D^HU SUX{h>]a9y?y?)C";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151398__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);

        Element o_normalizesDiscordantTags_mg151398__9 = document.createElement(__DSPOT_tagName_131663);
        Elements o_normalizesDiscordantTags_mg151398_mg153067__15 = o_normalizesDiscordantTags_mg151398__9.getElementsByAttributeStarting(__DSPOT_keyPrefix_132112);
        Assert.assertTrue(o_normalizesDiscordantTags_mg151398_mg153067__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151398__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg163213() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg163213__16 = document.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151844_mg163213__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480207() throws Exception {
        boolean __DSPOT_update_239803 = false;
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        document.updateMetaCharsetElement(__DSPOT_update_239803);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161741() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161741__16 = document.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_add151908_mg161741__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479754() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.outerHtml();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasParent());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908__7)).hasParent());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_mg152300() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.body();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479783() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.quirksMode();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493882() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).getAllElements();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478759() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478759__13 = o_normalizesDiscordantTags_add478050__4.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add478050_mg478759__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_mg494182() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_add478482_mg494182__16 = o_normalizesDiscordantTags_add478050_add478482__4.title();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_add478482_mg494182__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478824() throws Exception {
        String __DSPOT_key_239392 = "Ya]ZkOpONwYfP y,M4-[";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478824__15 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttribute(__DSPOT_key_239392);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478824__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161754() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161754__16 = document.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161754__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161754__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161754__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161754__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161754__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161511() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161511__16 = o_normalizesDiscordantTags_add151389_add151908__7.nodeName();
        Assert.assertEquals("#document", o_normalizesDiscordantTags_add151389_add151908_mg161511__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151916() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389_add151916__9 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151916__9);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151916__9);
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478482_add493875() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050_add478482__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        ((Document) (o_normalizesDiscordantTags_add478050_add478482__4)).getAllElements().isEmpty();
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478843() throws Exception {
        String __DSPOT_value_239398 = "T9<]Jzs#9xiI}V9Lx}Hf";
        String __DSPOT_key_239397 = "$5?wW!$CakcUlO@r@W!|";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478843__16 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttributeValue(__DSPOT_key_239397, __DSPOT_value_239398);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478843__16.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478059_mg478836() throws Exception {
        String __DSPOT_keyPrefix_239395 = "T:8C96f#]Y5i)W5TU&XK";
        String __DSPOT_tagName_239213 = "Xw0u`kR6RR|=?5Kyelxx";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478059__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);

        Element o_normalizesDiscordantTags_mg478059__9 = document.createElement(__DSPOT_tagName_239213);
        Elements o_normalizesDiscordantTags_mg478059_mg478836__15 = o_normalizesDiscordantTags_mg478059__9.getElementsByAttributeStarting(__DSPOT_keyPrefix_239395);
        Assert.assertTrue(o_normalizesDiscordantTags_mg478059_mg478836__15.isEmpty());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478059__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161524() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161524__16 = o_normalizesDiscordantTags_add151389_add151908__7.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161524__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161524__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161524__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161524__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161524__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151925() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).isTrackErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161765() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161765__16 = document.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151908_mg161765__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg478052_mg480220() throws Exception {
        String __DSPOT_tagName_239806 = "BhOOlaU,]EZ,4t.Z]k>=";
        String __DSPOT_baseUri_239210 = ":KSR*< Dya*>3(0[jLmN";
        String __DSPOT_html_239209 = "@=,bS<]qV{@NZxZDB54p";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg478052__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);

        Document o_normalizesDiscordantTags_mg478052__10 = parser.parseInput(__DSPOT_html_239209, __DSPOT_baseUri_239210);
        Element o_normalizesDiscordantTags_mg478052_mg480220__16 = o_normalizesDiscordantTags_mg478052__10.createElement(__DSPOT_tagName_239806);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480220__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480220__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480220__16)).isBlock());
        Assert.assertEquals("<BhOOlaU,]EZ,4t.Z]k>=></BhOOlaU,]EZ,4t.Z]k>=>", ((Element) (o_normalizesDiscordantTags_mg478052_mg480220__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg478052_mg480220__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg478052__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478738() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        o_normalizesDiscordantTags_add478050__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg152120() throws Exception {
        boolean __DSPOT_update_131831 = true;
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        document.updateMetaCharsetElement(__DSPOT_update_131831);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478975() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_239449 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478975__15 = document.outputSettings(__DSPOT_outputSettings_239449);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478975__15)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478975__15)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478975__15)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_mg478975__15)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478975__15)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494879() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("idiv>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151391_add153448() throws Exception {
        String __DSPOT_baseUri_131660 = ">IY#$`#!)vib+Mepaa@K";
        String __DSPOT_html_131659 = "KanebD?(_{nZJiv{kWqs";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151391__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);

        Document o_normalizesDiscordantTags_mg151391__10 = parser.parseInput(__DSPOT_html_131659, __DSPOT_baseUri_131660);
        ((Document) (o_normalizesDiscordantTags_mg151391__10)).getAllElements().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151391__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161777() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        document.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162794() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151844_mg162794__16 = o_normalizesDiscordantTags_add151389_add151844__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add151389_add151844_mg162794__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161533() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161533__16 = o_normalizesDiscordantTags_add151389_add151908__7.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151908_mg161533__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151939() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).getErrors().isEmpty();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494870() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull478073_failAssert1273_mg479790() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse(null, "", parser);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull478073 should have thrown NullPointerException");
            document.title();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_add478543_literalMutationString494890() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add478050_add478543__7 = Jsoup.parse("<div3>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478748() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        String o_normalizesDiscordantTags_add478050_mg478748__13 = o_normalizesDiscordantTags_add478050__4.location();
        Assert.assertEquals("", o_normalizesDiscordantTags_add478050_mg478748__13);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161789() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_134999 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161789__18 = document.outputSettings(__DSPOT_outputSettings_134999);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161789__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161789__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161789__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161789__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161789__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161303() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161303__16 = o_normalizesDiscordantTags_add151389__4.normalise();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161303__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161303__16)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161303__16)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>\n<html>\n <head></head>\n <body></body>\n</html>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161303__16)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161303__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161543() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151908__7.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152757() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            parser.settings();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151950() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Parser) (parser)).getErrors();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162771() throws Exception {
        String __DSPOT_tagName_135278 = "M%4z*w)_z]uc}=e.dOK@";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Element o_normalizesDiscordantTags_add151389_add151844_mg162771__17 = o_normalizesDiscordantTags_add151389_add151844__4.createElement(__DSPOT_tagName_135278);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162771__17)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162771__17)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162771__17)).isBlock());
        Assert.assertEquals("<M%4z*w)_z]uc}=e.dOK@></M%4z*w)_z]uc}=e.dOK@>", ((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162771__17)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add151389_add151844_mg162771__17)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161312() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        String o_normalizesDiscordantTags_add151389_add151908_mg161312__16 = o_normalizesDiscordantTags_add151389__4.outerHtml();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389_add151908_mg161312__16);
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161553() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_134890 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        Document o_normalizesDiscordantTags_add151389_add151908_mg161553__18 = o_normalizesDiscordantTags_add151389_add151908__7.outputSettings(__DSPOT_outputSettings_134890);
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161553__18)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161553__18)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161553__18)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161553__18)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add151389_add151908_mg161553__18)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478719() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Document o_normalizesDiscordantTags_add478050_mg478719__13 = o_normalizesDiscordantTags_add478050__4.clone();
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478719__13)).getAllElements().isEmpty());
        Assert.assertTrue(((Document) (o_normalizesDiscordantTags_add478050_mg478719__13)).hasText());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478719__13)).isBlock());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", ((Document) (o_normalizesDiscordantTags_add478050_mg478719__13)).toString());
        Assert.assertFalse(((Document) (o_normalizesDiscordantTags_add478050_mg478719__13)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_mg151405_mg152159() throws Exception {
        String __DSPOT_tagName_131839 = "$#PYS z,LIz#[F_!D,Pn";
        Document.OutputSettings __DSPOT_outputSettings_131664 = new Document.OutputSettings();
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_mg151405__8 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);

        Document o_normalizesDiscordantTags_mg151405__10 = document.outputSettings(__DSPOT_outputSettings_131664);
        Element o_normalizesDiscordantTags_mg151405_mg152159__16 = o_normalizesDiscordantTags_mg151405__10.createElement(__DSPOT_tagName_131839);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg152159__16)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg152159__16)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg152159__16)).isBlock());
        Assert.assertEquals("<$#PYS z,LIz#[F_!D,Pn></$#PYS z,LIz#[F_!D,Pn>", ((Element) (o_normalizesDiscordantTags_mg151405_mg152159__16)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_mg151405_mg152159__16)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_mg151405__8);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151844_mg162785() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389_add151844__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389_add151844__4.head();
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478726() throws Exception {
        String __DSPOT_tagName_239364 = "(f+Ocn[,yuW_@uG(3(I}";
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        Element o_normalizesDiscordantTags_add478050_mg478726__14 = o_normalizesDiscordantTags_add478050__4.createElement(__DSPOT_tagName_239364);
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478726__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478726__14)).hasText());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478726__14)).isBlock());
        Assert.assertEquals("<(f+Ocn[,yuW_@uG(3(I}></(f+Ocn[,yuW_@uG(3(I}>", ((Element) (o_normalizesDiscordantTags_add478050_mg478726__14)).toString());
        Assert.assertFalse(((Element) (o_normalizesDiscordantTags_add478050_mg478726__14)).hasParent());
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add478050_mg478962() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add478050__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add478050__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);

        document.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add478050__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151963() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        ((Document) (o_normalizesDiscordantTags_add151389__4)).isBlock();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152774() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.body();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTags_add151389_add151908_mg161321() throws Exception {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Assert.assertNull(((Parser) (parser)).getErrors());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Document o_normalizesDiscordantTags_add151389__4 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document o_normalizesDiscordantTags_add151389_add151908__7 = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        Document document = Jsoup.parse("<div>test</DIV><p></p>", "", parser);
        String o_normalizesDiscordantTags_add151389__7 = document.html();
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);

        o_normalizesDiscordantTags_add151389__4.outputSettings();
        Assert.assertTrue(((Parser) (parser)).getErrors().isEmpty());
        Assert.assertFalse(((Parser) (parser)).isTrackErrors());
        Assert.assertEquals("<div>\n test\n</div>\n<p></p>", o_normalizesDiscordantTags_add151389__7);
    }

    @Test(timeout = 10000)
    public void normalizesDiscordantTagsnull151414_failAssert322_mg152777() throws Exception {
        try {
            Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
            Assert.assertNull(((Parser) (parser)).getErrors());
            Assert.assertFalse(((Parser) (parser)).isTrackErrors());
            Document document = Jsoup.parse("<div>test</DIV><p></p>", "", null);
            document.html();

            org.junit.Assert.fail("normalizesDiscordantTagsnull151414 should have thrown NullPointerException");
            document.charset();
        } catch (NullPointerException expected) {
        }
    }

    @Test(timeout = 10000)
    public void roundTripsCdata_add500096() throws Exception {
        String xml = "<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>";
        Assert.assertEquals("<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>", xml);
        Parser o_roundTripsCdata_add500096__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_roundTripsCdata_add500096__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_roundTripsCdata_add500096__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        Element div = doc.getElementById("1");
        String o_roundTripsCdata_add500096__8 = div.text();
        Assert.assertEquals("<html>\n <foo><&amp;", o_roundTripsCdata_add500096__8);
        int o_roundTripsCdata_add500096__9 = div.children().size();
        Assert.assertEquals(0, ((int) (o_roundTripsCdata_add500096__9)));
        int o_roundTripsCdata_add500096__11 = div.childNodeSize();
        Assert.assertEquals(1, ((int) (o_roundTripsCdata_add500096__11)));
        String o_roundTripsCdata_add500096__12 = div.outerHtml();
        Assert.assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", o_roundTripsCdata_add500096__12);
        CDataNode cdata = ((CDataNode) (div.textNodes().get(0)));
        String o_roundTripsCdata_add500096__16 = cdata.text();
        Assert.assertEquals("\n<html>\n <foo><&amp;", o_roundTripsCdata_add500096__16);
        Assert.assertEquals("<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>", xml);
        Assert.assertFalse(((Parser) (o_roundTripsCdata_add500096__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_roundTripsCdata_add500096__2)).getErrors());
        Assert.assertEquals("<html>\n <foo><&amp;", o_roundTripsCdata_add500096__8);
        Assert.assertEquals(0, ((int) (o_roundTripsCdata_add500096__9)));
        Assert.assertEquals(1, ((int) (o_roundTripsCdata_add500096__11)));
        Assert.assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", o_roundTripsCdata_add500096__12);
    }

    @Test(timeout = 10000)
    public void roundTripsCdata_add409593() throws Exception {
        String xml = "<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>";
        Assert.assertEquals("<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>", xml);
        Parser o_roundTripsCdata_add409593__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_roundTripsCdata_add409593__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_roundTripsCdata_add409593__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        Element div = doc.getElementById("1");
        String o_roundTripsCdata_add409593__8 = div.text();
        Assert.assertEquals("<html>\n <foo><&amp;", o_roundTripsCdata_add409593__8);
        int o_roundTripsCdata_add409593__9 = div.children().size();
        Assert.assertEquals(0, ((int) (o_roundTripsCdata_add409593__9)));
        int o_roundTripsCdata_add409593__11 = div.childNodeSize();
        Assert.assertEquals(1, ((int) (o_roundTripsCdata_add409593__11)));
        String o_roundTripsCdata_add409593__12 = div.outerHtml();
        Assert.assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", o_roundTripsCdata_add409593__12);
        CDataNode cdata = ((CDataNode) (div.textNodes().get(0)));
        String o_roundTripsCdata_add409593__16 = cdata.text();
        Assert.assertEquals("\n<html>\n <foo><&amp;", o_roundTripsCdata_add409593__16);
        Assert.assertEquals("<div id=1><![CDATA[\n<html>\n <foo><&amp;]]></div>", xml);
        Assert.assertFalse(((Parser) (o_roundTripsCdata_add409593__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_roundTripsCdata_add409593__2)).getErrors());
        Assert.assertEquals("<html>\n <foo><&amp;", o_roundTripsCdata_add409593__8);
        Assert.assertEquals(0, ((int) (o_roundTripsCdata_add409593__9)));
        Assert.assertEquals(1, ((int) (o_roundTripsCdata_add409593__11)));
        Assert.assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", o_roundTripsCdata_add409593__12);
    }

    @Test(timeout = 10000)
    public void cdataPreservesWhiteSpace_add274676_add276544() throws Exception {
        String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Parser o_cdataPreservesWhiteSpace_add274676_add276544__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274676_add276544__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274676_add276544__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_cdataPreservesWhiteSpace_add274676__5 = doc.outerHtml();
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274676__5);
        Element o_cdataPreservesWhiteSpace_add274676__6 = doc.selectFirst("script");
        String o_cdataPreservesWhiteSpace_add274676__7 = doc.selectFirst("script").text();
        Assert.assertEquals("//\n\n  foo();\n//", o_cdataPreservesWhiteSpace_add274676__7);
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274676_add276544__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274676_add276544__2)).getErrors());
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274676__5);
    }

    @Test(timeout = 10000)
    public void cdataPreservesWhiteSpace_add274676_mg276812() throws Exception {
        String __DSPOT_html_163840 = "bH^<ej6A&=2/uK21G:J;";
        String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_cdataPreservesWhiteSpace_add274676__5 = doc.outerHtml();
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274676__5);
        Element o_cdataPreservesWhiteSpace_add274676__6 = doc.selectFirst("script");
        String o_cdataPreservesWhiteSpace_add274676__7 = doc.selectFirst("script").text();
        Assert.assertEquals("//\n\n  foo();\n//", o_cdataPreservesWhiteSpace_add274676__7);
        Element o_cdataPreservesWhiteSpace_add274676_mg276812__16 = o_cdataPreservesWhiteSpace_add274676__6.append(__DSPOT_html_163840);
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]>bH^&lt;ej6A&amp;=2/uK21G:J;</script>", ((Element) (o_cdataPreservesWhiteSpace_add274676_mg276812__16)).toString());
        Assert.assertFalse(((Element) (o_cdataPreservesWhiteSpace_add274676_mg276812__16)).getAllElements().isEmpty());
        Assert.assertTrue(((Element) (o_cdataPreservesWhiteSpace_add274676_mg276812__16)).hasText());
        Assert.assertTrue(((Element) (o_cdataPreservesWhiteSpace_add274676_mg276812__16)).isBlock());
        Assert.assertTrue(((Element) (o_cdataPreservesWhiteSpace_add274676_mg276812__16)).hasParent());
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274676__5);
        Assert.assertEquals("//\n\n  foo();\n//", o_cdataPreservesWhiteSpace_add274676__7);
    }

    @Test(timeout = 10000)
    public void cdataPreservesWhiteSpace_add274672_add275678() throws Exception {
        String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Parser o_cdataPreservesWhiteSpace_add274672_add275678__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275678__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275678__2)).getErrors());
        Document o_cdataPreservesWhiteSpace_add274672__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_cdataPreservesWhiteSpace_add274672__7 = doc.outerHtml();
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274672__7);
        String o_cdataPreservesWhiteSpace_add274672__8 = doc.selectFirst("script").text();
        Assert.assertEquals("//\n\n  foo();\n//", o_cdataPreservesWhiteSpace_add274672__8);
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275678__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275678__2)).getErrors());
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274672__7);
    }

    @Test(timeout = 10000)
    public void cdataPreservesWhiteSpace_add274672_add275713() throws Exception {
        String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Document o_cdataPreservesWhiteSpace_add274672__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_cdataPreservesWhiteSpace_add274672_add275713__6 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275713__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275713__6)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_cdataPreservesWhiteSpace_add274672__7 = doc.outerHtml();
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274672__7);
        String o_cdataPreservesWhiteSpace_add274672__8 = doc.selectFirst("script").text();
        Assert.assertEquals("//\n\n  foo();\n//", o_cdataPreservesWhiteSpace_add274672__8);
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275713__6)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274672_add275713__6)).getErrors());
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274672__7);
    }

    @Test(timeout = 10000)
    public void cdataPreservesWhiteSpace_add274673() throws Exception {
        String xml = "<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>";
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Parser o_cdataPreservesWhiteSpace_add274673__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274673__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274673__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_cdataPreservesWhiteSpace_add274673__6 = doc.outerHtml();
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274673__6);
        String o_cdataPreservesWhiteSpace_add274673__7 = doc.selectFirst("script").text();
        Assert.assertEquals("//\n\n  foo();\n//", o_cdataPreservesWhiteSpace_add274673__7);
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", xml);
        Assert.assertFalse(((Parser) (o_cdataPreservesWhiteSpace_add274673__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_cdataPreservesWhiteSpace_add274673__2)).getErrors());
        Assert.assertEquals("<script type=\"text/javascript\">//<![CDATA[\n\n  foo();\n//]]></script>", o_cdataPreservesWhiteSpace_add274673__6);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360533_add361652_add381572() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_192694 = new Document.OutputSettings();
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Parser o_handlesDodgyXmlDecl_mg360533_add361652_add381572__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361652_add381572__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361652_add381572__4)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360533__7 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
        Document o_handlesDodgyXmlDecl_mg360533_add361652__11 = doc.outputSettings(__DSPOT_outputSettings_192694);
        Document o_handlesDodgyXmlDecl_mg360533__9 = doc.outputSettings(__DSPOT_outputSettings_192694);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361652_add381572__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361652_add381572__4)).getErrors());
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_add360519_add361295() throws Exception {
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Document o_handlesDodgyXmlDecl_add360519__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_handlesDodgyXmlDecl_add360519_add361295__6 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_add360519_add361295__6)).getErrors());
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_add360519_add361295__6)).isTrackErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_add360519__7 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_add360519__7);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_add360519_add361295__6)).getErrors());
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_add360519_add361295__6)).isTrackErrors());
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_add360519_add361258() throws Exception {
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Parser o_handlesDodgyXmlDecl_add360519_add361258__2 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_add360519_add361258__2)).getErrors());
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_add360519_add361258__2)).isTrackErrors());
        Document o_handlesDodgyXmlDecl_add360519__2 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_add360519__7 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_add360519__7);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_add360519_add361258__2)).getErrors());
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_add360519_add361258__2)).isTrackErrors());
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360526_mg362349() throws Exception {
        String __DSPOT_tagName_193012 = "/*]LS$Q)Lq[}!)PL!(&a";
        String __DSPOT_tagName_192693 = "6 r([=*[0nRYPtX[Of8W";
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360526__6 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
        Element o_handlesDodgyXmlDecl_mg360526__8 = doc.createElement(__DSPOT_tagName_192693);
        Element o_handlesDodgyXmlDecl_mg360526_mg362349__14 = o_handlesDodgyXmlDecl_mg360526__8.prependElement(__DSPOT_tagName_193012);
        Assert.assertEquals("</*]LS$Q)Lq[}!)PL!(&a><//*]LS$Q)Lq[}!)PL!(&a>", ((Element) (o_handlesDodgyXmlDecl_mg360526_mg362349__14)).toString());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362349__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362349__14)).hasText());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362349__14)).isBlock());
        Assert.assertTrue(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362349__14)).hasParent());
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360533_add361627_add383747() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_192694 = new Document.OutputSettings();
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Document o_handlesDodgyXmlDecl_mg360533_add361627__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Parser o_handlesDodgyXmlDecl_mg360533_add361627_add383747__8 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383747__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383747__8)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360533__7 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
        Document o_handlesDodgyXmlDecl_mg360533__9 = doc.outputSettings(__DSPOT_outputSettings_192694);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383747__8)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383747__8)).getErrors());
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360526_mg362401() throws Exception {
        String __DSPOT_tagName_193023 = "n-Cv@`INLMD_pd}qjPyz";
        String __DSPOT_tagName_192693 = "6 r([=*[0nRYPtX[Of8W";
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360526__6 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
        Element o_handlesDodgyXmlDecl_mg360526__8 = doc.createElement(__DSPOT_tagName_192693);
        Element o_handlesDodgyXmlDecl_mg360526_mg362401__14 = o_handlesDodgyXmlDecl_mg360526__8.tagName(__DSPOT_tagName_193023);
        Assert.assertEquals("<n-Cv@`INLMD_pd}qjPyz></n-Cv@`INLMD_pd}qjPyz>", ((Element) (o_handlesDodgyXmlDecl_mg360526_mg362401__14)).toString());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362401__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362401__14)).hasText());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362401__14)).isBlock());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362401__14)).hasParent());
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_add360520() throws Exception {
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Parser o_handlesDodgyXmlDecl_add360520__2 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_add360520__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_add360520__2)).getErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_add360520__6 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_add360520__6);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_add360520__2)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_add360520__2)).getErrors());
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360533_add361627_add383705() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_192694 = new Document.OutputSettings();
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Parser o_handlesDodgyXmlDecl_mg360533_add361627_add383705__4 = Parser.xmlParser();
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383705__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383705__4)).getErrors());
        Document o_handlesDodgyXmlDecl_mg360533_add361627__4 = Jsoup.parse(xml, "", Parser.xmlParser());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360533__7 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
        Document o_handlesDodgyXmlDecl_mg360533__9 = doc.outputSettings(__DSPOT_outputSettings_192694);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383705__4)).isTrackErrors());
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361627_add383705__4)).getErrors());
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360526_mg362039() throws Exception {
        String __DSPOT_tagName_192940 = "*_a<n&x7gfC/H!efXNp;";
        String __DSPOT_tagName_192693 = "6 r([=*[0nRYPtX[Of8W";
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360526__6 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
        Element o_handlesDodgyXmlDecl_mg360526__8 = doc.createElement(__DSPOT_tagName_192693);
        Element o_handlesDodgyXmlDecl_mg360526_mg362039__14 = o_handlesDodgyXmlDecl_mg360526__8.appendElement(__DSPOT_tagName_192940);
        Assert.assertEquals("<*_a<n&x7gfC/H!efXNp;></*_a<n&x7gfC/H!efXNp;>", ((Element) (o_handlesDodgyXmlDecl_mg360526_mg362039__14)).toString());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362039__14)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362039__14)).hasText());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362039__14)).isBlock());
        Assert.assertTrue(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362039__14)).hasParent());
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360526_mg362050() throws Exception {
        String __DSPOT_attributeValue_192946 = "u?0%Y@?!#}3p|;/Cd8[/";
        String __DSPOT_attributeKey_192945 = "=3g*8X-7e}Puqp1HMX;D";
        String __DSPOT_tagName_192693 = "6 r([=*[0nRYPtX[Of8W";
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360526__6 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
        Element o_handlesDodgyXmlDecl_mg360526__8 = doc.createElement(__DSPOT_tagName_192693);
        Element o_handlesDodgyXmlDecl_mg360526_mg362050__15 = o_handlesDodgyXmlDecl_mg360526__8.attr(__DSPOT_attributeKey_192945, __DSPOT_attributeValue_192946);
        Assert.assertEquals("<6 r([=*[0nRYPtX[Of8W =3g*8X-7e}Puqp1HMX;D=\"u?0%Y@?!#}3p|;/Cd8[/\"></6 r([=*[0nRYPtX[Of8W>", ((Element) (o_handlesDodgyXmlDecl_mg360526_mg362050__15)).toString());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362050__15)).getAllElements().isEmpty());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362050__15)).hasText());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362050__15)).isBlock());
        Assert.assertFalse(((Element) (o_handlesDodgyXmlDecl_mg360526_mg362050__15)).hasParent());
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360526__6);
    }

    @Test(timeout = 10000)
    public void handlesDodgyXmlDecl_mg360533_add361633() throws Exception {
        Document.OutputSettings __DSPOT_outputSettings_192694 = new Document.OutputSettings();
        String xml = "<?xml version='1.0'><val>One</val>";
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Parser o_handlesDodgyXmlDecl_mg360533_add361633__4 = Parser.xmlParser();
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361633__4)).getErrors());
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361633__4)).isTrackErrors());
        Document doc = Jsoup.parse(xml, "", Parser.xmlParser());
        String o_handlesDodgyXmlDecl_mg360533__7 = doc.select("val").text();
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
        Document o_handlesDodgyXmlDecl_mg360533__9 = doc.outputSettings(__DSPOT_outputSettings_192694);
        Assert.assertEquals("<?xml version=\'1.0\'><val>One</val>", xml);
        Assert.assertNull(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361633__4)).getErrors());
        Assert.assertFalse(((Parser) (o_handlesDodgyXmlDecl_mg360533_add361633__4)).isTrackErrors());
        Assert.assertEquals("One", o_handlesDodgyXmlDecl_mg360533__7);
    }
}

