diff --git a/CHANGES b/CHANGES
index 4c57038..ffa0141 100644
--- a/CHANGES
+++ b/CHANGES
@@ -17,11 +17,6 @@ jsoup changelog
   * Improvement: if the document's input character does not support encoding, flip it to one that does.
     <https://github.com/jhy/jsoup/issues/1007>
 
-  * Improvement: if a start tag is missing a > and a new tag is seen with a <, treat that as a new tag. (This differs
-    from the HTML5 spec, which would make at attribute with a name beginning with <, but in practice this impacts too
-    many pages.
-    <https://github.com/jhy/jsoup/issues/797>
-
 *** Release 1.11.3 [2018-Apr-15]
   * Improvement: CDATA sections are now treated as whitespace preserving (regardless of the containing element), and are
     round-tripped into output HTML.
diff --git a/src/main/java/org/jsoup/parser/CharacterReader.java b/src/main/java/org/jsoup/parser/CharacterReader.java
index 6993524..b3b82e9 100644
--- a/src/main/java/org/jsoup/parser/CharacterReader.java
+++ b/src/main/java/org/jsoup/parser/CharacterReader.java
@@ -243,7 +243,6 @@ public final class CharacterReader {
 
     String consumeTagName() {
         // '\t', '\n', '\r', '\f', ' ', '/', '>', nullChar
-        // NOTE: out of spec, added '<' to fix common author bugs
         bufferUp();
         final int start = bufPos;
         final int remaining = bufLength;
@@ -251,7 +250,7 @@ public final class CharacterReader {
 
         while (bufPos < remaining) {
             final char c = val[bufPos];
-            if (c == '\t'|| c ==  '\n'|| c ==  '\r'|| c ==  '\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c == '<' || c ==  TokeniserState.nullChar)
+            if (c == '\t'|| c ==  '\n'|| c ==  '\r'|| c ==  '\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)
                 break;
             bufPos++;
         }
diff --git a/src/main/java/org/jsoup/parser/TokeniserState.java b/src/main/java/org/jsoup/parser/TokeniserState.java
index 95b326c..7d40425 100644
--- a/src/main/java/org/jsoup/parser/TokeniserState.java
+++ b/src/main/java/org/jsoup/parser/TokeniserState.java
@@ -158,10 +158,6 @@ enum TokeniserState {
                 case '/':
                     t.transition(SelfClosingStartTag);
                     break;
-                case '<': // NOTE: out of spec, but clear author intent
-                    t.error(this);
-                    r.unconsume();
-                    // intended fall through to next >
                 case '>':
                     t.emitTagPending();
                     t.transition(Data);
@@ -564,10 +560,6 @@ enum TokeniserState {
                 case '/':
                     t.transition(SelfClosingStartTag);
                     break;
-                case '<': // NOTE: out of spec, but clear (spec has this as a part of the attribute name)
-                    t.error(this);
-                    r.unconsume();
-                    // intended fall through as if >
                 case '>':
                     t.emitTagPending();
                     t.transition(Data);
@@ -584,6 +576,7 @@ enum TokeniserState {
                     break;
                 case '"':
                 case '\'':
+                case '<':
                 case '=':
                     t.error(this);
                     t.tagPending.newAttribute();
diff --git a/src/test/java/org/jsoup/parser/HtmlParserTest.java b/src/test/java/org/jsoup/parser/HtmlParserTest.java
index e7d689e..33766b0 100644
--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java
+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java
@@ -57,13 +57,10 @@ public class HtmlParserTest {
 
     @Test public void parsesQuiteRoughAttributes() {
         String html = "<p =a>One<a <p>Something</p>Else";
-        // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
+        // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
         Document doc = Jsoup.parse(html);
-
-        // NOTE: per spec this should be the test case. but impacts too many ppl
-        // assertEquals("<p =a>One<a <p>Something</a></p>\n<a <p>Else</a>", doc.body().html());
-
-        assertEquals("<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<p =a>One<a <p>Something</a></p>\n" +
+            "<a <p>Else</a>", doc.body().html());
 
         doc = Jsoup.parse("<p .....>");
         assertEquals("<p .....></p>", doc.body().html());
diff --git a/src/test/java/org/jsoup/parser/TokeniserStateTest.java b/src/test/java/org/jsoup/parser/TokeniserStateTest.java
index b50965e..28bd552 100644
--- a/src/test/java/org/jsoup/parser/TokeniserStateTest.java
+++ b/src/test/java/org/jsoup/parser/TokeniserStateTest.java
@@ -1,7 +1,8 @@
 package org.jsoup.parser;
 
+import static org.junit.Assert.*;
+
 import org.jsoup.Jsoup;
-import org.jsoup.TextUtil;
 import org.jsoup.nodes.Comment;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
@@ -11,9 +12,6 @@ import org.junit.Test;
 
 import java.util.Arrays;
 
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-
 public class TokeniserStateTest {
 
     final char[] whiteSpace = { '\t', '\n', '\r', '\f', ' ' };
@@ -199,11 +197,4 @@ public class TokeniserStateTest {
             }
         }
     }
-
-    @Test public void handlesLessInTagThanAsNewTag() {
-        // out of spec, but clear author intent
-        String html = "<p\n<p<div id=one <span>Two";
-        Document doc = Jsoup.parse(html);
-        assertEquals("<p></p><p></p><div id=\"one\"><span>Two</span></div>", TextUtil.stripNewlines(doc.body().html()));
-    }
 }
