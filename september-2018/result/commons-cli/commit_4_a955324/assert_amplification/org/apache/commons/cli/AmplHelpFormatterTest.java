package org.apache.commons.cli;


import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;
import org.junit.Assert;
import org.junit.Test;


public class AmplHelpFormatterTest {
    private static final String EOL = System.getProperty("line.separator");

    @Test(timeout = 10000)
    public void testOptionWithoutShortFormat2() throws Exception {
        Option help = new Option("h", "help", false, "print this message");
        Assert.assertFalse(((Option) (help)).hasArgs());
        Assert.assertFalse(((Option) (help)).hasOptionalArg());
        Assert.assertEquals("h", ((Option) (help)).getOpt());
        Assert.assertEquals("help", ((Option) (help)).getLongOpt());
        Assert.assertTrue(((Option) (help)).hasLongOpt());
        Assert.assertFalse(((Option) (help)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (help)).getValueSeparator())));
        Assert.assertFalse(((Option) (help)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (help)).getArgs())));
        Assert.assertNull(((Option) (help)).getValues());
        Assert.assertTrue(((Option) (help)).getValuesList().isEmpty());
        Assert.assertEquals("print this message", ((Option) (help)).getDescription());
        Assert.assertFalse(((Option) (help)).hasArg());
        Assert.assertFalse(((Option) (help)).isRequired());
        Assert.assertNull(((Option) (help)).getArgName());
        Assert.assertEquals("[ option: h help  :: print this message :: class java.lang.String ]", ((Option) (help)).toString());
        Assert.assertEquals(3202009, ((int) (((Option) (help)).hashCode())));
        Assert.assertNull(((Option) (help)).getValue());
        Assert.assertEquals(104, ((int) (((Option) (help)).getId())));
        Option version = new Option("v", "version", false, "print version information");
        Assert.assertFalse(((Option) (version)).hasArgs());
        Assert.assertFalse(((Option) (version)).hasOptionalArg());
        Assert.assertEquals("v", ((Option) (version)).getOpt());
        Assert.assertEquals("version", ((Option) (version)).getLongOpt());
        Assert.assertTrue(((Option) (version)).hasLongOpt());
        Assert.assertFalse(((Option) (version)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (version)).getValueSeparator())));
        Assert.assertFalse(((Option) (version)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (version)).getArgs())));
        Assert.assertNull(((Option) (version)).getValues());
        Assert.assertTrue(((Option) (version)).getValuesList().isEmpty());
        Assert.assertEquals("print version information", ((Option) (version)).getDescription());
        Assert.assertFalse(((Option) (version)).hasArg());
        Assert.assertFalse(((Option) (version)).isRequired());
        Assert.assertNull(((Option) (version)).getArgName());
        Assert.assertEquals("[ option: v version  :: print version information :: class java.lang.String ]", ((Option) (version)).toString());
        Assert.assertEquals(351611682, ((int) (((Option) (version)).hashCode())));
        Assert.assertNull(((Option) (version)).getValue());
        Assert.assertEquals(118, ((int) (((Option) (version)).getId())));
        Option newRun = new Option("n", "new", false, "Create NLT cache entries only for new items");
        Assert.assertFalse(((Option) (newRun)).hasArgs());
        Assert.assertFalse(((Option) (newRun)).hasOptionalArg());
        Assert.assertEquals("n", ((Option) (newRun)).getOpt());
        Assert.assertEquals("new", ((Option) (newRun)).getLongOpt());
        Assert.assertTrue(((Option) (newRun)).hasLongOpt());
        Assert.assertFalse(((Option) (newRun)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (newRun)).getValueSeparator())));
        Assert.assertFalse(((Option) (newRun)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (newRun)).getArgs())));
        Assert.assertNull(((Option) (newRun)).getValues());
        Assert.assertTrue(((Option) (newRun)).getValuesList().isEmpty());
        Assert.assertEquals("Create NLT cache entries only for new items", ((Option) (newRun)).getDescription());
        Assert.assertFalse(((Option) (newRun)).hasArg());
        Assert.assertFalse(((Option) (newRun)).isRequired());
        Assert.assertNull(((Option) (newRun)).getArgName());
        Assert.assertEquals("[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]", ((Option) (newRun)).toString());
        Assert.assertEquals(112370, ((int) (((Option) (newRun)).hashCode())));
        Assert.assertNull(((Option) (newRun)).getValue());
        Assert.assertEquals(110, ((int) (((Option) (newRun)).getId())));
        Option trackerRun = new Option("t", "tracker", false, "Create NLT cache entries only for tracker items");
        Assert.assertFalse(((Option) (trackerRun)).hasArgs());
        Assert.assertFalse(((Option) (trackerRun)).hasOptionalArg());
        Assert.assertEquals("t", ((Option) (trackerRun)).getOpt());
        Assert.assertEquals("tracker", ((Option) (trackerRun)).getLongOpt());
        Assert.assertTrue(((Option) (trackerRun)).hasLongOpt());
        Assert.assertFalse(((Option) (trackerRun)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (trackerRun)).getValueSeparator())));
        Assert.assertFalse(((Option) (trackerRun)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (trackerRun)).getArgs())));
        Assert.assertNull(((Option) (trackerRun)).getValues());
        Assert.assertTrue(((Option) (trackerRun)).getValuesList().isEmpty());
        Assert.assertEquals("Create NLT cache entries only for tracker items", ((Option) (trackerRun)).getDescription());
        Assert.assertFalse(((Option) (trackerRun)).hasArg());
        Assert.assertFalse(((Option) (trackerRun)).isRequired());
        Assert.assertNull(((Option) (trackerRun)).getArgName());
        Assert.assertEquals("[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ]", ((Option) (trackerRun)).toString());
        Assert.assertEquals(-1067391676, ((int) (((Option) (trackerRun)).hashCode())));
        Assert.assertNull(((Option) (trackerRun)).getValue());
        Assert.assertEquals(116, ((int) (((Option) (trackerRun)).getId())));
        Option timeLimit = OptionBuilder.withLongOpt("limit").hasArg().withValueSeparator().withDescription("Set time limit for execution, in mintues").create("l");
        Assert.assertFalse(((Option) (timeLimit)).hasArgs());
        Assert.assertFalse(((Option) (timeLimit)).hasOptionalArg());
        Assert.assertEquals("l", ((Option) (timeLimit)).getOpt());
        Assert.assertEquals("limit", ((Option) (timeLimit)).getLongOpt());
        Assert.assertTrue(((Option) (timeLimit)).hasLongOpt());
        Assert.assertFalse(((Option) (timeLimit)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (timeLimit)).getValueSeparator())));
        Assert.assertTrue(((Option) (timeLimit)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (timeLimit)).getArgs())));
        Assert.assertNull(((Option) (timeLimit)).getValues());
        Assert.assertTrue(((Option) (timeLimit)).getValuesList().isEmpty());
        Assert.assertEquals("Set time limit for execution, in mintues", ((Option) (timeLimit)).getDescription());
        Assert.assertTrue(((Option) (timeLimit)).hasArg());
        Assert.assertFalse(((Option) (timeLimit)).isRequired());
        Assert.assertNull(((Option) (timeLimit)).getArgName());
        Assert.assertEquals("[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ]", ((Option) (timeLimit)).toString());
        Assert.assertEquals(102979791, ((int) (((Option) (timeLimit)).hashCode())));
        Assert.assertNull(((Option) (timeLimit)).getValue());
        Assert.assertEquals(108, ((int) (((Option) (timeLimit)).getId())));
        Option age = OptionBuilder.withLongOpt("age").hasArg().withValueSeparator().withDescription("Age (in days) of cache item before being recomputed").create("a");
        Assert.assertFalse(((Option) (age)).hasArgs());
        Assert.assertFalse(((Option) (age)).hasOptionalArg());
        Assert.assertEquals("a", ((Option) (age)).getOpt());
        Assert.assertEquals("age", ((Option) (age)).getLongOpt());
        Assert.assertTrue(((Option) (age)).hasLongOpt());
        Assert.assertFalse(((Option) (age)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (age)).getValueSeparator())));
        Assert.assertTrue(((Option) (age)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (age)).getArgs())));
        Assert.assertNull(((Option) (age)).getValues());
        Assert.assertTrue(((Option) (age)).getValuesList().isEmpty());
        Assert.assertEquals("Age (in days) of cache item before being recomputed", ((Option) (age)).getDescription());
        Assert.assertTrue(((Option) (age)).hasArg());
        Assert.assertFalse(((Option) (age)).isRequired());
        Assert.assertNull(((Option) (age)).getArgName());
        Assert.assertEquals("[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]", ((Option) (age)).toString());
        Assert.assertEquals(99518, ((int) (((Option) (age)).hashCode())));
        Assert.assertNull(((Option) (age)).getValue());
        Assert.assertEquals(97, ((int) (((Option) (age)).getId())));
        Option server = OptionBuilder.withLongOpt("server").hasArg().withValueSeparator().withDescription("The NLT server address").create("s");
        Assert.assertFalse(((Option) (server)).hasArgs());
        Assert.assertFalse(((Option) (server)).hasOptionalArg());
        Assert.assertEquals("s", ((Option) (server)).getOpt());
        Assert.assertEquals("server", ((Option) (server)).getLongOpt());
        Assert.assertTrue(((Option) (server)).hasLongOpt());
        Assert.assertFalse(((Option) (server)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (server)).getValueSeparator())));
        Assert.assertTrue(((Option) (server)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (server)).getArgs())));
        Assert.assertNull(((Option) (server)).getValues());
        Assert.assertTrue(((Option) (server)).getValuesList().isEmpty());
        Assert.assertEquals("The NLT server address", ((Option) (server)).getDescription());
        Assert.assertTrue(((Option) (server)).hasArg());
        Assert.assertFalse(((Option) (server)).isRequired());
        Assert.assertNull(((Option) (server)).getArgName());
        Assert.assertEquals("[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ]", ((Option) (server)).toString());
        Assert.assertEquals(-905822928, ((int) (((Option) (server)).hashCode())));
        Assert.assertNull(((Option) (server)).getValue());
        Assert.assertEquals(115, ((int) (((Option) (server)).getId())));
        Option numResults = OptionBuilder.withLongOpt("results").hasArg().withValueSeparator().withDescription("Number of results per item").create("r");
        Assert.assertFalse(((Option) (numResults)).hasArgs());
        Assert.assertFalse(((Option) (numResults)).hasOptionalArg());
        Assert.assertEquals("r", ((Option) (numResults)).getOpt());
        Assert.assertEquals("results", ((Option) (numResults)).getLongOpt());
        Assert.assertTrue(((Option) (numResults)).hasLongOpt());
        Assert.assertFalse(((Option) (numResults)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (numResults)).getValueSeparator())));
        Assert.assertTrue(((Option) (numResults)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (numResults)).getArgs())));
        Assert.assertNull(((Option) (numResults)).getValues());
        Assert.assertTrue(((Option) (numResults)).getValuesList().isEmpty());
        Assert.assertEquals("Number of results per item", ((Option) (numResults)).getDescription());
        Assert.assertTrue(((Option) (numResults)).hasArg());
        Assert.assertFalse(((Option) (numResults)).isRequired());
        Assert.assertNull(((Option) (numResults)).getArgName());
        Assert.assertEquals("[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ]", ((Option) (numResults)).toString());
        Assert.assertEquals(1097550276, ((int) (((Option) (numResults)).hashCode())));
        Assert.assertNull(((Option) (numResults)).getValue());
        Assert.assertEquals(114, ((int) (((Option) (numResults)).getId())));
        Option configFile = OptionBuilder.withLongOpt("config").hasArg().withValueSeparator().withDescription("Use the specified configuration file").create();
        Assert.assertFalse(((Option) (configFile)).hasArgs());
        Assert.assertFalse(((Option) (configFile)).hasOptionalArg());
        Assert.assertNull(((Option) (configFile)).getOpt());
        Assert.assertEquals("config", ((Option) (configFile)).getLongOpt());
        Assert.assertTrue(((Option) (configFile)).hasLongOpt());
        Assert.assertFalse(((Option) (configFile)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (configFile)).getValueSeparator())));
        Assert.assertTrue(((Option) (configFile)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (configFile)).getArgs())));
        Assert.assertNull(((Option) (configFile)).getValues());
        Assert.assertTrue(((Option) (configFile)).getValuesList().isEmpty());
        Assert.assertEquals("Use the specified configuration file", ((Option) (configFile)).getDescription());
        Assert.assertTrue(((Option) (configFile)).hasArg());
        Assert.assertFalse(((Option) (configFile)).isRequired());
        Assert.assertNull(((Option) (configFile)).getArgName());
        Assert.assertEquals("[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ]", ((Option) (configFile)).toString());
        Assert.assertEquals(-1354792126, ((int) (((Option) (configFile)).hashCode())));
        Assert.assertNull(((Option) (configFile)).getValue());
        Assert.assertEquals(99, ((int) (((Option) (configFile)).getId())));
        Options mOptions = new Options();
        Assert.assertTrue(((Options) (mOptions)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (mOptions)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {} ] [ long {} ]", ((Options) (mOptions)).toString());
        Options o_testOptionWithoutShortFormat2__42 = mOptions.addOption(help);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__42)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__42)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {h=[ option: h help  :: print this message :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__42)).toString());
        Options o_testOptionWithoutShortFormat2__43 = mOptions.addOption(version);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__43)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__43)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__43)).toString());
        Options o_testOptionWithoutShortFormat2__44 = mOptions.addOption(newRun);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__44)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__44)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__44)).toString());
        Options o_testOptionWithoutShortFormat2__45 = mOptions.addOption(trackerRun);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__45)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__45)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__45)).toString());
        Options o_testOptionWithoutShortFormat2__46 = mOptions.addOption(timeLimit);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__46)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__46)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__46)).toString());
        Options o_testOptionWithoutShortFormat2__47 = mOptions.addOption(age);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__47)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__47)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__47)).toString());
        Options o_testOptionWithoutShortFormat2__48 = mOptions.addOption(server);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__48)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__48)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__48)).toString());
        Options o_testOptionWithoutShortFormat2__49 = mOptions.addOption(numResults);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__49)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__49)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__49)).toString());
        Options o_testOptionWithoutShortFormat2__50 = mOptions.addOption(configFile);
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__50)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__50)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__50)).toString());
        HelpFormatter formatter = new HelpFormatter();
        Assert.assertEquals("arg", ((HelpFormatter) (formatter)).getArgName());
        Assert.assertEquals(3, ((int) (((HelpFormatter) (formatter)).getDescPadding())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (formatter)).getLeftPadding())));
        Assert.assertEquals("--", ((HelpFormatter) (formatter)).getLongOptPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (formatter)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (formatter)).getOptPrefix());
        Assert.assertEquals("usage: ", ((HelpFormatter) (formatter)).getSyntaxPrefix());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (formatter)).getWidth())));
        Assert.assertEquals(" ", ((HelpFormatter) (formatter)).getLongOptSeparator());
        final String EOL = System.getProperty("line.separator");
        Assert.assertEquals("\n", EOL);
        StringWriter out = new StringWriter();
        formatter.printHelp(new PrintWriter(out), 80, "commandline", "header", mOptions, 2, 2, "footer", true);
        String String_11 = (((((((((((((((((((((((("usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]" + EOL) + "       [-s <arg>] [-t] [-v]") + EOL) + "header") + EOL) + "  -a,--age <arg>      Age (in days) of cache item before being recomputed") + EOL) + "     --config <arg>   Use the specified configuration file") + EOL) + "  -h,--help           print this message") + EOL) + "  -l,--limit <arg>    Set time limit for execution, in mintues") + EOL) + "  -n,--new            Create NLT cache entries only for new items") + EOL) + "  -r,--results <arg>  Number of results per item") + EOL) + "  -s,--server <arg>   The NLT server address") + EOL) + "  -t,--tracker        Create NLT cache entries only for tracker items") + EOL) + "  -v,--version        print version information") + EOL) + "footer") + EOL;
        Assert.assertEquals("usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\n       [-s <arg>] [-t] [-v]\nheader\n  -a,--age <arg>      Age (in days) of cache item before being recomputed\n     --config <arg>   Use the specified configuration file\n  -h,--help           print this message\n  -l,--limit <arg>    Set time limit for execution, in mintues\n  -n,--new            Create NLT cache entries only for new items\n  -r,--results <arg>  Number of results per item\n  -s,--server <arg>   The NLT server address\n  -t,--tracker        Create NLT cache entries only for tracker items\n  -v,--version        print version information\nfooter\n", String_11);
        out.toString();
        Assert.assertFalse(((Option) (help)).hasArgs());
        Assert.assertFalse(((Option) (help)).hasOptionalArg());
        Assert.assertEquals("h", ((Option) (help)).getOpt());
        Assert.assertEquals("help", ((Option) (help)).getLongOpt());
        Assert.assertTrue(((Option) (help)).hasLongOpt());
        Assert.assertFalse(((Option) (help)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (help)).getValueSeparator())));
        Assert.assertFalse(((Option) (help)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (help)).getArgs())));
        Assert.assertNull(((Option) (help)).getValues());
        Assert.assertTrue(((Option) (help)).getValuesList().isEmpty());
        Assert.assertEquals("print this message", ((Option) (help)).getDescription());
        Assert.assertFalse(((Option) (help)).hasArg());
        Assert.assertFalse(((Option) (help)).isRequired());
        Assert.assertNull(((Option) (help)).getArgName());
        Assert.assertEquals("[ option: h help  :: print this message :: class java.lang.String ]", ((Option) (help)).toString());
        Assert.assertEquals(3202009, ((int) (((Option) (help)).hashCode())));
        Assert.assertNull(((Option) (help)).getValue());
        Assert.assertEquals(104, ((int) (((Option) (help)).getId())));
        Assert.assertFalse(((Option) (version)).hasArgs());
        Assert.assertFalse(((Option) (version)).hasOptionalArg());
        Assert.assertEquals("v", ((Option) (version)).getOpt());
        Assert.assertEquals("version", ((Option) (version)).getLongOpt());
        Assert.assertTrue(((Option) (version)).hasLongOpt());
        Assert.assertFalse(((Option) (version)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (version)).getValueSeparator())));
        Assert.assertFalse(((Option) (version)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (version)).getArgs())));
        Assert.assertNull(((Option) (version)).getValues());
        Assert.assertTrue(((Option) (version)).getValuesList().isEmpty());
        Assert.assertEquals("print version information", ((Option) (version)).getDescription());
        Assert.assertFalse(((Option) (version)).hasArg());
        Assert.assertFalse(((Option) (version)).isRequired());
        Assert.assertNull(((Option) (version)).getArgName());
        Assert.assertEquals("[ option: v version  :: print version information :: class java.lang.String ]", ((Option) (version)).toString());
        Assert.assertEquals(351611682, ((int) (((Option) (version)).hashCode())));
        Assert.assertNull(((Option) (version)).getValue());
        Assert.assertEquals(118, ((int) (((Option) (version)).getId())));
        Assert.assertFalse(((Option) (newRun)).hasArgs());
        Assert.assertFalse(((Option) (newRun)).hasOptionalArg());
        Assert.assertEquals("n", ((Option) (newRun)).getOpt());
        Assert.assertEquals("new", ((Option) (newRun)).getLongOpt());
        Assert.assertTrue(((Option) (newRun)).hasLongOpt());
        Assert.assertFalse(((Option) (newRun)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (newRun)).getValueSeparator())));
        Assert.assertFalse(((Option) (newRun)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (newRun)).getArgs())));
        Assert.assertNull(((Option) (newRun)).getValues());
        Assert.assertTrue(((Option) (newRun)).getValuesList().isEmpty());
        Assert.assertEquals("Create NLT cache entries only for new items", ((Option) (newRun)).getDescription());
        Assert.assertFalse(((Option) (newRun)).hasArg());
        Assert.assertFalse(((Option) (newRun)).isRequired());
        Assert.assertNull(((Option) (newRun)).getArgName());
        Assert.assertEquals("[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]", ((Option) (newRun)).toString());
        Assert.assertEquals(112370, ((int) (((Option) (newRun)).hashCode())));
        Assert.assertNull(((Option) (newRun)).getValue());
        Assert.assertEquals(110, ((int) (((Option) (newRun)).getId())));
        Assert.assertFalse(((Option) (trackerRun)).hasArgs());
        Assert.assertFalse(((Option) (trackerRun)).hasOptionalArg());
        Assert.assertEquals("t", ((Option) (trackerRun)).getOpt());
        Assert.assertEquals("tracker", ((Option) (trackerRun)).getLongOpt());
        Assert.assertTrue(((Option) (trackerRun)).hasLongOpt());
        Assert.assertFalse(((Option) (trackerRun)).hasArgName());
        Assert.assertEquals('\u0000', ((char) (((Option) (trackerRun)).getValueSeparator())));
        Assert.assertFalse(((Option) (trackerRun)).hasValueSeparator());
        Assert.assertEquals(-1, ((int) (((Option) (trackerRun)).getArgs())));
        Assert.assertNull(((Option) (trackerRun)).getValues());
        Assert.assertTrue(((Option) (trackerRun)).getValuesList().isEmpty());
        Assert.assertEquals("Create NLT cache entries only for tracker items", ((Option) (trackerRun)).getDescription());
        Assert.assertFalse(((Option) (trackerRun)).hasArg());
        Assert.assertFalse(((Option) (trackerRun)).isRequired());
        Assert.assertNull(((Option) (trackerRun)).getArgName());
        Assert.assertEquals("[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ]", ((Option) (trackerRun)).toString());
        Assert.assertEquals(-1067391676, ((int) (((Option) (trackerRun)).hashCode())));
        Assert.assertNull(((Option) (trackerRun)).getValue());
        Assert.assertEquals(116, ((int) (((Option) (trackerRun)).getId())));
        Assert.assertFalse(((Option) (timeLimit)).hasArgs());
        Assert.assertFalse(((Option) (timeLimit)).hasOptionalArg());
        Assert.assertEquals("l", ((Option) (timeLimit)).getOpt());
        Assert.assertEquals("limit", ((Option) (timeLimit)).getLongOpt());
        Assert.assertTrue(((Option) (timeLimit)).hasLongOpt());
        Assert.assertFalse(((Option) (timeLimit)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (timeLimit)).getValueSeparator())));
        Assert.assertTrue(((Option) (timeLimit)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (timeLimit)).getArgs())));
        Assert.assertNull(((Option) (timeLimit)).getValues());
        Assert.assertTrue(((Option) (timeLimit)).getValuesList().isEmpty());
        Assert.assertEquals("Set time limit for execution, in mintues", ((Option) (timeLimit)).getDescription());
        Assert.assertTrue(((Option) (timeLimit)).hasArg());
        Assert.assertFalse(((Option) (timeLimit)).isRequired());
        Assert.assertNull(((Option) (timeLimit)).getArgName());
        Assert.assertEquals("[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ]", ((Option) (timeLimit)).toString());
        Assert.assertEquals(102979791, ((int) (((Option) (timeLimit)).hashCode())));
        Assert.assertNull(((Option) (timeLimit)).getValue());
        Assert.assertEquals(108, ((int) (((Option) (timeLimit)).getId())));
        Assert.assertFalse(((Option) (age)).hasArgs());
        Assert.assertFalse(((Option) (age)).hasOptionalArg());
        Assert.assertEquals("a", ((Option) (age)).getOpt());
        Assert.assertEquals("age", ((Option) (age)).getLongOpt());
        Assert.assertTrue(((Option) (age)).hasLongOpt());
        Assert.assertFalse(((Option) (age)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (age)).getValueSeparator())));
        Assert.assertTrue(((Option) (age)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (age)).getArgs())));
        Assert.assertNull(((Option) (age)).getValues());
        Assert.assertTrue(((Option) (age)).getValuesList().isEmpty());
        Assert.assertEquals("Age (in days) of cache item before being recomputed", ((Option) (age)).getDescription());
        Assert.assertTrue(((Option) (age)).hasArg());
        Assert.assertFalse(((Option) (age)).isRequired());
        Assert.assertNull(((Option) (age)).getArgName());
        Assert.assertEquals("[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]", ((Option) (age)).toString());
        Assert.assertEquals(99518, ((int) (((Option) (age)).hashCode())));
        Assert.assertNull(((Option) (age)).getValue());
        Assert.assertEquals(97, ((int) (((Option) (age)).getId())));
        Assert.assertFalse(((Option) (server)).hasArgs());
        Assert.assertFalse(((Option) (server)).hasOptionalArg());
        Assert.assertEquals("s", ((Option) (server)).getOpt());
        Assert.assertEquals("server", ((Option) (server)).getLongOpt());
        Assert.assertTrue(((Option) (server)).hasLongOpt());
        Assert.assertFalse(((Option) (server)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (server)).getValueSeparator())));
        Assert.assertTrue(((Option) (server)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (server)).getArgs())));
        Assert.assertNull(((Option) (server)).getValues());
        Assert.assertTrue(((Option) (server)).getValuesList().isEmpty());
        Assert.assertEquals("The NLT server address", ((Option) (server)).getDescription());
        Assert.assertTrue(((Option) (server)).hasArg());
        Assert.assertFalse(((Option) (server)).isRequired());
        Assert.assertNull(((Option) (server)).getArgName());
        Assert.assertEquals("[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ]", ((Option) (server)).toString());
        Assert.assertEquals(-905822928, ((int) (((Option) (server)).hashCode())));
        Assert.assertNull(((Option) (server)).getValue());
        Assert.assertEquals(115, ((int) (((Option) (server)).getId())));
        Assert.assertFalse(((Option) (numResults)).hasArgs());
        Assert.assertFalse(((Option) (numResults)).hasOptionalArg());
        Assert.assertEquals("r", ((Option) (numResults)).getOpt());
        Assert.assertEquals("results", ((Option) (numResults)).getLongOpt());
        Assert.assertTrue(((Option) (numResults)).hasLongOpt());
        Assert.assertFalse(((Option) (numResults)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (numResults)).getValueSeparator())));
        Assert.assertTrue(((Option) (numResults)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (numResults)).getArgs())));
        Assert.assertNull(((Option) (numResults)).getValues());
        Assert.assertTrue(((Option) (numResults)).getValuesList().isEmpty());
        Assert.assertEquals("Number of results per item", ((Option) (numResults)).getDescription());
        Assert.assertTrue(((Option) (numResults)).hasArg());
        Assert.assertFalse(((Option) (numResults)).isRequired());
        Assert.assertNull(((Option) (numResults)).getArgName());
        Assert.assertEquals("[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ]", ((Option) (numResults)).toString());
        Assert.assertEquals(1097550276, ((int) (((Option) (numResults)).hashCode())));
        Assert.assertNull(((Option) (numResults)).getValue());
        Assert.assertEquals(114, ((int) (((Option) (numResults)).getId())));
        Assert.assertFalse(((Option) (configFile)).hasArgs());
        Assert.assertFalse(((Option) (configFile)).hasOptionalArg());
        Assert.assertNull(((Option) (configFile)).getOpt());
        Assert.assertEquals("config", ((Option) (configFile)).getLongOpt());
        Assert.assertTrue(((Option) (configFile)).hasLongOpt());
        Assert.assertFalse(((Option) (configFile)).hasArgName());
        Assert.assertEquals('=', ((char) (((Option) (configFile)).getValueSeparator())));
        Assert.assertTrue(((Option) (configFile)).hasValueSeparator());
        Assert.assertEquals(1, ((int) (((Option) (configFile)).getArgs())));
        Assert.assertNull(((Option) (configFile)).getValues());
        Assert.assertTrue(((Option) (configFile)).getValuesList().isEmpty());
        Assert.assertEquals("Use the specified configuration file", ((Option) (configFile)).getDescription());
        Assert.assertTrue(((Option) (configFile)).hasArg());
        Assert.assertFalse(((Option) (configFile)).isRequired());
        Assert.assertNull(((Option) (configFile)).getArgName());
        Assert.assertEquals("[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ]", ((Option) (configFile)).toString());
        Assert.assertEquals(-1354792126, ((int) (((Option) (configFile)).hashCode())));
        Assert.assertNull(((Option) (configFile)).getValue());
        Assert.assertEquals(99, ((int) (((Option) (configFile)).getId())));
        Assert.assertFalse(((Options) (mOptions)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (mOptions)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (mOptions)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__42)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__42)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__42)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__43)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__43)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__43)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__44)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__44)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__44)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__45)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__45)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__45)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__46)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__46)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__46)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__47)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__47)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__47)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__48)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__48)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__48)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__49)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__49)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__49)).toString());
        Assert.assertFalse(((Options) (o_testOptionWithoutShortFormat2__50)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testOptionWithoutShortFormat2__50)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ], r=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], s=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], t=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], v=[ option: v version  :: print version information :: class java.lang.String ], h=[ option: h help  :: print this message :: class java.lang.String ], l=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], n=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ]} ] [ long {help=[ option: h help  :: print this message :: class java.lang.String ], new=[ option: n new  :: Create NLT cache entries only for new items :: class java.lang.String ], server=[ option: s server  [ARG] :: The NLT server address :: class java.lang.String ], tracker=[ option: t tracker  :: Create NLT cache entries only for tracker items :: class java.lang.String ], limit=[ option: l limit  [ARG] :: Set time limit for execution, in mintues :: class java.lang.String ], version=[ option: v version  :: print version information :: class java.lang.String ], results=[ option: r results  [ARG] :: Number of results per item :: class java.lang.String ], config=[ option: null config  [ARG] :: Use the specified configuration file :: class java.lang.String ], age=[ option: a age  [ARG] :: Age (in days) of cache item before being recomputed :: class java.lang.String ]} ]", ((Options) (o_testOptionWithoutShortFormat2__50)).toString());
        Assert.assertEquals("arg", ((HelpFormatter) (formatter)).getArgName());
        Assert.assertEquals(3, ((int) (((HelpFormatter) (formatter)).getDescPadding())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (formatter)).getLeftPadding())));
        Assert.assertEquals("--", ((HelpFormatter) (formatter)).getLongOptPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (formatter)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (formatter)).getOptPrefix());
        Assert.assertEquals("usage: ", ((HelpFormatter) (formatter)).getSyntaxPrefix());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (formatter)).getWidth())));
        Assert.assertEquals(" ", ((HelpFormatter) (formatter)).getLongOptSeparator());
        Assert.assertEquals("\n", EOL);
        Assert.assertEquals("usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\n       [-s <arg>] [-t] [-v]\nheader\n  -a,--age <arg>      Age (in days) of cache item before being recomputed\n     --config <arg>   Use the specified configuration file\n  -h,--help           print this message\n  -l,--limit <arg>    Set time limit for execution, in mintues\n  -n,--new            Create NLT cache entries only for new items\n  -r,--results <arg>  Number of results per item\n  -s,--server <arg>   The NLT server address\n  -t,--tracker        Create NLT cache entries only for tracker items\n  -v,--version        print version information\nfooter\n", String_11);
    }

    @Test(timeout = 10000)
    public void testHelpWithLongOptSeparator() throws Exception {
        Options options = new Options();
        Assert.assertTrue(((Options) (options)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (options)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {} ] [ long {} ]", ((Options) (options)).toString());
        Options o_testHelpWithLongOptSeparator__3 = options.addOption("f", true, "the file");
        Assert.assertFalse(((Options) (o_testHelpWithLongOptSeparator__3)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testHelpWithLongOptSeparator__3)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {f=[ option: f  [ARG] :: the file :: class java.lang.String ]} ] [ long {} ]", ((Options) (o_testHelpWithLongOptSeparator__3)).toString());
        Options o_testHelpWithLongOptSeparator__4 = options.addOption(OptionBuilder.withLongOpt("size").withDescription("the size").hasArg().withArgName("SIZE").create('s'));
        Assert.assertFalse(((Options) (o_testHelpWithLongOptSeparator__4)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testHelpWithLongOptSeparator__4)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ]} ]", ((Options) (o_testHelpWithLongOptSeparator__4)).toString());
        Options o_testHelpWithLongOptSeparator__10 = options.addOption(OptionBuilder.withLongOpt("age").withDescription("the age").hasArg().create());
        Assert.assertFalse(((Options) (o_testHelpWithLongOptSeparator__10)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testHelpWithLongOptSeparator__10)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testHelpWithLongOptSeparator__10)).toString());
        HelpFormatter formatter = new HelpFormatter();
        Assert.assertEquals("arg", ((HelpFormatter) (formatter)).getArgName());
        Assert.assertEquals(3, ((int) (((HelpFormatter) (formatter)).getDescPadding())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (formatter)).getLeftPadding())));
        Assert.assertEquals("--", ((HelpFormatter) (formatter)).getLongOptPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (formatter)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (formatter)).getOptPrefix());
        Assert.assertEquals("usage: ", ((HelpFormatter) (formatter)).getSyntaxPrefix());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (formatter)).getWidth())));
        Assert.assertEquals(" ", ((HelpFormatter) (formatter)).getLongOptSeparator());
        formatter.getLongOptSeparator();
        formatter.setLongOptSeparator("=");
        formatter.getLongOptSeparator();
        StringWriter out = new StringWriter();
        formatter.printHelp(new PrintWriter(out), 80, "create", "header", options, 2, 2, "footer");
        String String_2 = (((((((((("usage: create" + (AmplHelpFormatterTest.EOL)) + "header") + (AmplHelpFormatterTest.EOL)) + "     --age=<arg>    the age") + (AmplHelpFormatterTest.EOL)) + "  -f <arg>          the file") + (AmplHelpFormatterTest.EOL)) + "  -s,--size=<SIZE>  the size") + (AmplHelpFormatterTest.EOL)) + "footer") + (AmplHelpFormatterTest.EOL);
        Assert.assertEquals("usage: create\nheader\n     --age=<arg>    the age\n  -f <arg>          the file\n  -s,--size=<SIZE>  the size\nfooter\n", String_2);
        out.toString();
        Assert.assertFalse(((Options) (options)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (options)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (options)).toString());
        Assert.assertFalse(((Options) (o_testHelpWithLongOptSeparator__3)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testHelpWithLongOptSeparator__3)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testHelpWithLongOptSeparator__3)).toString());
        Assert.assertFalse(((Options) (o_testHelpWithLongOptSeparator__4)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testHelpWithLongOptSeparator__4)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testHelpWithLongOptSeparator__4)).toString());
        Assert.assertFalse(((Options) (o_testHelpWithLongOptSeparator__10)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testHelpWithLongOptSeparator__10)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testHelpWithLongOptSeparator__10)).toString());
        Assert.assertEquals("arg", ((HelpFormatter) (formatter)).getArgName());
        Assert.assertEquals(3, ((int) (((HelpFormatter) (formatter)).getDescPadding())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (formatter)).getLeftPadding())));
        Assert.assertEquals("--", ((HelpFormatter) (formatter)).getLongOptPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (formatter)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (formatter)).getOptPrefix());
        Assert.assertEquals("usage: ", ((HelpFormatter) (formatter)).getSyntaxPrefix());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (formatter)).getWidth())));
        Assert.assertEquals("=", ((HelpFormatter) (formatter)).getLongOptSeparator());
        Assert.assertEquals("usage: create\nheader\n     --age=<arg>    the age\n  -f <arg>          the file\n  -s,--size=<SIZE>  the size\nfooter\n", String_2);
    }

    @Test(timeout = 10000)
    public void testUsageWithLongOptSeparator() throws Exception {
        Options options = new Options();
        Assert.assertTrue(((Options) (options)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (options)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {} ] [ long {} ]", ((Options) (options)).toString());
        Options o_testUsageWithLongOptSeparator__3 = options.addOption("f", true, "the file");
        Assert.assertFalse(((Options) (o_testUsageWithLongOptSeparator__3)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testUsageWithLongOptSeparator__3)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {f=[ option: f  [ARG] :: the file :: class java.lang.String ]} ] [ long {} ]", ((Options) (o_testUsageWithLongOptSeparator__3)).toString());
        Options o_testUsageWithLongOptSeparator__4 = options.addOption(OptionBuilder.withLongOpt("size").withDescription("the size").hasArg().withArgName("SIZE").create('s'));
        Assert.assertFalse(((Options) (o_testUsageWithLongOptSeparator__4)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testUsageWithLongOptSeparator__4)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ]} ]", ((Options) (o_testUsageWithLongOptSeparator__4)).toString());
        Options o_testUsageWithLongOptSeparator__10 = options.addOption(OptionBuilder.withLongOpt("age").withDescription("the age").hasArg().create());
        Assert.assertFalse(((Options) (o_testUsageWithLongOptSeparator__10)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testUsageWithLongOptSeparator__10)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testUsageWithLongOptSeparator__10)).toString());
        HelpFormatter formatter = new HelpFormatter();
        Assert.assertEquals("arg", ((HelpFormatter) (formatter)).getArgName());
        Assert.assertEquals(3, ((int) (((HelpFormatter) (formatter)).getDescPadding())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (formatter)).getLeftPadding())));
        Assert.assertEquals("--", ((HelpFormatter) (formatter)).getLongOptPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (formatter)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (formatter)).getOptPrefix());
        Assert.assertEquals("usage: ", ((HelpFormatter) (formatter)).getSyntaxPrefix());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (formatter)).getWidth())));
        Assert.assertEquals(" ", ((HelpFormatter) (formatter)).getLongOptSeparator());
        formatter.setLongOptSeparator("=");
        StringWriter out = new StringWriter();
        formatter.printUsage(new PrintWriter(out), 80, "create", options);
        String o_testUsageWithLongOptSeparator__22 = out.toString().trim();
        Assert.assertEquals("usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]", o_testUsageWithLongOptSeparator__22);
        Assert.assertFalse(((Options) (options)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (options)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (options)).toString());
        Assert.assertFalse(((Options) (o_testUsageWithLongOptSeparator__3)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testUsageWithLongOptSeparator__3)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testUsageWithLongOptSeparator__3)).toString());
        Assert.assertFalse(((Options) (o_testUsageWithLongOptSeparator__4)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testUsageWithLongOptSeparator__4)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testUsageWithLongOptSeparator__4)).toString());
        Assert.assertFalse(((Options) (o_testUsageWithLongOptSeparator__10)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testUsageWithLongOptSeparator__10)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {s=[ option: s size  [ARG] :: the size :: class java.lang.String ], f=[ option: f  [ARG] :: the file :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ] [ long {size=[ option: s size  [ARG] :: the size :: class java.lang.String ], age=[ option: null age  [ARG] :: the age :: class java.lang.String ]} ]", ((Options) (o_testUsageWithLongOptSeparator__10)).toString());
        Assert.assertEquals("arg", ((HelpFormatter) (formatter)).getArgName());
        Assert.assertEquals(3, ((int) (((HelpFormatter) (formatter)).getDescPadding())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (formatter)).getLeftPadding())));
        Assert.assertEquals("--", ((HelpFormatter) (formatter)).getLongOptPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (formatter)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (formatter)).getOptPrefix());
        Assert.assertEquals("usage: ", ((HelpFormatter) (formatter)).getSyntaxPrefix());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (formatter)).getWidth())));
        Assert.assertEquals("=", ((HelpFormatter) (formatter)).getLongOptSeparator());
    }
}

