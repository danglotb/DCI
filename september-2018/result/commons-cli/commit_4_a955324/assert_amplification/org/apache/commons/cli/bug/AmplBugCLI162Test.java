package org.apache.commons.cli.bug;


import java.io.IOException;
import java.sql.ParameterMetaData;
import java.sql.Types;
import junit.framework.TestCase;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.junit.Assert;
import org.junit.Test;


public class AmplBugCLI162Test {
    private static final String CR = System.getProperty("line.separator");

    @Test(timeout = 10000)
    public void testPrintHelpLongLines() throws IOException, Exception, ParseException {
        final String OPT = "-";
        Assert.assertEquals("-", OPT);
        final String OPT_COLUMN_NAMES = "l";
        Assert.assertEquals("l", OPT_COLUMN_NAMES);
        final String OPT_CONNECTION = "c";
        Assert.assertEquals("c", OPT_CONNECTION);
        final String OPT_DESCRIPTION = "e";
        Assert.assertEquals("e", OPT_DESCRIPTION);
        final String OPT_DRIVER = "d";
        Assert.assertEquals("d", OPT_DRIVER);
        final String OPT_DRIVER_INFO = "n";
        Assert.assertEquals("n", OPT_DRIVER_INFO);
        final String OPT_FILE_BINDING = "b";
        Assert.assertEquals("b", OPT_FILE_BINDING);
        final String OPT_FILE_JDBC = "j";
        Assert.assertEquals("j", OPT_FILE_JDBC);
        final String OPT_FILE_SFMD = "f";
        Assert.assertEquals("f", OPT_FILE_SFMD);
        final String OPT_HELP = "h";
        Assert.assertEquals("h", OPT_HELP);
        final String OPT_HELP_ = "help";
        Assert.assertEquals("help", OPT_HELP_);
        final String OPT_INTERACTIVE = "i";
        Assert.assertEquals("i", OPT_INTERACTIVE);
        final String OPT_JDBC_TO_SFMD = "2";
        Assert.assertEquals("2", OPT_JDBC_TO_SFMD);
        final String OPT_JDBC_TO_SFMD_L = "jdbc2sfmd";
        Assert.assertEquals("jdbc2sfmd", OPT_JDBC_TO_SFMD_L);
        final String OPT_METADATA = "m";
        Assert.assertEquals("m", OPT_METADATA);
        final String OPT_PARAM_MODES_INT = "o";
        Assert.assertEquals("o", OPT_PARAM_MODES_INT);
        final String OPT_PARAM_MODES_NAME = "O";
        Assert.assertEquals("O", OPT_PARAM_MODES_NAME);
        final String OPT_PARAM_NAMES = "a";
        Assert.assertEquals("a", OPT_PARAM_NAMES);
        final String OPT_PARAM_TYPES_INT = "y";
        Assert.assertEquals("y", OPT_PARAM_TYPES_INT);
        final String OPT_PARAM_TYPES_NAME = "Y";
        Assert.assertEquals("Y", OPT_PARAM_TYPES_NAME);
        final String OPT_PASSWORD = "p";
        Assert.assertEquals("p", OPT_PASSWORD);
        final String OPT_PASSWORD_L = "password";
        Assert.assertEquals("password", OPT_PASSWORD_L);
        final String OPT_SQL = "s";
        Assert.assertEquals("s", OPT_SQL);
        final String OPT_SQL_L = "sql";
        Assert.assertEquals("sql", OPT_SQL_L);
        final String OPT_SQL_SPLIT_DEFAULT = "###";
        Assert.assertEquals("###", OPT_SQL_SPLIT_DEFAULT);
        final String OPT_SQL_SPLIT_L = "splitSql";
        Assert.assertEquals("splitSql", OPT_SQL_SPLIT_L);
        final String OPT_STACK_TRACE = "t";
        Assert.assertEquals("t", OPT_STACK_TRACE);
        final String OPT_TIMING = "g";
        Assert.assertEquals("g", OPT_TIMING);
        final String OPT_TRIM_L = "trim";
        Assert.assertEquals("trim", OPT_TRIM_L);
        final String OPT_USER = "u";
        Assert.assertEquals("u", OPT_USER);
        final String OPT_WRITE_TO_FILE = "w";
        Assert.assertEquals("w", OPT_WRITE_TO_FILE);
        final String _PMODE_IN = "IN";
        Assert.assertEquals("IN", _PMODE_IN);
        final String _PMODE_INOUT = "INOUT";
        Assert.assertEquals("INOUT", _PMODE_INOUT);
        final String _PMODE_OUT = "OUT";
        Assert.assertEquals("OUT", _PMODE_OUT);
        final String _PMODE_UNK = "Unknown";
        Assert.assertEquals("Unknown", _PMODE_UNK);
        final String PMODES = (((((_PMODE_IN + ", ") + _PMODE_INOUT) + ", ") + _PMODE_OUT) + ", ") + _PMODE_UNK;
        Assert.assertEquals("IN, INOUT, OUT, Unknown", PMODES);
        Options commandLineOptions;
        commandLineOptions = new Options();
        Options o_testPrintHelpLongLines__42 = commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, "Prints help and quits");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__42)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__42)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {h=[ option: h help  :: Prints help and quits :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__42)).toString());
        Options o_testPrintHelpLongLines__43 = commandLineOptions.addOption(OPT_DRIVER, "driver", true, "JDBC driver class name");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__43)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__43)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__43)).toString());
        Options o_testPrintHelpLongLines__44 = commandLineOptions.addOption(OPT_DRIVER_INFO, "info", false, ((("Prints driver information and properties. If " + OPT) + OPT_CONNECTION) + " is not specified, all drivers on the classpath are displayed."));
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__44)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__44)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__44)).toString());
        Options o_testPrintHelpLongLines__45 = commandLineOptions.addOption(OPT_CONNECTION, "url", true, "Connection URL");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__45)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__45)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__45)).toString());
        Options o_testPrintHelpLongLines__46 = commandLineOptions.addOption(OPT_USER, "user", true, "A database user name");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__46)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__46)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__46)).toString());
        Options o_testPrintHelpLongLines__47 = commandLineOptions.addOption(OPT_PASSWORD, OPT_PASSWORD_L, true, ((("The database password for the user specified with the " + OPT) + OPT_USER) + " option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords"));
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__47)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__47)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__47)).toString());
        Options o_testPrintHelpLongLines__48 = commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, "Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__48)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__48)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__48)).toString());
        Options o_testPrintHelpLongLines__49 = commandLineOptions.addOption(OPT_FILE_SFMD, "sfmd", true, "Writes a SFMD file for the given SQL");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__49)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__49)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__49)).toString());
        Options o_testPrintHelpLongLines__50 = commandLineOptions.addOption(OPT_FILE_BINDING, "jdbc", true, "Writes a JDBC binding node file for the given SQL");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__50)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__50)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__50)).toString());
        Options o_testPrintHelpLongLines__51 = commandLineOptions.addOption(OPT_FILE_JDBC, "node", true, "Writes a JDBC node file for the given SQL (internal debugging)");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__51)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__51)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__51)).toString());
        Options o_testPrintHelpLongLines__52 = commandLineOptions.addOption(OPT_WRITE_TO_FILE, "outfile", true, "Writes the SQL output to the given file");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__52)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__52)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__52)).toString());
        Options o_testPrintHelpLongLines__53 = commandLineOptions.addOption(OPT_DESCRIPTION, "description", true, ((("SFMD description. A default description is used if omited. Example: " + OPT) + OPT_DESCRIPTION) + " \"Runs such and such\""));
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__53)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__53)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ]} ] [ long {help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__53)).toString());
        Options o_testPrintHelpLongLines__54 = commandLineOptions.addOption(OPT_INTERACTIVE, "interactive", false, "Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__54)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__54)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ]} ] [ long {outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__54)).toString());
        Options o_testPrintHelpLongLines__55 = commandLineOptions.addOption(OPT_TIMING, "printTiming", false, "Prints timing information");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__55)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__55)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ]} ] [ long {outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__55)).toString());
        Options o_testPrintHelpLongLines__56 = commandLineOptions.addOption(OPT_METADATA, "printMetaData", false, "Prints metadata information");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__56)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__56)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ]} ] [ long {outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__56)).toString());
        Options o_testPrintHelpLongLines__57 = commandLineOptions.addOption(OPT_STACK_TRACE, "printStack", false, "Prints stack traces on errors");
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__57)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__57)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ]} ] [ long {printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__57)).toString());
        Option option = new Option(OPT_COLUMN_NAMES, "columnNames", true, ((("Column XML names; default names column labels. Example: " + OPT) + OPT_COLUMN_NAMES) + " \"cname1 cname2\""));
        Options o_testPrintHelpLongLines__60 = commandLineOptions.addOption(option);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__60)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__60)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ]} ] [ long {printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__60)).toString());
        option = new Option(OPT_PARAM_NAMES, "paramNames", true, ((("Parameter XML names; default names are param1, param2, etc. Example: " + OPT) + OPT_PARAM_NAMES) + " \"pname1 pname2\""));
        Options o_testPrintHelpLongLines__63 = commandLineOptions.addOption(option);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__63)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__63)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ]} ] [ long {printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__63)).toString());
        OptionGroup pOutTypesOptionGroup = new OptionGroup();
        String pOutTypesOptionGroupDoc = ((((OPT + OPT_PARAM_TYPES_INT) + " and ") + OPT) + OPT_PARAM_TYPES_NAME) + " are mutually exclusive.";
        Assert.assertEquals("-y and -Y are mutually exclusive.", pOutTypesOptionGroupDoc);
        final String typesClassName = Types.class.getName();
        Assert.assertEquals("java.sql.Types", typesClassName);
        option = new Option(OPT_PARAM_TYPES_INT, "paramTypes", true, ((((((("Parameter types from " + typesClassName) + ". ") + pOutTypesOptionGroupDoc) + " Example: ") + OPT) + OPT_PARAM_TYPES_INT) + " \"-10 12\""));
        Options o_testPrintHelpLongLines__72 = commandLineOptions.addOption(option);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__72)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__72)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ]} ] [ long {printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__72)).toString());
        option = new Option(OPT_PARAM_TYPES_NAME, "paramTypeNames", true, ((((((("Parameter " + typesClassName) + " names. ") + pOutTypesOptionGroupDoc) + " Example: ") + OPT) + OPT_PARAM_TYPES_NAME) + " \"CURSOR VARCHAR\""));
        Options o_testPrintHelpLongLines__75 = commandLineOptions.addOption(option);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__75)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__75)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__75)).toString());
        Options o_testPrintHelpLongLines__76 = commandLineOptions.addOptionGroup(pOutTypesOptionGroup);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__76)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__76)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__76)).toString());
        OptionGroup modesOptionGroup = new OptionGroup();
        String modesOptionGroupDoc = ((((OPT + OPT_PARAM_MODES_INT) + " and ") + OPT) + OPT_PARAM_MODES_NAME) + " are mutually exclusive.";
        Assert.assertEquals("-o and -O are mutually exclusive.", modesOptionGroupDoc);
        option = new Option(OPT_PARAM_MODES_INT, "paramModes", true, (((((((((((((((((("Parameters modes (" + (ParameterMetaData.parameterModeIn)) + "=IN, ") + (ParameterMetaData.parameterModeInOut)) + "=INOUT, ") + (ParameterMetaData.parameterModeOut)) + "=OUT, ") + (ParameterMetaData.parameterModeUnknown)) + "=Unknown") + "). ") + modesOptionGroupDoc) + " Example for 2 parameters, OUT and IN: ") + OPT) + OPT_PARAM_MODES_INT) + " \"") + (ParameterMetaData.parameterModeOut)) + " ") + (ParameterMetaData.parameterModeIn)) + "\""));
        OptionGroup o_testPrintHelpLongLines__83 = modesOptionGroup.addOption(option);
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__83)).getOptions().isEmpty());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__83)).isRequired());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__83)).getNames().isEmpty());
        Assert.assertNull(((OptionGroup) (o_testPrintHelpLongLines__83)).getSelected());
        Assert.assertEquals("[-o Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\"]", ((OptionGroup) (o_testPrintHelpLongLines__83)).toString());
        option = new Option(OPT_PARAM_MODES_NAME, "paramModeNames", true, ((((((((((("Parameters mode names (" + PMODES) + "). ") + modesOptionGroupDoc) + " Example for 2 parameters, OUT and IN: ") + OPT) + OPT_PARAM_MODES_NAME) + " \"") + _PMODE_OUT) + " ") + _PMODE_IN) + "\""));
        OptionGroup o_testPrintHelpLongLines__86 = modesOptionGroup.addOption(option);
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__86)).getOptions().isEmpty());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__86)).isRequired());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__86)).getNames().isEmpty());
        Assert.assertNull(((OptionGroup) (o_testPrintHelpLongLines__86)).getSelected());
        Assert.assertEquals("[-o Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\", -O Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\"]", ((OptionGroup) (o_testPrintHelpLongLines__86)).toString());
        Options o_testPrintHelpLongLines__87 = commandLineOptions.addOptionGroup(modesOptionGroup);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__87)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__87)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__87)).toString());
        option = new Option(null, OPT_TRIM_L, true, "Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.");
        option.setOptionalArg(true);
        Options o_testPrintHelpLongLines__91 = commandLineOptions.addOption(option);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__91)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__91)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__91)).toString());
        option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true, "Converts the JDBC file in the first argument to an SMFD file specified in the second argument.");
        option.setArgs(2);
        Options o_testPrintHelpLongLines__95 = commandLineOptions.addOption(option);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__95)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__95)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__95)).toString());
        new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);
        Assert.assertEquals("-", OPT);
        Assert.assertEquals("l", OPT_COLUMN_NAMES);
        Assert.assertEquals("c", OPT_CONNECTION);
        Assert.assertEquals("e", OPT_DESCRIPTION);
        Assert.assertEquals("d", OPT_DRIVER);
        Assert.assertEquals("n", OPT_DRIVER_INFO);
        Assert.assertEquals("b", OPT_FILE_BINDING);
        Assert.assertEquals("j", OPT_FILE_JDBC);
        Assert.assertEquals("f", OPT_FILE_SFMD);
        Assert.assertEquals("h", OPT_HELP);
        Assert.assertEquals("help", OPT_HELP_);
        Assert.assertEquals("i", OPT_INTERACTIVE);
        Assert.assertEquals("2", OPT_JDBC_TO_SFMD);
        Assert.assertEquals("jdbc2sfmd", OPT_JDBC_TO_SFMD_L);
        Assert.assertEquals("m", OPT_METADATA);
        Assert.assertEquals("o", OPT_PARAM_MODES_INT);
        Assert.assertEquals("O", OPT_PARAM_MODES_NAME);
        Assert.assertEquals("a", OPT_PARAM_NAMES);
        Assert.assertEquals("y", OPT_PARAM_TYPES_INT);
        Assert.assertEquals("Y", OPT_PARAM_TYPES_NAME);
        Assert.assertEquals("p", OPT_PASSWORD);
        Assert.assertEquals("password", OPT_PASSWORD_L);
        Assert.assertEquals("s", OPT_SQL);
        Assert.assertEquals("sql", OPT_SQL_L);
        Assert.assertEquals("###", OPT_SQL_SPLIT_DEFAULT);
        Assert.assertEquals("splitSql", OPT_SQL_SPLIT_L);
        Assert.assertEquals("t", OPT_STACK_TRACE);
        Assert.assertEquals("g", OPT_TIMING);
        Assert.assertEquals("trim", OPT_TRIM_L);
        Assert.assertEquals("u", OPT_USER);
        Assert.assertEquals("w", OPT_WRITE_TO_FILE);
        Assert.assertEquals("IN", _PMODE_IN);
        Assert.assertEquals("INOUT", _PMODE_INOUT);
        Assert.assertEquals("OUT", _PMODE_OUT);
        Assert.assertEquals("Unknown", _PMODE_UNK);
        Assert.assertEquals("IN, INOUT, OUT, Unknown", PMODES);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__42)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__42)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__42)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__43)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__43)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__43)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__44)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__44)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__44)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__45)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__45)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__45)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__46)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__46)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__46)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__47)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__47)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__47)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__48)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__48)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__48)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__49)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__49)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__49)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__50)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__50)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__50)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__51)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__51)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__51)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__52)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__52)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__52)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__53)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__53)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__53)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__54)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__54)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__54)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__55)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__55)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__55)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__56)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__56)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__56)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__57)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__57)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__57)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__60)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__60)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__60)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__63)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__63)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__63)).toString());
        Assert.assertEquals("-y and -Y are mutually exclusive.", pOutTypesOptionGroupDoc);
        Assert.assertEquals("java.sql.Types", typesClassName);
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__72)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__72)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__72)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__75)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__75)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__75)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__76)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__76)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__76)).toString());
        Assert.assertEquals("-o and -O are mutually exclusive.", modesOptionGroupDoc);
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__83)).getOptions().isEmpty());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__83)).isRequired());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__83)).getNames().isEmpty());
        Assert.assertNull(((OptionGroup) (o_testPrintHelpLongLines__83)).getSelected());
        Assert.assertEquals("[-o Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\", -O Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\"]", ((OptionGroup) (o_testPrintHelpLongLines__83)).toString());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__86)).getOptions().isEmpty());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__86)).isRequired());
        Assert.assertFalse(((OptionGroup) (o_testPrintHelpLongLines__86)).getNames().isEmpty());
        Assert.assertNull(((OptionGroup) (o_testPrintHelpLongLines__86)).getSelected());
        Assert.assertEquals("[-o Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\", -O Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\"]", ((OptionGroup) (o_testPrintHelpLongLines__86)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__87)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__87)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__87)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__91)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__91)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__91)).toString());
        Assert.assertFalse(((Options) (o_testPrintHelpLongLines__95)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (o_testPrintHelpLongLines__95)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], b=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], c=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], d=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], e=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], f=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ], g=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], h=[ option: h help  :: Prints help and quits :: class java.lang.String ], i=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], j=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], l=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], m=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], n=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], o=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], O=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], p=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], 2=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], s=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], t=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], u=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], w=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], y=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], Y=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ]} ] [ long {paramModes=[ option: o paramModes  [ARG] :: Parameters modes (1=IN, 2=INOUT, 4=OUT, 0=Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -o \"4 1\" :: class java.lang.String ], paramTypeNames=[ option: Y paramTypeNames  [ARG] :: Parameter java.sql.Types names. -y and -Y are mutually exclusive. Example: -Y \"CURSOR VARCHAR\" :: class java.lang.String ], printStack=[ option: t printStack  :: Prints stack traces on errors :: class java.lang.String ], paramTypes=[ option: y paramTypes  [ARG] :: Parameter types from java.sql.Types. -y and -Y are mutually exclusive. Example: -y \"-10 12\" :: class java.lang.String ], outfile=[ option: w outfile  [ARG] :: Writes the SQL output to the given file :: class java.lang.String ], interactive=[ option: i interactive  :: Runs in interactive mode, reading and writing from the console, \'go\' or \'/\' sends a statement :: class java.lang.String ], description=[ option: e description  [ARG] :: SFMD description. A default description is used if omited. Example: -e \"Runs such and such\" :: class java.lang.String ], jdbc=[ option: b jdbc  [ARG] :: Writes a JDBC binding node file for the given SQL :: class java.lang.String ], printTiming=[ option: g printTiming  :: Prints timing information :: class java.lang.String ], url=[ option: c url  [ARG] :: Connection URL :: class java.lang.String ], sql=[ option: s sql  [ARG] :: Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)} :: class java.lang.String ], paramNames=[ option: a paramNames  [ARG] :: Parameter XML names; default names are param1, param2, etc. Example: -a \"pname1 pname2\" :: class java.lang.String ], help=[ option: h help  :: Prints help and quits :: class java.lang.String ], node=[ option: j node  [ARG] :: Writes a JDBC node file for the given SQL (internal debugging) :: class java.lang.String ], password=[ option: p password  [ARG] :: The database password for the user specified with the -u option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords :: class java.lang.String ], driver=[ option: d driver  [ARG] :: JDBC driver class name :: class java.lang.String ], columnNames=[ option: l columnNames  [ARG] :: Column XML names; default names column labels. Example: -l \"cname1 cname2\" :: class java.lang.String ], trim=[ option: null trim  [ARG] :: Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim. :: class java.lang.String ], jdbc2sfmd=[ option: 2 jdbc2sfmd [ARG...] :: Converts the JDBC file in the first argument to an SMFD file specified in the second argument. :: class java.lang.String ], paramModeNames=[ option: O paramModeNames  [ARG] :: Parameters mode names (IN, INOUT, OUT, Unknown). -o and -O are mutually exclusive. Example for 2 parameters, OUT and IN: -O \"OUT IN\" :: class java.lang.String ], printMetaData=[ option: m printMetaData  :: Prints metadata information :: class java.lang.String ], user=[ option: u user  [ARG] :: A database user name :: class java.lang.String ], info=[ option: n info  :: Prints driver information and properties. If -c is not specified, all drivers on the classpath are displayed. :: class java.lang.String ], sfmd=[ option: f sfmd  [ARG] :: Writes a SFMD file for the given SQL :: class java.lang.String ]} ]", ((Options) (o_testPrintHelpLongLines__95)).toString());
    }
}

