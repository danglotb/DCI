package org.apache.commons.cli;


import junit.framework.TestCase;
import org.junit.Assert;
import org.junit.Test;


public class AmplApplicationTest {
    @Test(timeout = 10000)
    public void testMan() throws Exception {
        String cmdLine = "man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] " + "[-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...";
        Assert.assertEquals("man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...", cmdLine);
        Options options = new Options().addOption("a", "all", false, "find all matching manual pages.").addOption("d", "debug", false, "emit debugging messages.").addOption("e", "extension", false, "limit search to extension type 'extension'.").addOption("f", "whatis", false, "equivalent to whatis.").addOption("k", "apropos", false, "equivalent to apropos.").addOption("w", "location", false, "print physical location of man page(s).").addOption("l", "local-file", false, "interpret 'page' argument(s) as local filename(s)").addOption("u", "update", false, "force a cache consistency check.").addOption("r", "prompt", true, "provide 'less' pager with prompt.").addOption("c", "catman", false, "used by catman to reformat out of date cat pages.").addOption("7", "ascii", false, "display ASCII translation or certain latin1 chars.").addOption("t", "troff", false, "use troff format pages.").addOption("T", "troff-device", true, "use groff with selected device.").addOption("Z", "ditroff", false, "use groff with selected device.").addOption("D", "default", false, "reset all options to their default values.").addOption("M", "manpath", true, "set search path for manual pages to 'path'.").addOption("P", "pager", true, "use program 'pager' to display output.").addOption("S", "sections", true, "use colon separated section list.").addOption("m", "systems", true, "search for man pages from other unix system(s).").addOption("L", "locale", true, "define the locale for this particular man search.").addOption("p", "preprocessor", true, ("string indicates which preprocessor to run.\n" + (" e - [n]eqn  p - pic     t - tbl\n" + " g - grap    r - refer   v - vgrind"))).addOption("V", "version", false, "show version.").addOption("h", "help", false, "show this usage message.");
        Assert.assertFalse(((Options) (options)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (options)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a all  :: find all matching manual pages. :: class java.lang.String ], c=[ option: c catman  :: used by catman to reformat out of date cat pages. :: class java.lang.String ], d=[ option: d debug  :: emit debugging messages. :: class java.lang.String ], D=[ option: D default  :: reset all options to their default values. :: class java.lang.String ], e=[ option: e extension  :: limit search to extension type \'extension\'. :: class java.lang.String ], f=[ option: f whatis  :: equivalent to whatis. :: class java.lang.String ], h=[ option: h help  :: show this usage message. :: class java.lang.String ], k=[ option: k apropos  :: equivalent to apropos. :: class java.lang.String ], l=[ option: l local-file  :: interpret \'page\' argument(s) as local filename(s) :: class java.lang.String ], L=[ option: L locale  [ARG] :: define the locale for this particular man search. :: class java.lang.String ], M=[ option: M manpath  [ARG] :: set search path for manual pages to \'path\'. :: class java.lang.String ], m=[ option: m systems  [ARG] :: search for man pages from other unix system(s). :: class java.lang.String ], P=[ option: P pager  [ARG] :: use program \'pager\' to display output. :: class java.lang.String ], p=[ option: p preprocessor  [ARG] :: string indicates which preprocessor to run.\n e - [n]eqn  p - pic     t - tbl\n g - grap    r - refer   v - vgrind :: class java.lang.String ], r=[ option: r prompt  [ARG] :: provide \'less\' pager with prompt. :: class java.lang.String ], S=[ option: S sections  [ARG] :: use colon separated section list. :: class java.lang.String ], t=[ option: t troff  :: use troff format pages. :: class java.lang.String ], T=[ option: T troff-device  [ARG] :: use groff with selected device. :: class java.lang.String ], u=[ option: u update  :: force a cache consistency check. :: class java.lang.String ], V=[ option: V version  :: show version. :: class java.lang.String ], w=[ option: w location  :: print physical location of man page(s). :: class java.lang.String ], 7=[ option: 7 ascii  :: display ASCII translation or certain latin1 chars. :: class java.lang.String ], Z=[ option: Z ditroff  :: use groff with selected device. :: class java.lang.String ]} ] [ long {all=[ option: a all  :: find all matching manual pages. :: class java.lang.String ], extension=[ option: e extension  :: limit search to extension type \'extension\'. :: class java.lang.String ], debug=[ option: d debug  :: emit debugging messages. :: class java.lang.String ], preprocessor=[ option: p preprocessor  [ARG] :: string indicates which preprocessor to run.\n e - [n]eqn  p - pic     t - tbl\n g - grap    r - refer   v - vgrind :: class java.lang.String ], update=[ option: u update  :: force a cache consistency check. :: class java.lang.String ], troff=[ option: t troff  :: use troff format pages. :: class java.lang.String ], locale=[ option: L locale  [ARG] :: define the locale for this particular man search. :: class java.lang.String ], version=[ option: V version  :: show version. :: class java.lang.String ], sections=[ option: S sections  [ARG] :: use colon separated section list. :: class java.lang.String ], local-file=[ option: l local-file  :: interpret \'page\' argument(s) as local filename(s) :: class java.lang.String ], manpath=[ option: M manpath  [ARG] :: set search path for manual pages to \'path\'. :: class java.lang.String ], help=[ option: h help  :: show this usage message. :: class java.lang.String ], default=[ option: D default  :: reset all options to their default values. :: class java.lang.String ], pager=[ option: P pager  [ARG] :: use program \'pager\' to display output. :: class java.lang.String ], systems=[ option: m systems  [ARG] :: search for man pages from other unix system(s). :: class java.lang.String ], whatis=[ option: f whatis  :: equivalent to whatis. :: class java.lang.String ], ditroff=[ option: Z ditroff  :: use groff with selected device. :: class java.lang.String ], catman=[ option: c catman  :: used by catman to reformat out of date cat pages. :: class java.lang.String ], location=[ option: w location  :: print physical location of man page(s). :: class java.lang.String ], troff-device=[ option: T troff-device  [ARG] :: use groff with selected device. :: class java.lang.String ], apropos=[ option: k apropos  :: equivalent to apropos. :: class java.lang.String ], prompt=[ option: r prompt  [ARG] :: provide \'less\' pager with prompt. :: class java.lang.String ], ascii=[ option: 7 ascii  :: display ASCII translation or certain latin1 chars. :: class java.lang.String ]} ]", ((Options) (options)).toString());
        HelpFormatter hf = new HelpFormatter();
        Assert.assertEquals("arg", ((HelpFormatter) (hf)).getArgName());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (hf)).getWidth())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (hf)).getLeftPadding())));
        Assert.assertEquals(3, ((int) (((HelpFormatter) (hf)).getDescPadding())));
        Assert.assertEquals("usage: ", ((HelpFormatter) (hf)).getSyntaxPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (hf)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (hf)).getOptPrefix());
        Assert.assertEquals("--", ((HelpFormatter) (hf)).getLongOptPrefix());
        Assert.assertEquals(" ", ((HelpFormatter) (hf)).getLongOptSeparator());
        hf.printHelp(60, cmdLine, null, options, null);
        Assert.assertEquals("man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section] page ...", cmdLine);
        Assert.assertFalse(((Options) (options)).getOptions().isEmpty());
        Assert.assertTrue(((Options) (options)).getRequiredOptions().isEmpty());
        Assert.assertEquals("[ Options: [ short {a=[ option: a all  :: find all matching manual pages. :: class java.lang.String ], c=[ option: c catman  :: used by catman to reformat out of date cat pages. :: class java.lang.String ], d=[ option: d debug  :: emit debugging messages. :: class java.lang.String ], D=[ option: D default  :: reset all options to their default values. :: class java.lang.String ], e=[ option: e extension  :: limit search to extension type \'extension\'. :: class java.lang.String ], f=[ option: f whatis  :: equivalent to whatis. :: class java.lang.String ], h=[ option: h help  :: show this usage message. :: class java.lang.String ], k=[ option: k apropos  :: equivalent to apropos. :: class java.lang.String ], l=[ option: l local-file  :: interpret \'page\' argument(s) as local filename(s) :: class java.lang.String ], L=[ option: L locale  [ARG] :: define the locale for this particular man search. :: class java.lang.String ], M=[ option: M manpath  [ARG] :: set search path for manual pages to \'path\'. :: class java.lang.String ], m=[ option: m systems  [ARG] :: search for man pages from other unix system(s). :: class java.lang.String ], P=[ option: P pager  [ARG] :: use program \'pager\' to display output. :: class java.lang.String ], p=[ option: p preprocessor  [ARG] :: string indicates which preprocessor to run.\n e - [n]eqn  p - pic     t - tbl\n g - grap    r - refer   v - vgrind :: class java.lang.String ], r=[ option: r prompt  [ARG] :: provide \'less\' pager with prompt. :: class java.lang.String ], S=[ option: S sections  [ARG] :: use colon separated section list. :: class java.lang.String ], t=[ option: t troff  :: use troff format pages. :: class java.lang.String ], T=[ option: T troff-device  [ARG] :: use groff with selected device. :: class java.lang.String ], u=[ option: u update  :: force a cache consistency check. :: class java.lang.String ], V=[ option: V version  :: show version. :: class java.lang.String ], w=[ option: w location  :: print physical location of man page(s). :: class java.lang.String ], 7=[ option: 7 ascii  :: display ASCII translation or certain latin1 chars. :: class java.lang.String ], Z=[ option: Z ditroff  :: use groff with selected device. :: class java.lang.String ]} ] [ long {all=[ option: a all  :: find all matching manual pages. :: class java.lang.String ], extension=[ option: e extension  :: limit search to extension type \'extension\'. :: class java.lang.String ], debug=[ option: d debug  :: emit debugging messages. :: class java.lang.String ], preprocessor=[ option: p preprocessor  [ARG] :: string indicates which preprocessor to run.\n e - [n]eqn  p - pic     t - tbl\n g - grap    r - refer   v - vgrind :: class java.lang.String ], update=[ option: u update  :: force a cache consistency check. :: class java.lang.String ], troff=[ option: t troff  :: use troff format pages. :: class java.lang.String ], locale=[ option: L locale  [ARG] :: define the locale for this particular man search. :: class java.lang.String ], version=[ option: V version  :: show version. :: class java.lang.String ], sections=[ option: S sections  [ARG] :: use colon separated section list. :: class java.lang.String ], local-file=[ option: l local-file  :: interpret \'page\' argument(s) as local filename(s) :: class java.lang.String ], manpath=[ option: M manpath  [ARG] :: set search path for manual pages to \'path\'. :: class java.lang.String ], help=[ option: h help  :: show this usage message. :: class java.lang.String ], default=[ option: D default  :: reset all options to their default values. :: class java.lang.String ], pager=[ option: P pager  [ARG] :: use program \'pager\' to display output. :: class java.lang.String ], systems=[ option: m systems  [ARG] :: search for man pages from other unix system(s). :: class java.lang.String ], whatis=[ option: f whatis  :: equivalent to whatis. :: class java.lang.String ], ditroff=[ option: Z ditroff  :: use groff with selected device. :: class java.lang.String ], catman=[ option: c catman  :: used by catman to reformat out of date cat pages. :: class java.lang.String ], location=[ option: w location  :: print physical location of man page(s). :: class java.lang.String ], troff-device=[ option: T troff-device  [ARG] :: use groff with selected device. :: class java.lang.String ], apropos=[ option: k apropos  :: equivalent to apropos. :: class java.lang.String ], prompt=[ option: r prompt  [ARG] :: provide \'less\' pager with prompt. :: class java.lang.String ], ascii=[ option: 7 ascii  :: display ASCII translation or certain latin1 chars. :: class java.lang.String ]} ]", ((Options) (options)).toString());
        Assert.assertEquals("arg", ((HelpFormatter) (hf)).getArgName());
        Assert.assertEquals(74, ((int) (((HelpFormatter) (hf)).getWidth())));
        Assert.assertEquals(1, ((int) (((HelpFormatter) (hf)).getLeftPadding())));
        Assert.assertEquals(3, ((int) (((HelpFormatter) (hf)).getDescPadding())));
        Assert.assertEquals("usage: ", ((HelpFormatter) (hf)).getSyntaxPrefix());
        Assert.assertEquals("\n", ((HelpFormatter) (hf)).getNewLine());
        Assert.assertEquals("-", ((HelpFormatter) (hf)).getOptPrefix());
        Assert.assertEquals("--", ((HelpFormatter) (hf)).getLongOptPrefix());
        Assert.assertEquals(" ", ((HelpFormatter) (hf)).getLongOptSeparator());
    }
}

