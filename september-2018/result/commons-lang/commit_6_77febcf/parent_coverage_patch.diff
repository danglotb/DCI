diff --git a/src/main/java/org/apache/commons/lang3/ArchUtils.java b/src/main/java/org/apache/commons/lang3/ArchUtils.java
index 4b0d3ff4..05f2f8ae 100644
--- a/src/main/java/org/apache/commons/lang3/ArchUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ArchUtils.java
@@ -86,10 +86,12 @@ private static void init_PPC_64Bit() {
      * @throws IllegalStateException If the key already exists.
      */
     private static void addProcessor(final String key, final Processor processor) {
-        if (ARCH_TO_PROCESSOR.containsKey(key)) {
-            throw new IllegalStateException("Key " + key + " already exists in processor map");
+        if (!ARCH_TO_PROCESSOR.containsKey(key)) {
+            ARCH_TO_PROCESSOR.put(key, processor);
+        } else {
+            final String msg = "Key " + key + " already exists in processor map";
+            throw new IllegalStateException(msg);
         }
-        ARCH_TO_PROCESSOR.put(key, processor);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/lang3/BitField.java b/src/main/java/org/apache/commons/lang3/BitField.java
index dc70df4a..bc2147e0 100644
--- a/src/main/java/org/apache/commons/lang3/BitField.java
+++ b/src/main/java/org/apache/commons/lang3/BitField.java
@@ -84,7 +84,7 @@
      */
     public BitField(final int mask) {
         _mask = mask;
-        _shift_count = mask == 0 ? 0 : Integer.numberOfTrailingZeros(mask);
+        _shift_count = mask != 0 ? Integer.numberOfTrailingZeros(mask) : 0;
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/lang3/ObjectUtils.java b/src/main/java/org/apache/commons/lang3/ObjectUtils.java
index c3b031e5..c18e33b4 100644
--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java
@@ -689,14 +689,14 @@ public static String toString(final Object obj, final String nullStr) {
             final Object result;
             if (obj.getClass().isArray()) {
                 final Class<?> componentType = obj.getClass().getComponentType();
-                if (componentType.isPrimitive()) {
+                if (!componentType.isPrimitive()) {
+                    result = ((Object[]) obj).clone();
+                } else {
                     int length = Array.getLength(obj);
                     result = Array.newInstance(componentType, length);
                     while (length-- > 0) {
                         Array.set(result, length, Array.get(obj, length));
                     }
-                } else {
-                    result = ((Object[]) obj).clone();
                 }
             } else {
                 try {
diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java
index 1d7b9b99..ff06e8cc 100644
--- a/src/main/java/org/apache/commons/lang3/StringUtils.java
+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java
@@ -8857,15 +8857,15 @@ public static String normalizeSpace(final String str) {
         for (int i = 0; i < size; i++) {
             final char actualChar = str.charAt(i);
             final boolean isWhitespace = Character.isWhitespace(actualChar);
-            if (isWhitespace) {
+            if (!isWhitespace) {
+                startWhitespaces = false;
+                newChars[count++] = (actualChar == 160 ? 32 : actualChar);
+                whitespacesCount = 0;
+            } else {
                 if (whitespacesCount == 0 && !startWhitespaces) {
                     newChars[count++] = SPACE.charAt(0);
                 }
                 whitespacesCount++;
-            } else {
-                startWhitespaces = false;
-                newChars[count++] = (actualChar == 160 ? 32 : actualChar);
-                whitespacesCount = 0;
             }
         }
         if (startWhitespaces) {
diff --git a/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java b/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
index f4082a90..0884543b 100644
--- a/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
@@ -600,10 +600,10 @@ public CompareToBuilder append(final boolean lhs, final boolean rhs) {
         if (lhs == rhs) {
             return this;
         }
-        if (lhs) {
-            comparison = +1;
-        } else {
+        if (!lhs) {
             comparison = -1;
+        } else {
+            comparison = +1;
         }
         return this;
     }
diff --git a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
index 2af57c30..22ad16c0 100644
--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
@@ -637,17 +637,17 @@ public EqualsBuilder append(final Object lhs, final Object rhs) {
             return this;
         }
         final Class<?> lhsClass = lhs.getClass();
-        if (lhsClass.isArray()) {
-            // factor out array case in order to keep method small enough
-            // to be inlined
-            appendArray(lhs, rhs);
-        } else {
+        if (!lhsClass.isArray()) {
             // The simple case, not an array, just test the element
             if (testRecursive && !ClassUtils.isPrimitiveOrWrapper(lhsClass)) {
                 reflectionAppend(lhs, rhs);
             } else {
                 isEquals = lhs.equals(rhs);
             }
+        } else {
+            // factor out array case in order to keep method small enough
+            // to be inlined
+            appendArray(lhs, rhs);
         }
         return this;
     }
diff --git a/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java b/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java
index 4a0a2e24..daac0261 100644
--- a/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java
+++ b/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java
@@ -469,8 +469,8 @@ public long getCheckIntervalStart() {
          * @return the updated instance
          */
         public CheckIntervalData increment(final int delta) {
-            return (delta == 0) ? this : new CheckIntervalData(getEventCount() + delta,
-                    getCheckIntervalStart());
+            return (delta != 0) ? new CheckIntervalData(getEventCount() + delta,
+                    getCheckIntervalStart()) : this;
         }
     }
 
diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
index 05eeb47e..6f31af38 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
@@ -958,7 +958,7 @@ int modify(final FastDateParser parser, final int iValue) {
     private static final Strategy DAY_OF_WEEK_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK) {
         @Override
         int modify(final FastDateParser parser, final int iValue) {
-            return iValue == 7 ? Calendar.SUNDAY : iValue + 1;
+            return iValue != 7 ? iValue + 1 : Calendar.SUNDAY;
         }
     };
 
diff --git a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
index eaf95e88..df7af4eb 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
@@ -1266,7 +1266,7 @@ public int estimateLength() {
         @Override
         public void appendTo(final Appendable buffer, final Calendar calendar) throws IOException {
             final int value = calendar.get(Calendar.DAY_OF_WEEK);
-            mRule.appendTo(buffer, value == Calendar.SUNDAY ? 7 : value - 1);
+            mRule.appendTo(buffer, value != Calendar.SUNDAY ? value - 1 : 7);
         }
 
         @Override
@@ -1369,10 +1369,10 @@ public int estimateLength() {
         @Override
         public void appendTo(final Appendable buffer, final Calendar calendar) throws IOException {
             final TimeZone zone = calendar.getTimeZone();
-            if (calendar.get(Calendar.DST_OFFSET) == 0) {
-                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));
-            } else {
+            if (calendar.get(Calendar.DST_OFFSET) != 0) {
                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));
+            } else {
+                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));
             }
         }
     }
