diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java
index 42b05ad..c7c602e 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/embed/EmbeddableComponentManager.java
@@ -98,7 +98,7 @@ public ComponentEntry(ComponentDescriptor<R> descriptor, R instance)
         }
     }
 
-    private Map<Type, Map<String, ComponentEntry<?>>> componentEntries = new ConcurrentHashMap<>();
+    private Map<RoleHint<?>, ComponentEntry<?>> componentEntries = new ConcurrentHashMap<>();
 
     private Logger logger = LoggerFactory.getLogger(EmbeddableComponentManager.class);
 
@@ -165,51 +165,29 @@ public void initialize(ClassLoader classLoader)
     @Override
     public boolean hasComponent(Type role)
     {
-        return hasComponent(role, null);
+        return hasComponent(role, "default");
     }
 
     @Override
-    public boolean hasComponent(Type roleType, String roleHint)
+    public boolean hasComponent(Type role, String hint)
     {
-        if (getComponentEntry(roleType, roleHint) != null) {
+        if (this.componentEntries.containsKey(new RoleHint<>(role, hint))) {
             return true;
         }
 
-        return getParent() != null ? getParent().hasComponent(roleType, roleHint) : false;
+        return getParent() != null ? getParent().hasComponent(role, hint) : false;
     }
 
     @Override
     public <T> T getInstance(Type roleType) throws ComponentLookupException
     {
-        return getInstance(roleType, null);
+        return getComponentInstance(new RoleHint<T>(roleType));
     }
 
     @Override
     public <T> T getInstance(Type roleType, String roleHint) throws ComponentLookupException
     {
-        T instance;
-
-        ComponentEntry<T> componentEntry = (ComponentEntry<T>) getComponentEntry(roleType, roleHint);
-
-        if (componentEntry != null) {
-            try {
-                instance = getComponentInstance(componentEntry);
-            } catch (Throwable e) {
-                throw new ComponentLookupException(
-                    String.format("Failed to lookup component [%s] identified by type [%s] and hint [%s]",
-                        componentEntry.descriptor.getImplementation().getName(), roleType, roleHint),
-                    e);
-            }
-        } else {
-            if (getParent() != null) {
-                instance = getParent().getInstance(roleType, roleHint);
-            } else {
-                throw new ComponentLookupException(
-                    "Can't find descriptor for the component with type [" + roleType + "] and hint [" + roleHint + "]");
-            }
-        }
-
-        return instance;
+        return getComponentInstance(new RoleHint<T>(roleType, roleHint));
     }
 
     @Override
@@ -219,51 +197,38 @@ public boolean hasComponent(Type roleType, String roleHint)
         // Component Manager
         Map<String, T> objects = getInstanceMap(role);
 
-        return objects.isEmpty() ? Collections.<T>emptyList() : new ArrayList<>(objects.values());
+        return objects.isEmpty() ? Collections.<T>emptyList() : new ArrayList<T>(objects.values());
     }
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T> Map<String, T> getInstanceMap(Type roleType) throws ComponentLookupException
+    public <T> Map<String, T> getInstanceMap(Type role) throws ComponentLookupException
     {
-        Map<String, T> components = new HashMap<>();
+        Map<String, T> objects = new HashMap<>();
 
-        Map<String, ComponentEntry<?>> entries = this.componentEntries.get(roleType);
+        for (Map.Entry<RoleHint<?>, ComponentEntry<?>> entry : this.componentEntries.entrySet()) {
+            RoleHint<?> roleHint = entry.getKey();
 
-        // Add local components
-        if (entries != null) {
-            for (Map.Entry<String, ComponentEntry<?>> entry : entries.entrySet()) {
+            if (role.equals(roleHint.getRoleType())) {
                 try {
-                    components.put(entry.getKey(), getComponentInstance((ComponentEntry<T>) entry.getValue()));
+                    objects.put(roleHint.getHint(), getComponentInstance((ComponentEntry<T>) entry.getValue()));
                 } catch (Exception e) {
-                    throw new ComponentLookupException(
-                        "Failed to lookup component with type [" + roleType + "] and hint [" + entry.getKey() + "]", e);
+                    throw new ComponentLookupException("Failed to lookup component [" + roleHint + "]", e);
                 }
             }
         }
 
-        // Add parent components
+        // Add parent's list of components
         if (getParent() != null) {
             // If the hint already exists in the children Component Manager then don't add the one from the parent.
-            for (Map.Entry<String, T> entry : getParent().<T>getInstanceMap(roleType).entrySet()) {
-                if (!components.containsKey(entry.getKey())) {
-                    components.put(entry.getKey(), entry.getValue());
+            for (Map.Entry<String, T> entry : getParent().<T>getInstanceMap(role).entrySet()) {
+                if (!objects.containsKey(entry.getKey())) {
+                    objects.put(entry.getKey(), entry.getValue());
                 }
             }
         }
 
-        return components;
-    }
-
-    private ComponentEntry<?> getComponentEntry(Type role, String hint)
-    {
-        Map<String, ComponentEntry<?>> entries = this.componentEntries.get(role);
-
-        if (entries != null) {
-            return entries.get(hint != null ? hint : RoleHint.DEFAULT_HINT);
-        }
-
-        return null;
+        return objects;
     }
 
     @Override
@@ -271,15 +236,14 @@ public boolean hasComponent(Type roleType, String roleHint)
     public <T> ComponentDescriptor<T> getComponentDescriptor(Type role, String hint)
     {
         ComponentDescriptor<T> result = null;
-
-        ComponentEntry<?> componentEntry = getComponentEntry(role, hint);
+        ComponentEntry<T> componentEntry = (ComponentEntry<T>) this.componentEntries.get(new RoleHint<T>(role, hint));
         if (componentEntry == null) {
             // Check in parent!
             if (getParent() != null) {
                 result = getParent().getComponentDescriptor(role, hint);
             }
         } else {
-            result = (ComponentDescriptor<T>) componentEntry.descriptor;
+            result = componentEntry.descriptor;
         }
 
         return result;
@@ -291,15 +255,13 @@ public boolean hasComponent(Type roleType, String roleHint)
     {
         Map<String, ComponentDescriptor<T>> descriptors = new HashMap<>();
 
-        // Add local descriptors
-        Map<String, ComponentEntry<?>> enries = this.componentEntries.get(role);
-        if (enries != null) {
-            for (Map.Entry<String, ComponentEntry<?>> entry : enries.entrySet()) {
-                descriptors.put(entry.getKey(), (ComponentDescriptor<T>) entry.getValue().descriptor);
+        for (Map.Entry<RoleHint<?>, ComponentEntry<?>> entry : this.componentEntries.entrySet()) {
+            if (entry.getKey().getRoleType().equals(role)) {
+                descriptors.put(entry.getKey().getHint(), (ComponentDescriptor<T>) entry.getValue().descriptor);
             }
         }
 
-        // Add parent descriptors
+        // Add Component Descriptors found in parent first
         if (getParent() != null) {
             List<ComponentDescriptor<T>> parentDescriptors = getParent().getComponentDescriptorList(role);
             for (ComponentDescriptor<T> parentDescriptor : parentDescriptors) {
@@ -396,7 +358,7 @@ protected Object getDependencyInstance(ComponentDescriptor<?> descriptor, Object
                 fieldValue = createGenericProvider(descriptor, dependency);
             }
         } else if (dependencyRoleClass.isAssignableFrom(ComponentDescriptor.class)) {
-            fieldValue = new DefaultComponentDescriptor<>(descriptor);
+            fieldValue = new DefaultComponentDescriptor(descriptor);
         } else {
             fieldValue = getInstance(dependency.getRoleType(), dependency.getRoleHint());
         }
@@ -406,8 +368,8 @@ protected Object getDependencyInstance(ComponentDescriptor<?> descriptor, Object
 
     protected Provider<?> createGenericProvider(ComponentDescriptor<?> descriptor, ComponentDependency<?> dependency)
     {
-        return new GenericProvider<>(this, new RoleHint<>(
-            ReflectionUtils.getLastTypeGenericArgument(dependency.getRoleType()), dependency.getRoleHint()));
+        return new GenericProvider<>(this, new RoleHint<>(ReflectionUtils.getLastTypeGenericArgument(dependency
+            .getRoleType()), dependency.getRoleHint()));
     }
 
     /**
@@ -418,6 +380,31 @@ protected Object createLogger(Class<?> instanceClass)
         return LoggerFactory.getLogger(instanceClass);
     }
 
+    @SuppressWarnings("unchecked")
+    protected <T> T getComponentInstance(RoleHint<T> roleHint) throws ComponentLookupException
+    {
+        T instance;
+
+        ComponentEntry<T> componentEntry = (ComponentEntry<T>) this.componentEntries.get(roleHint);
+
+        if (componentEntry != null) {
+            try {
+                instance = getComponentInstance(componentEntry);
+            } catch (Throwable e) {
+                throw new ComponentLookupException(String.format("Failed to lookup component [%s] identified by [%s]",
+                    componentEntry.descriptor.getImplementation().getName(), roleHint.toString()), e);
+            }
+        } else {
+            if (getParent() != null) {
+                instance = getParent().getInstance(roleHint.getRoleType(), roleHint.getHint());
+            } else {
+                throw new ComponentLookupException("Can't find descriptor for the component [" + roleHint + "]");
+            }
+        }
+
+        return instance;
+    }
+
     private <T> T getComponentInstance(ComponentEntry<T> componentEntry) throws Exception
     {
         T instance;
@@ -430,7 +417,7 @@ protected Object createLogger(Class<?> instanceClass)
                 instance = componentEntry.instance;
             } else {
                 synchronized (componentEntry) {
-                    // Re-check in case it has been created while we were waiting
+                    // Recheck in case it has been created while we were waiting
                     if (componentEntry.instance != null) {
                         instance = componentEntry.instance;
                     } else {
@@ -448,6 +435,11 @@ protected Object createLogger(Class<?> instanceClass)
 
     // Add
 
+    private <T> RoleHint<T> getRoleHint(ComponentDescriptor<T> componentDescriptor)
+    {
+        return new RoleHint<T>(componentDescriptor.getRoleType(), componentDescriptor.getRoleHint());
+    }
+
     @Override
     public <T> void registerComponent(ComponentDescriptor<T> componentDescriptor) throws ComponentRepositoryException
     {
@@ -457,24 +449,21 @@ protected Object createLogger(Class<?> instanceClass)
     @Override
     public <T> void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)
     {
+        RoleHint<T> roleHint = getRoleHint(componentDescriptor);
+
         // Remove any existing component associated to the provided roleHint
-        removeComponentWithoutException(componentDescriptor.getRoleType(), componentDescriptor.getRoleHint());
+        removeComponentWithoutException(roleHint);
 
         // Register new component
-        addComponent(new DefaultComponentDescriptor<T>(componentDescriptor), componentInstance);
+        addComponent(roleHint, new DefaultComponentDescriptor<T>(componentDescriptor), componentInstance);
     }
 
-    private <T> void addComponent(ComponentDescriptor<T> descriptor, T instance)
+    private <T> void addComponent(RoleHint<T> roleHint, ComponentDescriptor<T> descriptor, T instance)
     {
-        ComponentEntry<T> componentEntry = new ComponentEntry<>(descriptor, instance);
+        ComponentEntry<T> componentEntry = new ComponentEntry<T>(descriptor, instance);
 
         // Register new component
-        Map<String, ComponentEntry<?>> entries = this.componentEntries.get(descriptor.getRoleType());
-        if (entries == null) {
-            entries = new ConcurrentHashMap<>();
-            this.componentEntries.put(descriptor.getRoleType(), entries);
-        }
-        entries.put(descriptor.getRoleHint(), componentEntry);
+        this.componentEntries.put(roleHint, componentEntry);
 
         // Send event about component registration
         if (this.eventManager != null) {
@@ -487,40 +476,38 @@ protected Object createLogger(Class<?> instanceClass)
     @Override
     public void unregisterComponent(Type role, String hint)
     {
-        removeComponentWithoutException(role, hint);
+        removeComponentWithoutException(new RoleHint<>(role, hint));
     }
 
     @Override
     public void unregisterComponent(ComponentDescriptor<?> componentDescriptor)
     {
-        if (Objects.equals(getComponentDescriptor(componentDescriptor.getRoleType(), componentDescriptor.getRoleHint()),
+        if (Objects.equals(
+            getComponentDescriptor(componentDescriptor.getRoleType(), componentDescriptor.getRoleHint()),
             componentDescriptor)) {
             unregisterComponent(componentDescriptor.getRoleType(), componentDescriptor.getRoleHint());
         }
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public void release(Object component) throws ComponentLifecycleException
     {
         // First find the descriptor matching the passed component
-        ComponentEntry<?> componentEntry = null;
-        for (Map<String, ComponentEntry<?>> entries : this.componentEntries.values()) {
-            for (ComponentEntry<?> entry : entries.values()) {
-                if (entry.instance == component) {
-                    componentEntry = entry;
-
-                    break;
-                }
+        RoleHint<?> key = null;
+        ComponentDescriptor<?> oldDescriptor = null;
+        for (Map.Entry<RoleHint<?>, ComponentEntry<?>> entry : this.componentEntries.entrySet()) {
+            if (entry.getValue().instance == component) {
+                key = entry.getKey();
+                oldDescriptor = entry.getValue().descriptor;
+                break;
             }
         }
 
         // Note that we're not removing inside the for loop above since it would cause a Concurrent
         // exception since we'd modify the map accessed by the iterator.
-        if (componentEntry != null) {
-            // Release the entry
-            releaseInstance(componentEntry);
-
-            // Warn others about it:
+        if (key != null) {
+            // We do the following:
             // - fire an unregistration event, to tell the world that this reference is now dead
             // - fire a registration event, to tell the world that it could get a new reference for this component
             // now
@@ -528,10 +515,8 @@ public void release(Object component) throws ComponentLifecycleException
             // been removed and thus discard its own reference to that component and look it up again.
             // Another solution would be to introduce a new event for Component creation/destruction (right now
             // we only send events for Component registration/unregistration).
-            if (this.eventManager != null) {
-                this.eventManager.notifyComponentUnregistered(componentEntry.descriptor, this);
-                this.eventManager.notifyComponentRegistered(componentEntry.descriptor, this);
-            }
+            removeComponent(key);
+            addComponent((RoleHint<Object>) key, (ComponentDescriptor<Object>) oldDescriptor, null);
         }
     }
 
@@ -557,29 +542,25 @@ private void releaseComponentEntry(ComponentEntry<?> componentEntry) throws Comp
         releaseInstance(componentEntry);
     }
 
-    private void removeComponent(Type role, String hint) throws ComponentLifecycleException
+    private void removeComponent(RoleHint<?> roleHint) throws ComponentLifecycleException
     {
         // Make sure to remove the entry from the map before destroying it to reduce at the minimum the risk of
         // lookupping something invalid
-        Map<String, ComponentEntry<?>> entries = this.componentEntries.get(role);
-
-        if (entries != null) {
-            ComponentEntry<?> componentEntry = entries.remove(hint != null ? hint : RoleHint.DEFAULT_HINT);
+        ComponentEntry<?> componentEntry = this.componentEntries.remove(roleHint);
 
-            if (componentEntry != null) {
-                ComponentDescriptor<?> oldDescriptor = componentEntry.descriptor;
+        if (componentEntry != null) {
+            ComponentDescriptor<?> oldDescriptor = componentEntry.descriptor;
 
-                // We don't want the component manager to dispose itself just because it's not registered as component*
-                // anymore
-                if (componentEntry.instance != this) {
-                    // clean any resource associated to the component instance and descriptor
-                    releaseComponentEntry(componentEntry);
-                }
+            // We don't want the component manager to dispose itself just because it's not registered as component*
+            // anymore
+            if (componentEntry.instance != this) {
+                // clean any resource associated to the component instance and descriptor
+                releaseComponentEntry(componentEntry);
+            }
 
-                // Send event about component unregistration
-                if (this.eventManager != null && oldDescriptor != null) {
-                    this.eventManager.notifyComponentUnregistered(oldDescriptor, this);
-                }
+            // Send event about component unregistration
+            if (this.eventManager != null && oldDescriptor != null) {
+                this.eventManager.notifyComponentUnregistered(oldDescriptor, this);
             }
         }
     }
@@ -588,10 +569,10 @@ private void removeComponent(Type role, String hint) throws ComponentLifecycleEx
      * Note: This method shouldn't exist but register/unregister methods should throw a
      * {@link ComponentLifecycleException} but that would break backward compatibility to add it.
      */
-    private void removeComponentWithoutException(Type role, String hint)
+    private <T> void removeComponentWithoutException(RoleHint<T> roleHint)
     {
         try {
-            removeComponent(role, hint);
+            removeComponent(roleHint);
         } catch (Exception e) {
             this.logger.warn("Instance released but disposal failed. Some resources may not have been released.", e);
         }
@@ -603,10 +584,10 @@ private int sortEntry(List<RoleHint<?>> keys, int index)
         int newIndex = index;
 
         RoleHint<?> key = keys.get(index);
-        ComponentEntry<?> componentEntry = getComponentEntry(key.getRoleType(), key.getHint());
+        ComponentEntry<?> componentEntry = this.componentEntries.get(key);
 
         for (ComponentDependency<?> dependency : componentEntry.descriptor.getComponentDependencies()) {
-            RoleHint<?> dependencyRole = new RoleHint<>(dependency.getRoleType(), dependency.getRoleHint());
+            RoleHint<?> dependencyRole = new RoleHint<Object>(dependency.getRoleType(), dependency.getRoleHint());
 
             int dependencyIndex = keys.indexOf(dependencyRole);
 
@@ -628,16 +609,11 @@ private int sortEntry(List<RoleHint<?>> keys, int index)
     @Override
     public void dispose()
     {
-        List<RoleHint<?>> keys = new ArrayList<>(this.componentEntries.size() * 2);
-        for (Map<String, ComponentEntry<?>> entries : this.componentEntries.values()) {
-            for (ComponentEntry<?> entry : entries.values()) {
-                keys.add(new RoleHint<>(entry.descriptor.getRoleType(), entry.descriptor.getRoleHint()));
-            }
-        }
+        List<RoleHint<?>> keys = new ArrayList<>(this.componentEntries.keySet());
 
         // Exclude this component
         RoleHint<ComponentManager> cmRoleHint = new RoleHint<>(ComponentManager.class);
-        ComponentEntry<?> cmEntry = getComponentEntry(cmRoleHint.getRoleType(), cmRoleHint.getHint());
+        ComponentEntry<?> cmEntry = this.componentEntries.get(cmRoleHint);
         if (cmEntry != null && cmEntry.instance == this) {
             keys.remove(cmRoleHint);
         }
@@ -658,7 +634,7 @@ public int compare(RoleHint<?> rh1, RoleHint<?> rh2)
 
             private int getPriority(RoleHint<?> rh)
             {
-                Object instance = getComponentEntry(rh.getRoleType(), rh.getHint()).instance;
+                Object instance = componentEntries.get(rh).instance;
                 if (instance == null) {
                     // The component has not been instantiated yet. We don't need to dispose it in this case... :)
                     // Return the default priority since it doesn't matter.
@@ -672,7 +648,7 @@ private int getPriority(RoleHint<?> rh)
 
         // Dispose old components
         for (RoleHint<?> key : keys) {
-            ComponentEntry<?> componentEntry = getComponentEntry(key.getRoleType(), key.getHint());
+            ComponentEntry<?> componentEntry = this.componentEntries.get(key);
 
             synchronized (componentEntry) {
                 Object instance = componentEntry.instance;
@@ -696,16 +672,23 @@ private int getPriority(RoleHint<?> rh)
         // components that have to use a component already disposed (usually because it dynamically requires it and
         // there is no way for the ComponentManager to know that dependency).
         for (RoleHint<?> key : keys) {
-            this.componentEntries.get(key.getRoleType()).remove(key.getHint());
+            this.componentEntries.remove(key);
         }
     }
 
     // Deprecated
 
     @Override
+    @SuppressWarnings("unchecked")
     @Deprecated
     public <T> List<ComponentDescriptor<T>> getComponentDescriptorList(Class<T> role)
     {
-        return getComponentDescriptorList((Type) role);
+        List<ComponentDescriptor<T>> results = new ArrayList<>();
+        for (Map.Entry<RoleHint<?>, ComponentEntry<?>> entry : this.componentEntries.entrySet()) {
+            if (entry.getKey().getRoleClass() == role) {
+                results.add((ComponentDescriptor<T>) entry.getValue().descriptor);
+            }
+        }
+        return results;
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/internal/RoleHint.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/internal/RoleHint.java
index 89c6f1c..dc2b3d6 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/internal/RoleHint.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/main/java/org/xwiki/component/internal/RoleHint.java
@@ -33,11 +33,6 @@
 public class RoleHint<T>
 {
     /**
-     * The default hint of a component.
-     */
-    public static final String DEFAULT_HINT = "default";
-
-    /**
      * @see #getRoleType()
      */
     private Type role;
@@ -66,7 +61,7 @@ public RoleHint(Type role, String hint)
         this.role = role;
         this.hint = hint;
         if (this.hint == null) {
-            this.hint = DEFAULT_HINT;
+            this.hint = "default";
         }
     }
 
diff --git a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java
index deffe2b..92fafee 100644
--- a/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java
+++ b/xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/src/test/java/org/xwiki/component/ProviderTest.java
@@ -174,11 +174,11 @@ public void loadAndInjectProviderWhenExceptionInInitialize() throws Exception
         } catch (ComponentLookupException expected) {
             Assert.assertEquals("Failed to lookup component "
                 + "[org.xwiki.component.ProviderTest$TestComponentWithProviderInException] identified by "
-                + "type [interface org.xwiki.component.ProviderTest$TestComponentRole] and hint [exception]",
+                + "[role = [interface org.xwiki.component.ProviderTest$TestComponentRole] hint = [exception]]",
                 expected.getMessage());
             Assert.assertEquals("Failed to lookup component "
                 + "[org.xwiki.component.ProviderTest$TestProviderWithExceptionInInitialize] identified by "
-                + "type [javax.inject.Provider<java.lang.String>] and hint [exception]",
+                + "[role = [javax.inject.Provider<java.lang.String>] hint = [exception]]",
                 expected.getCause().getMessage());
             Assert.assertEquals("Some error in init", expected.getCause().getCause().getMessage());
         }
