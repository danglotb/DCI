package org.xwiki.extension.job.internal;


import java.util.Date;
import java.util.Iterator;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.xwiki.extension.TestResources;
import org.xwiki.extension.job.plan.ExtensionPlan;
import org.xwiki.extension.job.plan.ExtensionPlanAction;
import org.xwiki.extension.job.plan.ExtensionPlanNode;
import org.xwiki.extension.job.plan.internal.DefaultExtensionPlan;
import org.xwiki.extension.repository.CoreExtensionRepository;
import org.xwiki.extension.test.AbstractExtensionHandlerTest;
import org.xwiki.extension.test.ConfigurableDefaultCoreExtensionRepository;
import org.xwiki.job.Request;
import org.xwiki.job.event.status.JobProgress;
import org.xwiki.job.event.status.JobProgressStep;


public class AmplInstallPlanJobTest extends AbstractExtensionHandlerTest {
    private ConfigurableDefaultCoreExtensionRepository coreRepository;

    @Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
        this.coreRepository = this.mocker.getInstance(CoreExtensionRepository.class);
    }

    @Test(timeout = 10000)
    public void testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204() throws Exception, Throwable {
        ExtensionPlan o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1 = installPlan(TestResources.REMOTE_NOTINSTALLED_ID);
        Assert.assertEquals("[UNINSTALL: installedextension/1.0 (null, [installedextension/1.0]) ([]), UNINSTALL: installedextensiondependency/1.0 (null, [installedextensiondependency/1.0]) ([]), UPGRADE: notinstalledextension/2.0 (null, [installedextension/1.0]) ([UPGRADE: notinstalledextensiondependency/2.0 (null, [installedextensiondependency/1.0]) ([], 2.0)])]", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getTree().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isCanceled());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getJobType());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isVerbose());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isStatusSerialized());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isRemote());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isInteractive());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).getId());
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getQuestion());
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getDate())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getHours())));
        Assert.assertEquals(29, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getMinutes())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getDate())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getTimezoneOffset())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getHours())));
        Assert.assertEquals(29, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getMinutes())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isIsolated());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isCancelable());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getLog().isEmpty());
        ExtensionPlan plan = installPlan(TestResources.REMOTE_NOTINSTALLED_ID);
        Iterator<ExtensionPlanNode> it = plan.getTree().iterator();
        ExtensionPlanNode node = it.next();
        ExtensionPlanAction action = node.getAction();
        action.getExtension().getId();
        action.getAction();
        action.getNamespace();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__14 = node.getChildren().size();
        node = it.next();
        action = node.getAction();
        action.getExtension().getId();
        action.getAction();
        action.getAction();
        action.getNamespace();
        action.getNamespace();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__26 = node.getChildren().size();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__28 = node.getChildren().size();
        node = it.next();
        action = node.getAction();
        action.getExtension().getId();
        action.getAction();
        action.getPreviousExtension().getId();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__42 = node.getChildren().size();
        ExtensionPlanNode o_testInstallPlanWithUpgradeOnDifferentId_add72742__44 = node.getChildren().iterator().next();
        boolean o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398__57 = ((org.xwiki.extension.Extension)((org.xwiki.extension.job.plan.ExtensionPlanAction)((org.xwiki.extension.job.plan.internal.DefaultExtensionPlanNode)o_testInstallPlanWithUpgradeOnDifferentId_add72742__44).getAction()).getExtension()).getFeatures().contains("installedextensiondependency");
        node = node.getChildren().iterator().next();
        action = node.getAction();
        action.getExtension().getId();
        action.getAction();
        action.getAction();
        action.getPreviousExtension().getId();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__63 = node.getChildren().size();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__65 = node.getChildren().size();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72742__67 = node.getChildren().size();
        Assert.assertEquals("[UNINSTALL: installedextension/1.0 (null, [installedextension/1.0]) ([]), UNINSTALL: installedextensiondependency/1.0 (null, [installedextensiondependency/1.0]) ([]), UPGRADE: notinstalledextension/2.0 (null, [installedextension/1.0]) ([UPGRADE: notinstalledextensiondependency/2.0 (null, [installedextensiondependency/1.0]) ([], 2.0)])]", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getTree().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isCanceled());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getJobType());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isVerbose());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isStatusSerialized());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isRemote());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).isInteractive());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getRequest())).getId());
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getQuestion());
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getDate())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getHours())));
        Assert.assertEquals(29, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getStartDate())).getMinutes())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getDate())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getTimezoneOffset())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getHours())));
        Assert.assertEquals(29, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getEndDate())).getMinutes())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isIsolated());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).isCancelable());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72742_add76398_add77204__1)).getLog().isEmpty());
    }

    @Test(timeout = 10000)
    public void testInstallPlanWithUpgradeOnDifferentId_add72713() throws Exception, Throwable {
        ExtensionPlan o_testInstallPlanWithUpgradeOnDifferentId_add72713__1 = installPlan(TestResources.REMOTE_NOTINSTALLED_ID);
        Assert.assertEquals("[UNINSTALL: installedextension/1.0 (null, [installedextension/1.0]) ([]), UNINSTALL: installedextensiondependency/1.0 (null, [installedextensiondependency/1.0]) ([]), UPGRADE: notinstalledextension/2.0 (null, [installedextension/1.0]) ([UPGRADE: notinstalledextensiondependency/2.0 (null, [installedextensiondependency/1.0]) ([], 2.0)])]", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getTree().isEmpty());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getJobType());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isVerbose());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isRemote());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isStatusSerialized());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isInteractive());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).getId());
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getQuestion());
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getHours())));
        Assert.assertEquals(26, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getHours())));
        Assert.assertEquals(26, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getTimezoneOffset())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isIsolated());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getLog().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isCancelable());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isCanceled());
        ExtensionPlan plan = installPlan(TestResources.REMOTE_NOTINSTALLED_ID);
        Iterator<ExtensionPlanNode> it = plan.getTree().iterator();
        ExtensionPlanNode node = it.next();
        ExtensionPlanAction action = node.getAction();
        action.getExtension().getId();
        action.getExtension().getId();
        action.getExtension().getId();
        action.getExtension().getId();
        action.getAction();
        action.getAction();
        action.getAction();
        action.getAction();
        action.getAction();
        action.getAction();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__15 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__15)));
        node = it.next();
        action = node.getAction();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__27 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__27)));
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__29 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__29)));
        node = it.next();
        action = node.getAction();
        action.getPreviousExtension().getId();
        action.getPreviousExtension().getId();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__43 = node.getChildren().size();
        Assert.assertEquals(1, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__43)));
        node = node.getChildren().iterator().next();
        action = node.getAction();
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__61 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__61)));
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__63 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__63)));
        int o_testInstallPlanWithUpgradeOnDifferentId_add72713__65 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__65)));
        Assert.assertEquals("[UNINSTALL: installedextension/1.0 (null, [installedextension/1.0]) ([]), UNINSTALL: installedextensiondependency/1.0 (null, [installedextensiondependency/1.0]) ([]), UPGRADE: notinstalledextension/2.0 (null, [installedextension/1.0]) ([UPGRADE: notinstalledextensiondependency/2.0 (null, [installedextensiondependency/1.0]) ([], 2.0)])]", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getTree().isEmpty());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getJobType());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isVerbose());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isRemote());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isStatusSerialized());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).isInteractive());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getRequest())).getId());
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getQuestion());
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getHours())));
        Assert.assertEquals(26, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getMonth())));
        Assert.assertEquals(12, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getHours())));
        Assert.assertEquals(26, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getEndDate())).getTimezoneOffset())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isIsolated());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getLog().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isCancelable());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__1)).isCanceled());
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__15)));
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__27)));
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__29)));
        Assert.assertEquals(1, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__43)));
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__61)));
        Assert.assertEquals(0, ((int) (o_testInstallPlanWithUpgradeOnDifferentId_add72713__63)));
    }

    @Test(timeout = 10000)
    public void testInstallRemoteWithMissingDependency_add103321() throws Exception, Throwable {
        ExtensionPlan o_testInstallRemoteWithMissingDependency_add103321__1 = installPlan(TestResources.REMOTE_WITHRMISSINGDEPENDENCY_ID);
        Assert.assertEquals("[INSTALL: rwithmissingdependency/version (null) ([REPAIR: installedwithmissingdependency/version (null) ([INSTALL: missingdependency/version (null) ([], version)], version)])]", ((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getTree().isEmpty());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getJobType());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).getId());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isStatusSerialized());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isInteractive());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isVerbose());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isRemote());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getQuestion());
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getMonth())));
        Assert.assertEquals(13, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getHours())));
        Assert.assertEquals(45, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getMonth())));
        Assert.assertEquals(13, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getHours())));
        Assert.assertEquals(45, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getMinutes())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isIsolated());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isCancelable());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isCanceled());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getLog().isEmpty());
        ExtensionPlan plan = installPlan(TestResources.REMOTE_WITHRMISSINGDEPENDENCY_ID);
        int o_testInstallRemoteWithMissingDependency_add103321__4 = plan.getTree().size();
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__4)));
        ExtensionPlanNode node = plan.getTree().iterator().next();
        ExtensionPlanAction action = node.getAction();
        action.getExtension().getId();
        action.getExtension().getId();
        action.getExtension().getId();
        action.getAction();
        action.getAction();
        action.getAction();
        action.getAction();
        int o_testInstallRemoteWithMissingDependency_add103321__15 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__15)));
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        int o_testInstallRemoteWithMissingDependency_add103321__18 = node.getChildren().size();
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__18)));
        node = node.getChildren().iterator().next();
        action = node.getAction();
        int o_testInstallRemoteWithMissingDependency_add103321__29 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__29)));
        int o_testInstallRemoteWithMissingDependency_add103321__31 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__31)));
        int o_testInstallRemoteWithMissingDependency_add103321__35 = node.getChildren().size();
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__35)));
        int o_testInstallRemoteWithMissingDependency_add103321__37 = node.getChildren().size();
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__37)));
        node = node.getChildren().iterator().next();
        action = node.getAction();
        int o_testInstallRemoteWithMissingDependency_add103321__49 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__49)));
        int o_testInstallRemoteWithMissingDependency_add103321__51 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__51)));
        int o_testInstallRemoteWithMissingDependency_add103321__53 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__53)));
        int o_testInstallRemoteWithMissingDependency_add103321__58 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__58)));
        Assert.assertEquals("[INSTALL: rwithmissingdependency/version (null) ([REPAIR: installedwithmissingdependency/version (null) ([INSTALL: missingdependency/version (null) ([], version)], version)])]", ((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getTree().isEmpty());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getJobType());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).getId());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isStatusSerialized());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isInteractive());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isVerbose());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getRequest())).isRemote());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getQuestion());
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getMonth())));
        Assert.assertEquals(13, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getHours())));
        Assert.assertEquals(45, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getStartDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getMonth())));
        Assert.assertEquals(13, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getHours())));
        Assert.assertEquals(45, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getEndDate())).getMinutes())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isIsolated());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isCancelable());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).isCanceled());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallRemoteWithMissingDependency_add103321__1)).getLog().isEmpty());
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__4)));
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__15)));
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__18)));
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__29)));
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__31)));
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__35)));
        Assert.assertEquals(1, ((int) (o_testInstallRemoteWithMissingDependency_add103321__37)));
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__49)));
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__51)));
        Assert.assertEquals(0, ((int) (o_testInstallRemoteWithMissingDependency_add103321__53)));
    }

    @Test(timeout = 10000)
    public void testInstallWithStrictRecommendedManagedDependency_add11444() throws Exception, Throwable {
        this.coreRepository.getConfigurableEnvironmentExtension().putProperty("xwiki.extension.recommendedVersions", "upgrade/[2.0]");
        ExtensionPlan o_testInstallWithStrictRecommendedManagedDependency_add11444__4 = installPlan(TestResources.REMOTE_WITH_MANAGED_DEPENDENY_ID, "namespace");
        Assert.assertEquals("[INSTALL: rwithmanageddependency/version (namespace) ([INSTALL: upgrade/2.0 (namespace) ([], [2.0])])]", ((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getTree().isEmpty());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getJobType());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isStatusSerialized());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isRemote());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isInteractive());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isVerbose());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).getId());
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getQuestion());
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getMonth())));
        Assert.assertEquals(11, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getHours())));
        Assert.assertEquals(31, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getMonth())));
        Assert.assertEquals(11, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getHours())));
        Assert.assertEquals(31, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getMinutes())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isIsolated());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getLog().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isCancelable());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isCanceled());
        ExtensionPlan plan = installPlan(TestResources.REMOTE_WITH_MANAGED_DEPENDENY_ID, "namespace");
        int o_testInstallWithStrictRecommendedManagedDependency_add11444__7 = plan.getTree().size();
        Assert.assertEquals(1, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__7)));
        ExtensionPlanNode node = plan.getTree().iterator().next();
        ExtensionPlanAction action = node.getAction();
        action.getExtension().getId();
        action.getExtension().getId();
        action.getAction();
        action.getAction();
        action.getAction();
        int o_testInstallWithStrictRecommendedManagedDependency_add11444__18 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__18)));
        action.getNamespace();
        action.getNamespace();
        action.getNamespace();
        int o_testInstallWithStrictRecommendedManagedDependency_add11444__21 = node.getChildren().size();
        Assert.assertEquals(1, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__21)));
        node = node.getChildren().iterator().next();
        action = node.getAction();
        int o_testInstallWithStrictRecommendedManagedDependency_add11444__33 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__33)));
        int o_testInstallWithStrictRecommendedManagedDependency_add11444__35 = action.getPreviousExtensions().size();
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__35)));
        int o_testInstallWithStrictRecommendedManagedDependency_add11444__39 = node.getChildren().size();
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__39)));
        Assert.assertEquals("[INSTALL: rwithmanageddependency/version (namespace) ([INSTALL: upgrade/2.0 (namespace) ([], [2.0])])]", ((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).toString());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getActions().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getTree().isEmpty());
        Assert.assertEquals("installplan", ((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getJobType());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isStatusSerialized());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isStatusLogIsolated());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isRemote());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isInteractive());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).getPropertyNames().isEmpty());
        Assert.assertFalse(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).isVerbose());
        Assert.assertNull(((Request) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getRequest())).getId());
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getCurrentLevelOffset())), 0.1);
        Assert.assertFalse(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getRootStep())).getChildren().isEmpty());
        Assert.assertNull(((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getRootStep())).getParent());
        Assert.assertEquals(1.0, ((double) (((JobProgressStep) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getRootStep())).getOffset())), 0.1);
        Assert.assertEquals(1.0, ((double) (((JobProgress) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getProgress())).getOffset())), 0.1);
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getQuestion());
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getMonth())));
        Assert.assertEquals(11, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getHours())));
        Assert.assertEquals(31, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getStartDate())).getMinutes())));
        Assert.assertEquals(1, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getDay())));
        Assert.assertEquals(-120, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getTimezoneOffset())));
        Assert.assertEquals(8, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getDate())));
        Assert.assertEquals(118, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getYear())));
        Assert.assertEquals(9, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getMonth())));
        Assert.assertEquals(11, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getHours())));
        Assert.assertEquals(31, ((int) (((Date) (((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getEndDate())).getMinutes())));
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isSerialized());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isIsolated());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getError());
        Assert.assertTrue(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getLog().isEmpty());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isSubJob());
        Assert.assertNull(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).getParentJobStatus());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isCancelable());
        Assert.assertFalse(((DefaultExtensionPlan) (o_testInstallWithStrictRecommendedManagedDependency_add11444__4)).isCanceled());
        Assert.assertEquals(1, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__7)));
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__18)));
        Assert.assertEquals(1, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__21)));
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__33)));
        Assert.assertEquals(0, ((int) (o_testInstallWithStrictRecommendedManagedDependency_add11444__35)));
    }
}

