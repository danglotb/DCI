diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
index 07346fa7e..96e8c1c75 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/AbstractExtensionDependency.java
@@ -252,6 +252,7 @@ public int hashCode()
 
         builder.append(getId());
         builder.append(getVersionConstraint());
+        builder.append(getProperties());
 
         return builder.toHashCode();
     }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java
index add1e4883..94e16f66b 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/DefaultExtensionManagerConfiguration.java
@@ -99,6 +99,9 @@
     @Inject
     private Provider<ConfigurationSource> configuration;
 
+    @Inject
+    private ExtensionFactory extensionFactory;
+
     // Cache
 
     /**
@@ -146,7 +149,7 @@ public File getLocalRepository()
             for (String repositoryString : repositoryStrings) {
                 if (StringUtils.isNotBlank(repositoryString)) {
                     try {
-                        DefaultExtensionRepositoryDescriptor extensionRepositoryId = parseRepository(repositoryString);
+                        ExtensionRepositoryDescriptor extensionRepositoryId = parseRepository(repositoryString);
                         if (repositoriesMap.containsKey(extensionRepositoryId.getId())) {
                             this.logger.warn(
                                 "Duplicated repository id in [{}] first found in [{}]. The last one will be used.",
@@ -154,8 +157,8 @@ public File getLocalRepository()
                         }
                         repositoriesMap.put(extensionRepositoryId.getId(), extensionRepositoryId);
                     } catch (Exception e) {
-                        this.logger.warn("Ignoring invalid repository configuration [{}]. "
-                            + "Root cause [{}]", repositoryString, ExceptionUtils.getRootCauseMessage(e));
+                        this.logger.warn("Ignoring invalid repository configuration [{}]. " + "Root cause [{}]",
+                            repositoryString, ExceptionUtils.getRootCauseMessage(e));
                     }
                 } else {
                     this.logger.debug("Empty repository id found in the configuration");
@@ -213,19 +216,19 @@ private void setRepositoryProperties(DefaultExtensionRepositoryDescriptor descri
      * @throws URISyntaxException Failed to create an {@link URI} object from the configuration entry
      * @throws ExtensionManagerConfigurationException Failed to parse configuration
      */
-    private DefaultExtensionRepositoryDescriptor parseRepository(String repositoryString) throws URISyntaxException,
-        ExtensionManagerConfigurationException
+    private ExtensionRepositoryDescriptor parseRepository(String repositoryString)
+        throws URISyntaxException, ExtensionManagerConfigurationException
     {
         Matcher matcher = REPOSITORYIDPATTERN.matcher(repositoryString);
 
         if (matcher.matches()) {
-            return new DefaultExtensionRepositoryDescriptor(matcher.group(1), matcher.group(2), new URI(
-                matcher.group(3)));
+            return this.extensionFactory.getExtensionRepositoryDescriptor(matcher.group(1), matcher.group(2),
+                new URI(matcher.group(3)));
         }
 
-        throw new ExtensionManagerConfigurationException(String.format(
-            "Invalid repository configuration format for [%s]. Should have been matching [%s].", repositoryString,
-            REPOSITORYIDPATTERN.toString()));
+        throw new ExtensionManagerConfigurationException(
+            String.format("Invalid repository configuration format for [%s]. Should have been matching [%s].",
+                repositoryString, REPOSITORYIDPATTERN.toString()));
     }
 
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
new file mode 100644
index 000000000..b9423153d
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/ExtensionFactory.java
@@ -0,0 +1,243 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.extension.internal;
+
+import java.net.URI;
+import java.net.URL;
+import java.util.Map;
+import java.util.WeakHashMap;
+
+import javax.inject.Singleton;
+
+import org.xwiki.component.annotation.Component;
+import org.xwiki.extension.DefaultExtensionAuthor;
+import org.xwiki.extension.DefaultExtensionDependency;
+import org.xwiki.extension.DefaultExtensionIssueManagement;
+import org.xwiki.extension.Extension;
+import org.xwiki.extension.ExtensionAuthor;
+import org.xwiki.extension.ExtensionDependency;
+import org.xwiki.extension.ExtensionIssueManagement;
+import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
+import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
+import org.xwiki.extension.version.Version;
+import org.xwiki.extension.version.VersionConstraint;
+import org.xwiki.extension.version.internal.DefaultVersion;
+import org.xwiki.extension.version.internal.DefaultVersionConstraint;
+
+/**
+ * Allow sharing the same instance for various part of {@link Extension}s.
+ * 
+ * @version $Id$
+ * @since 8.4
+ */
+@Component(roles = ExtensionFactory.class)
+@Singleton
+public class ExtensionFactory
+{
+    private WeakHashMap<ExtensionDependency, ExtensionDependency> dependencies = new WeakHashMap<>();
+
+    private WeakHashMap<ExtensionAuthor, ExtensionAuthor> authors = new WeakHashMap<>();
+
+    private WeakHashMap<ExtensionRepositoryDescriptor, ExtensionRepositoryDescriptor> repositories =
+        new WeakHashMap<>();
+
+    private WeakHashMap<ExtensionIssueManagement, ExtensionIssueManagement> issueManagements = new WeakHashMap<>();
+
+    private WeakHashMap<String, Version> versions = new WeakHashMap<>();
+
+    private WeakHashMap<String, VersionConstraint> versionConstrains = new WeakHashMap<>();
+
+    private static <T> T get(WeakHashMap<T, T> map, T entry)
+    {
+        // Check if we only know an equal entry
+        T sharedEntry = map.get(entry);
+
+        if (sharedEntry == null) {
+            // If no entry can be found, store and return the passed one
+            sharedEntry = entry;
+        }
+
+        // Make sure to remember the entry
+        map.put(sharedEntry, sharedEntry);
+
+        // Return the shared entry
+        return sharedEntry;
+    }
+
+    private static <K, V> V get(WeakHashMap<K, V> map, K key, V value)
+    {
+        // Check if we only know an equal entry
+        V sharedValue = map.get(key);
+
+        if (sharedValue == null) {
+            // If no entry can be found, store and return the passed one
+            sharedValue = value;
+        }
+
+        // Make sure to remember the entry
+        map.put(key, sharedValue);
+
+        // Return the shared entry
+        return sharedValue;
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionDependency}.
+     * 
+     * @param dependency the {@link ExtensionDependency} to find
+     * @return unique instance of {@link ExtensionDependency} equals to the passed one
+     */
+    public ExtensionDependency getExtensionDependency(ExtensionDependency dependency)
+    {
+        return get(this.dependencies, dependency);
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionDependency}.
+     * 
+     * @param id the id of the extension dependency
+     * @param versionConstraint the version constraint of the extension dependency
+     * @param properties the custom properties of the extension dependency
+     * @return unique instance of {@link ExtensionDependency} equals to the passed one
+     */
+    public ExtensionDependency getExtensionDependency(String id, VersionConstraint versionConstraint,
+        Map<String, Object> properties)
+    {
+        return getExtensionDependency(new DefaultExtensionDependency(id, versionConstraint, properties));
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionAuthor}.
+     * 
+     * @param author the {@link ExtensionAuthor} to find
+     * @return unique instance of {@link ExtensionAuthor} equals to the passed one
+     */
+    public ExtensionAuthor getExtensionAuthor(ExtensionAuthor author)
+    {
+        return get(this.authors, author);
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionAuthor}.
+     * 
+     * @param name the name of the author
+     * @param url the URL of the author public profile
+     * @return unique instance of {@link ExtensionAuthor} equals to the passed one
+     */
+    public ExtensionAuthor getExtensionAuthor(String name, URL url)
+    {
+        return getExtensionAuthor(new DefaultExtensionAuthor(name, url));
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionRepositoryDescriptor}.
+     * 
+     * @param repository the {@link ExtensionRepositoryDescriptor} to find
+     * @return unique instance of {@link ExtensionRepositoryDescriptor} equals to the passed one
+     */
+    public ExtensionRepositoryDescriptor getExtensionRepositoryDescriptor(ExtensionRepositoryDescriptor repository)
+    {
+        return get(this.repositories, repository);
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionRepositoryDescriptor} elements.
+     * 
+     * @param id the unique identifier
+     * @param type the repository type (maven, xwiki, etc.)
+     * @param uri the repository address
+     * @return unique instance of {@link ExtensionRepositoryDescriptor} equals to the passed one
+     */
+    public ExtensionRepositoryDescriptor getExtensionRepositoryDescriptor(String id, String type, URI uri)
+    {
+        return getExtensionRepositoryDescriptor(new DefaultExtensionRepositoryDescriptor(id, type, uri));
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionIssueManagement}.
+     * 
+     * @param issueManagement the {@link ExtensionIssueManagement} to find
+     * @return unique instance of {@link ExtensionIssueManagement} equals to the passed one
+     */
+    public ExtensionIssueManagement getExtensionIssueManagement(ExtensionIssueManagement issueManagement)
+    {
+        return get(this.issueManagements, issueManagement);
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link ExtensionIssueManagement} elements.
+     * 
+     * @param system the name of the issue management system (jira, bugzilla, etc.)
+     * @param url the URL of that extension in the issues management system
+     * @return unique instance of {@link ExtensionIssueManagement} equals to the passed one
+     */
+    public ExtensionIssueManagement getExtensionIssueManagement(String system, String url)
+    {
+        return getExtensionIssueManagement(new DefaultExtensionIssueManagement(system, url));
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link Version}.
+     * 
+     * @param version the {@link Version} to find
+     * @return unique instance of {@link Version} equals to the passed one
+     */
+    public Version getVersion(Version version)
+    {
+        // Use the initial value as key because it's displayed and for example displaying "1.0" instead of "1.0.0.GA"
+        // might produce a WTF effect even if it's exactly the same version.
+        return get(this.versions, version.getValue(), version);
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed version.
+     * 
+     * @param rawVersion the version to find
+     * @return unique instance of {@link VersionConstraint} equals to the passed one
+     */
+    public Version getVersion(String rawVersion)
+    {
+        return getVersion(new DefaultVersion(rawVersion));
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed {@link VersionConstraint}.
+     * 
+     * @param versionConstraint the {@link VersionConstraint} to find
+     * @return unique instance of {@link VersionConstraint} equals to the passed one
+     */
+    public VersionConstraint getVersionConstraint(VersionConstraint versionConstraint)
+    {
+        // Use the initial value as key because it's displayed and for example displaying "[1.0]" instead of
+        // "[1.0.0.GA]" might produce a WTF effect even if it's exactly the same version constraint.
+        return get(this.versionConstrains, versionConstraint.getValue(), versionConstraint);
+    }
+
+    /**
+     * Store and return a weak reference equals to the passed version constraint.
+     * 
+     * @param rawConstraint the version constraint to find
+     * @return unique instance of {@link VersionConstraint} equals to the passed one
+     */
+    public VersionConstraint getVersionConstraint(String rawConstraint)
+    {
+        return getVersionConstraint(new DefaultVersionConstraint(rawConstraint));
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionConverter.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionConverter.java
index fd3732816..9a327f565 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionConverter.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/converter/ExtensionConverter.java
@@ -42,21 +42,20 @@
 import org.apache.maven.model.Repository;
 import org.apache.maven.model.Scm;
 import org.xwiki.component.annotation.Component;
-import org.xwiki.extension.DefaultExtensionAuthor;
-import org.xwiki.extension.DefaultExtensionDependency;
-import org.xwiki.extension.DefaultExtensionIssueManagement;
 import org.xwiki.extension.DefaultExtensionScm;
 import org.xwiki.extension.Extension;
+import org.xwiki.extension.ExtensionDependency;
 import org.xwiki.extension.ExtensionLicense;
 import org.xwiki.extension.ExtensionLicenseManager;
 import org.xwiki.extension.ExtensionScmConnection;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.internal.ExtensionUtils;
 import org.xwiki.extension.internal.maven.DefaultMavenExtension;
 import org.xwiki.extension.internal.maven.DefaultMavenExtensionDependency;
 import org.xwiki.extension.internal.maven.MavenExtension;
 import org.xwiki.extension.internal.maven.MavenUtils;
-import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
+import org.xwiki.extension.version.Version;
 import org.xwiki.extension.version.internal.DefaultVersionConstraint;
 import org.xwiki.properties.converter.AbstractConverter;
 import org.xwiki.properties.converter.ConversionException;
@@ -74,6 +73,9 @@
     @Inject
     private ExtensionLicenseManager licenseManager;
 
+    @Inject
+    private ExtensionFactory factory;
+
     @Override
     protected <G extends Extension> G convertToType(Type targetType, Object value)
     {
@@ -88,7 +90,7 @@ private MavenExtension convertToExtension(Model model)
     {
         Properties properties = (Properties) model.getProperties().clone();
 
-        String version = MavenUtils.resolveVersion(model);
+        Version version = this.factory.getVersion(MavenUtils.resolveVersion(model));
         String groupId = MavenUtils.resolveGroupId(model);
 
         DefaultMavenExtension extension = new DefaultMavenExtension(null, groupId, model.getArtifactId(), version,
@@ -109,8 +111,8 @@ private MavenExtension convertToExtension(Model model)
                 }
             }
 
-            extension.addAuthor(new DefaultExtensionAuthor(
-                StringUtils.defaultIfBlank(developer.getName(), developer.getId()), authorURL));
+            extension.addAuthor(this.factory
+                .getExtensionAuthor(StringUtils.defaultIfBlank(developer.getName(), developer.getId()), authorURL));
         }
 
         // licenses
@@ -133,7 +135,7 @@ private MavenExtension convertToExtension(Model model)
         IssueManagement issueManagement = model.getIssueManagement();
         if (issueManagement != null && issueManagement.getUrl() != null) {
             extension.setIssueManagement(
-                new DefaultExtensionIssueManagement(issueManagement.getSystem(), issueManagement.getUrl()));
+                this.factory.getExtensionIssueManagement(issueManagement.getSystem(), issueManagement.getUrl()));
         }
 
         // features
@@ -165,8 +167,10 @@ private MavenExtension convertToExtension(Model model)
 
             for (Repository mavenRepository : mavenRepositories) {
                 try {
-                    repositories.add(new DefaultExtensionRepositoryDescriptor(mavenRepository.getId(), "maven",
-                        new URI(mavenRepository.getUrl())));
+                    ExtensionRepositoryDescriptor repositoryDescriptor = this.factory.getExtensionRepositoryDescriptor(
+                        mavenRepository.getId(), "maven", new URI(mavenRepository.getUrl()));
+
+                    repositories.add(repositoryDescriptor);
                 } catch (URISyntaxException e) {
                     // TODO: log ?
                 }
@@ -180,9 +184,8 @@ private MavenExtension convertToExtension(Model model)
         for (Dependency mavenDependency : model.getDependencies()) {
             if (!mavenDependency.isOptional() && (mavenDependency.getScope() == null
                 || mavenDependency.getScope().equals("compile") || mavenDependency.getScope().equals("runtime"))) {
-                DefaultExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model);
+                ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
 
-                extensionDependency.setRepositories(repositories);
                 extension.addDependency(extensionDependency);
             }
         }
@@ -190,9 +193,8 @@ private MavenExtension convertToExtension(Model model)
         // managed dependencies
         if (model.getDependencyManagement() != null) {
             for (Dependency mavenDependency : model.getDependencyManagement().getDependencies()) {
-                DefaultExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model);
+                ExtensionDependency extensionDependency = toExtensionDependency(mavenDependency, model, repositories);
 
-                extensionDependency.setRepositories(repositories);
                 extension.addManagedDependency(extensionDependency);
             }
         }
@@ -211,7 +213,8 @@ private MavenExtension convertToExtension(Model model)
         return extension;
     }
 
-    private DefaultExtensionDependency toExtensionDependency(Dependency mavenDependency, Model model)
+    private ExtensionDependency toExtensionDependency(Dependency mavenDependency, Model model,
+        List<ExtensionRepositoryDescriptor> repositories)
     {
         String dependencyGroupId = MavenUtils.resolveGroupId(mavenDependency.getGroupId(), model, true);
         String dependencyArtifactId = mavenDependency.getArtifactId();
@@ -222,7 +225,9 @@ private DefaultExtensionDependency toExtensionDependency(Dependency mavenDepende
             MavenUtils.toExtensionId(dependencyGroupId, dependencyArtifactId, dependencyClassifier),
             new DefaultVersionConstraint(dependencyVersion), mavenDependency);
 
-        return dependency;
+        dependency.setRepositories(repositories);
+
+        return this.factory.getExtensionDependency(dependency);
     }
 
     private String getProperty(Properties properties, String propertyName, boolean delete)
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/AbstractMavenExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/AbstractMavenExtension.java
index 34de4576f..a2eca92f6 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/AbstractMavenExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/AbstractMavenExtension.java
@@ -24,6 +24,7 @@
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.repository.ExtensionRepository;
+import org.xwiki.extension.version.Version;
 
 /**
  * Base class for all Maven specific {@link Extension}s.
@@ -64,6 +65,23 @@ public AbstractMavenExtension(ExtensionRepository repository, String groupId, St
         setMavenArtifactId(artifactId);
     }
 
+    /**
+     * @param repository the repository where this extension comes from
+     * @param groupId the maven artifact group id
+     * @param artifactId the maven artifact artifact id
+     * @param version the maven artifact version
+     * @param type the extension type
+     * @since 8.4
+     */
+    public AbstractMavenExtension(ExtensionRepository repository, String groupId, String artifactId, Version version,
+        String type)
+    {
+        super(repository, new ExtensionId(groupId + ':' + artifactId, version), type);
+
+        setMavenGroupId(groupId);
+        setMavenArtifactId(artifactId);
+    }
+
     /**
      * Create new Maven extension descriptor by copying provided one.
      *
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/DefaultMavenExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/DefaultMavenExtension.java
index 8314fadd2..aa25f19e5 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/DefaultMavenExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/internal/maven/DefaultMavenExtension.java
@@ -21,6 +21,7 @@
 
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.repository.ExtensionRepository;
+import org.xwiki.extension.version.Version;
 
 /**
  * Default implementation of {@link MavenExtension}.
@@ -43,6 +44,20 @@ public DefaultMavenExtension(ExtensionRepository repository, String groupId, Str
         super(repository, groupId, artifactId, version, type);
     }
 
+    /**
+     * @param repository the repository where this extension comes from
+     * @param groupId the maven artifact group id
+     * @param artifactId the maven artifact artifact id
+     * @param version the maven artifact version
+     * @param type the extension type
+     * @since 8.4
+     */
+    public DefaultMavenExtension(ExtensionRepository repository, String groupId, String artifactId, Version version,
+        String type)
+    {
+        super(repository, groupId, artifactId, version, type);
+    }
+
     /**
      * Create new Maven extension descriptor by copying provided one.
      *
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptor.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptor.java
index 27fa88edc..facbf69bd 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptor.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/DefaultExtensionRepositoryDescriptor.java
@@ -24,6 +24,10 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.commons.lang3.builder.HashCodeBuilder;
+
+import com.google.common.base.Objects;
+
 /**
  * Default implementation of {@link ExtensionRepositoryDescriptor}.
  *
@@ -142,10 +146,11 @@ public void setProperties(Map<String, String> properties)
     public boolean equals(Object obj)
     {
         if (obj instanceof ExtensionRepositoryDescriptor) {
-            ExtensionRepositoryDescriptor extensionId = (ExtensionRepositoryDescriptor) obj;
+            ExtensionRepositoryDescriptor repository = (ExtensionRepositoryDescriptor) obj;
 
-            return getId().equals(extensionId.getId()) && getType().equals(extensionId.getType())
-                && getURI().equals(extensionId.getURI());
+            return Objects.equal(getId(), repository.getId()) && Objects.equal(getType(), repository.getType())
+                && Objects.equal(getURI(), repository.getURI())
+                && Objects.equal(getProperties(), repository.getProperties());
         }
 
         return false;
@@ -154,7 +159,14 @@ public boolean equals(Object obj)
     @Override
     public int hashCode()
     {
-        return toString().hashCode();
+        HashCodeBuilder builder = new HashCodeBuilder();
+
+        builder.append(getId());
+        builder.append(getType());
+        builder.append(getURI());
+        builder.append(getProperties());
+
+        return builder.toHashCode();
     }
 
     @Override
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java
index f11c4c743..a3e7e8e25 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/java/org/xwiki/extension/repository/internal/DefaultExtensionSerializer.java
@@ -56,9 +56,6 @@
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xwiki.component.annotation.Component;
-import org.xwiki.extension.DefaultExtensionAuthor;
-import org.xwiki.extension.DefaultExtensionDependency;
-import org.xwiki.extension.DefaultExtensionIssueManagement;
 import org.xwiki.extension.DefaultExtensionScm;
 import org.xwiki.extension.DefaultExtensionScmConnection;
 import org.xwiki.extension.Extension;
@@ -73,11 +70,11 @@
 import org.xwiki.extension.InstalledExtension;
 import org.xwiki.extension.InvalidExtensionException;
 import org.xwiki.extension.MutableExtension;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.repository.internal.core.DefaultCoreExtension;
 import org.xwiki.extension.repository.internal.core.DefaultCoreExtensionRepository;
 import org.xwiki.extension.repository.internal.local.DefaultLocalExtension;
 import org.xwiki.extension.repository.internal.local.DefaultLocalExtensionRepository;
-import org.xwiki.extension.version.internal.DefaultVersionConstraint;
 
 /**
  * Local repository storage serialization tool.
@@ -177,6 +174,9 @@
     @Inject
     private ExtensionLicenseManager licenseManager;
 
+    @Inject
+    private ExtensionFactory factory;
+
     /**
      * Used to parse XML descriptor file.
      */
@@ -278,7 +278,7 @@ private ExtensionId getExtensionId(Element extensionElement)
         Node idNode = extensionElement.getElementsByTagName(ELEMENT_ID).item(0);
         Node versionNode = extensionElement.getElementsByTagName(ELEMENT_VERSION).item(0);
 
-        return new ExtensionId(idNode.getTextContent(), versionNode.getTextContent());
+        return new ExtensionId(idNode.getTextContent(), this.factory.getVersion(versionNode.getTextContent()));
     }
 
     private String getExtensionType(Element extensionElement)
@@ -365,7 +365,7 @@ private void loadExtensionDescriptor(MutableExtension extension, Element extensi
                         authorURL = null;
                     }
 
-                    extension.addAuthor(new DefaultExtensionAuthor(authorName, authorURL));
+                    extension.addAuthor(this.factory.getExtensionAuthor(authorName, authorURL));
                 }
             }
         }
@@ -385,7 +385,7 @@ private void loadExtensionDescriptor(MutableExtension extension, Element extensi
                     String version = versionNode != null ? versionNode.getTextContent() : null;
 
                     if (version != null) {
-                        extension.addExtensionFeature(new ExtensionId(id, version));
+                        extension.addExtensionFeature(new ExtensionId(id, this.factory.getVersion(version)));
                     } else {
                         extension.addExtensionFeature(new ExtensionId(id, extension.getId().getVersion()));
                     }
@@ -444,8 +444,7 @@ private void loadExtensionDescriptor(MutableExtension extension, Element extensi
         if (dependenciesNode != null) {
             NodeList dependenciesNodeList = dependenciesNode.getChildNodes();
 
-            List<ExtensionDependency> dependencies =
-                new ArrayList<ExtensionDependency>(dependenciesNodeList.getLength());
+            List<ExtensionDependency> dependencies = new ArrayList<>(dependenciesNodeList.getLength());
 
             for (int i = 0; i < dependenciesNodeList.getLength(); ++i) {
                 Node dependency = dependenciesNodeList.item(i);
@@ -454,9 +453,9 @@ private void loadExtensionDescriptor(MutableExtension extension, Element extensi
                     Node dependencyIdNode = getNode(dependency, ELEMENT_ID);
                     Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);
 
-                    dependencies.add(new DefaultExtensionDependency(dependencyIdNode.getTextContent(),
+                    dependencies.add(this.factory.getExtensionDependency(dependencyIdNode.getTextContent(),
                         dependencyVersionNode != null
-                            ? new DefaultVersionConstraint(dependencyVersionNode.getTextContent()) : null,
+                            ? this.factory.getVersionConstraint(dependencyVersionNode.getTextContent()) : null,
                         parseProperties((Element) dependency)));
                 }
             }
@@ -507,7 +506,7 @@ private ExtensionIssueManagement loadIssueManagement(Element extensionElement)
             Node urlNode = getNode(node, ELEMENT_IURL);
 
             if (systemNode != null) {
-                return new DefaultExtensionIssueManagement(systemNode.getTextContent(),
+                return this.factory.getExtensionIssueManagement(systemNode.getTextContent(),
                     urlNode != null ? urlNode.getTextContent() : null);
             }
         }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/META-INF/components.txt b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/META-INF/components.txt
index 0af44e9c8..3f66ab756 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/META-INF/components.txt
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/main/resources/META-INF/components.txt
@@ -2,6 +2,7 @@ org.xwiki.extension.handler.internal.DefaultExtensionHandlerManager
 org.xwiki.extension.handler.internal.DefaultExtensionInitializer
 org.xwiki.extension.handler.internal.DefaultExtensionValidatorProvider
 org.xwiki.extension.handler.internal.ExtensionApplicationStartedListener
+org.xwiki.extension.internal.ExtensionFactory
 org.xwiki.extension.internal.DefaultExtensionLicenseManager
 org.xwiki.extension.internal.DefaultExtensionManager
 org.xwiki.extension.internal.DefaultExtensionManagerConfiguration
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java
index 63bbce8e5..d4f308ee0 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/internal/DefaultExtensionManagerConfigurationTest.java
@@ -44,7 +44,7 @@
  *
  * @version $Id$
  */
-@ComponentList({ DefaultExtensionManagerConfiguration.class })
+@ComponentList({ DefaultExtensionManagerConfiguration.class, ExtensionFactory.class })
 public class DefaultExtensionManagerConfigurationTest
 {
     @Rule
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java
index c8b6bb00a..a318b6d28 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api/src/test/java/org/xwiki/extension/repository/local/DefaultExtensionSerializerTest.java
@@ -43,12 +43,15 @@
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ExtensionLicense;
 import org.xwiki.extension.InvalidExtensionException;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.repository.internal.DefaultExtensionSerializer;
 import org.xwiki.extension.repository.internal.ExtensionSerializer;
 import org.xwiki.extension.repository.internal.local.DefaultLocalExtension;
 import org.xwiki.extension.version.internal.DefaultVersionConstraint;
+import org.xwiki.test.annotation.ComponentList;
 import org.xwiki.test.mockito.MockitoComponentMockingRule;
 
+@ComponentList(ExtensionFactory.class)
 public class DefaultExtensionSerializerTest
 {
     @Rule
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtension.java
index 5941aa9c8..5f22e0126 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtension.java
@@ -24,6 +24,7 @@
 
 import org.eclipse.aether.artifact.Artifact;
 import org.xwiki.extension.Extension;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.internal.maven.AbstractMavenExtension;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
 
@@ -37,11 +38,12 @@
 {
     public static final String PKEY_AETHER_ARTIFACT = "aether.Artifact";
 
-    public AetherExtension(Extension mavenExtension, Artifact artifact, AetherExtensionRepository repository)
+    public AetherExtension(Extension mavenExtension, Artifact artifact, AetherExtensionRepository repository,
+        ExtensionFactory factory)
     {
         super(repository, mavenExtension);
 
-        setId(AetherUtils.createExtensionId(artifact));
+        setId(AetherUtils.createExtensionId(artifact, factory));
         setType(artifact.getExtension());
 
         setFile(new AetherExtensionFile(artifact, repository));
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java
index e825b4d3f..8d99dfb36 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherExtensionRepository.java
@@ -75,6 +75,7 @@
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ExtensionNotFoundException;
 import org.xwiki.extension.ResolveException;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.internal.maven.MavenExtensionDependency;
 import org.xwiki.extension.repository.AbstractExtensionRepository;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
@@ -121,6 +122,8 @@
 
     private transient AetherExtensionRepositoryFactory repositoryFactory;
 
+    private transient ExtensionFactory factory;
+
     public AetherExtensionRepository(ExtensionRepositoryDescriptor repositoryDescriptor,
         AetherExtensionRepositoryFactory repositoryFactory, PlexusContainer plexusContainer,
         ComponentManager componentManager) throws Exception
@@ -153,6 +156,7 @@ public AetherExtensionRepository(ExtensionRepositoryDescriptor repositoryDescrip
         this.remoteRepository = repositoryBuilder.build();
 
         this.converter = componentManager.getInstance(ConverterManager.class);
+        this.factory = componentManager.getInstance(ExtensionFactory.class);
 
         this.versionRangeResolver = this.plexusContainer.lookup(VersionRangeResolver.class);
         this.versionResolver = this.plexusContainer.lookup(VersionResolver.class);
@@ -426,7 +430,7 @@ private AetherExtension resolveMaven(Artifact artifact, String artifactExtension
         Artifact filerArtifact = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(),
             artifact.getClassifier(), artifactExtension, artifact.getVersion());
 
-        AetherExtension extension = new AetherExtension(mavenExtension, filerArtifact, this);
+        AetherExtension extension = new AetherExtension(mavenExtension, filerArtifact, this, factory);
 
         // Convert Maven dependencies to Aether dependencies
         extension.setDependencies(toAetherDependencies(mavenExtension.getDependencies(), session));
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherUtils.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherUtils.java
index b5fad61de..ed4cab624 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherUtils.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-maven/src/main/java/org/xwiki/extension/repository/aether/internal/AetherUtils.java
@@ -27,7 +27,9 @@
 import org.eclipse.aether.artifact.DefaultArtifact;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ResolveException;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.internal.maven.MavenUtils;
+import org.xwiki.extension.version.internal.DefaultVersion;
 
 /**
  * @version $Id$
@@ -50,10 +52,19 @@ public static DefaultArtifact createArtifact(String id, String version) throws R
     }
 
     public static ExtensionId createExtensionId(Artifact artifact)
+    {
+        return createExtensionId(artifact, null);
+    }
+
+    /**
+     * @since 8.4
+     */
+    public static ExtensionId createExtensionId(Artifact artifact, ExtensionFactory factory)
     {
         String extensionId =
             MavenUtils.toExtensionId(artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier());
 
-        return new ExtensionId(extensionId, artifact.getBaseVersion());
+        return new ExtensionId(extensionId, factory != null ? factory.getVersion(artifact.getBaseVersion())
+            : new DefaultVersion(artifact.getBaseVersion()));
     }
 }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtension.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtension.java
index 22cfaed14..75de0a68d 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtension.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtension.java
@@ -31,17 +31,16 @@
 
 import org.apache.commons.io.IOUtils;
 import org.xwiki.extension.AbstractRatingExtension;
-import org.xwiki.extension.DefaultExtensionAuthor;
-import org.xwiki.extension.DefaultExtensionIssueManagement;
 import org.xwiki.extension.DefaultExtensionScm;
 import org.xwiki.extension.DefaultExtensionScmConnection;
 import org.xwiki.extension.Extension;
 import org.xwiki.extension.ExtensionId;
 import org.xwiki.extension.ExtensionLicense;
 import org.xwiki.extension.ExtensionLicenseManager;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.internal.ExtensionUtils;
 import org.xwiki.extension.rating.DefaultExtensionRating;
-import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
+import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.xwiki.model.jaxb.ExtensionAuthor;
 import org.xwiki.extension.repository.xwiki.model.jaxb.ExtensionDependency;
 import org.xwiki.extension.repository.xwiki.model.jaxb.ExtensionIssueManagement;
@@ -53,7 +52,6 @@
 import org.xwiki.extension.repository.xwiki.model.jaxb.License;
 import org.xwiki.extension.repository.xwiki.model.jaxb.Namespaces;
 import org.xwiki.extension.repository.xwiki.model.jaxb.Property;
-import org.xwiki.extension.version.internal.DefaultVersion;
 
 /**
  * XWiki Repository implementation of {@link org.xwiki.extension.Extension}.
@@ -64,9 +62,10 @@
 public class XWikiExtension extends AbstractRatingExtension
 {
     public XWikiExtension(XWikiExtensionRepository repository, ExtensionVersion restExtension,
-        ExtensionLicenseManager licenseManager)
+        ExtensionLicenseManager licenseManager, ExtensionFactory factory)
     {
-        super(repository, new ExtensionId(restExtension.getId(), restExtension.getVersion()), restExtension.getType());
+        super(repository, new ExtensionId(restExtension.getId(), factory.getVersion(restExtension.getVersion())),
+            restExtension.getType());
 
         setName(restExtension.getName());
         setSummary(restExtension.getSummary());
@@ -78,7 +77,7 @@ public XWikiExtension(XWikiExtensionRepository repository, ExtensionVersion rest
         for (org.xwiki.extension.repository.xwiki.model.jaxb.ExtensionId feature : restExtension
             .getExtensionFeatures()) {
             addExtensionFeature(new ExtensionId(feature.getId(),
-                feature.getVersion() != null ? new DefaultVersion(feature.getVersion()) : getId().getVersion()));
+                feature.getVersion() != null ? factory.getVersion(feature.getVersion()) : getId().getVersion()));
         }
 
         // Rating
@@ -97,7 +96,7 @@ public XWikiExtension(XWikiExtensionRepository repository, ExtensionVersion rest
                 url = null;
             }
 
-            addAuthor(new DefaultExtensionAuthor(restAuthor.getName(), url));
+            addAuthor(factory.getExtensionAuthor(restAuthor.getName(), url));
         }
 
         // License
@@ -138,7 +137,7 @@ public XWikiExtension(XWikiExtensionRepository repository, ExtensionVersion rest
         ExtensionIssueManagement restIssueManagement = restExtension.getIssueManagement();
         if (restIssueManagement != null) {
             setIssueManagement(
-                new DefaultExtensionIssueManagement(restIssueManagement.getSystem(), restIssueManagement.getUrl()));
+                factory.getExtensionIssueManagement(restIssueManagement.getSystem(), restIssueManagement.getUrl()));
         }
 
         // Category
@@ -169,17 +168,17 @@ public XWikiExtension(XWikiExtensionRepository repository, ExtensionVersion rest
         // Repositories
         for (ExtensionRepository restRepository : restExtension.getRepositories()) {
             try {
-                addRepository(toDefaultExtensionRepositoryDescriptor(restRepository));
+                addRepository(toExtensionRepositoryDescriptor(restRepository, factory));
             } catch (URISyntaxException e) {
                 // TODO: Log something ?
             }
         }
 
         // Dependencies
-        setDependencies(toXWikiExtensionDependencies(restExtension.getDependencies()));
+        setDependencies(toXWikiExtensionDependencies(restExtension.getDependencies(), factory));
 
         // Managed dependencies
-        setManagedDependencies(toXWikiExtensionDependencies(restExtension.getManagedDependencies()));
+        setManagedDependencies(toXWikiExtensionDependencies(restExtension.getManagedDependencies(), factory));
 
         // File
 
@@ -194,13 +193,13 @@ public XWikiExtension(XWikiExtensionRepository repository, ExtensionVersion rest
     }
 
     private Collection<XWikiExtensionDependency> toXWikiExtensionDependencies(
-        List<ExtensionDependency> restDependencies)
+        List<ExtensionDependency> restDependencies, ExtensionFactory factory)
     {
         List<XWikiExtensionDependency> newDependencies = new ArrayList<>(restDependencies.size());
 
         for (ExtensionDependency dependency : restDependencies) {
             newDependencies.add(new XWikiExtensionDependency(dependency,
-                this.repository != null ? this.repository.getDescriptor() : null));
+                this.repository != null ? this.repository.getDescriptor() : null, factory));
         }
 
         return newDependencies;
@@ -215,10 +214,10 @@ protected static DefaultExtensionScmConnection toDefaultExtensionScmConnection(E
         }
     }
 
-    protected static DefaultExtensionRepositoryDescriptor toDefaultExtensionRepositoryDescriptor(
-        ExtensionRepository restRepository) throws URISyntaxException
+    protected static ExtensionRepositoryDescriptor toExtensionRepositoryDescriptor(ExtensionRepository restRepository,
+        ExtensionFactory factory) throws URISyntaxException
     {
-        return new DefaultExtensionRepositoryDescriptor(restRepository.getId(), restRepository.getType(),
+        return factory.getExtensionRepositoryDescriptor(restRepository.getId(), restRepository.getType(),
             new URI(restRepository.getUri()));
     }
 
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionDependency.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionDependency.java
index 045199596..741af56b9 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionDependency.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionDependency.java
@@ -22,6 +22,8 @@
 import java.net.URISyntaxException;
 
 import org.xwiki.extension.AbstractExtensionDependency;
+import org.xwiki.extension.Extension;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.xwiki.model.jaxb.ExtensionDependency;
 import org.xwiki.extension.repository.xwiki.model.jaxb.ExtensionRepository;
@@ -38,9 +40,11 @@
     /**
      * @param restDependency the REST representation of an Extension dependency
      * @param extensionRepository the repository of the parent extension
+     * @param factory tool to share instances of various parts of an {@link Extension}
+     * @since 8.4
      */
     public XWikiExtensionDependency(ExtensionDependency restDependency,
-        ExtensionRepositoryDescriptor extensionRepository)
+        ExtensionRepositoryDescriptor extensionRepository, ExtensionFactory factory)
     {
         super(restDependency.getId(), new DefaultVersionConstraint(restDependency.getConstraint()));
 
@@ -52,7 +56,7 @@ public XWikiExtensionDependency(ExtensionDependency restDependency,
         // Repositories
         for (ExtensionRepository restRepository : restDependency.getRepositories()) {
             try {
-                addRepository(XWikiExtension.toDefaultExtensionRepositoryDescriptor(restRepository));
+                addRepository(XWikiExtension.toExtensionRepositoryDescriptor(restRepository, factory));
             } catch (URISyntaxException e) {
                 // TODO: Log something ?
             }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepository.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepository.java
index a0107e842..3ec42c625 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepository.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepository.java
@@ -50,6 +50,7 @@
 import org.xwiki.extension.ExtensionLicenseManager;
 import org.xwiki.extension.ExtensionNotFoundException;
 import org.xwiki.extension.ResolveException;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.rating.ExtensionRating;
 import org.xwiki.extension.repository.AbstractExtensionRepository;
 import org.xwiki.extension.repository.DefaultExtensionRepositoryDescriptor;
@@ -98,6 +99,8 @@
 
     private final transient HttpClientFactory httpClientFactory;
 
+    private final transient ExtensionFactory factory;
+
     private final transient UriBuilder rootUriBuider;
 
     private final transient UriBuilder extensionVersionUriBuider;
@@ -118,7 +121,7 @@
 
     public XWikiExtensionRepository(ExtensionRepositoryDescriptor repositoryDescriptor,
         XWikiExtensionRepositoryFactory repositoryFactory, ExtensionLicenseManager licenseManager,
-        HttpClientFactory httpClientFactory) throws Exception
+        HttpClientFactory httpClientFactory, ExtensionFactory factory) throws Exception
     {
         super(repositoryDescriptor.getURI().getPath().endsWith("/")
             ? new DefaultExtensionRepositoryDescriptor(repositoryDescriptor.getId(), repositoryDescriptor.getType(),
@@ -128,6 +131,7 @@ public XWikiExtensionRepository(ExtensionRepositoryDescriptor repositoryDescript
         this.repositoryFactory = repositoryFactory;
         this.licenseManager = licenseManager;
         this.httpClientFactory = httpClientFactory;
+        this.factory = factory;
 
         // Uri builders
         this.rootUriBuider = createUriBuilder(Resources.ENTRYPOINT);
@@ -333,7 +337,7 @@ public Extension resolve(ExtensionId extensionId) throws ResolveException
     {
         try {
             return new XWikiExtension(this, (ExtensionVersion) getRESTObject(this.extensionVersionUriBuider,
-                extensionId.getId(), extensionId.getVersion().getValue()), this.licenseManager);
+                extensionId.getId(), extensionId.getVersion().getValue()), this.licenseManager, this.factory);
         } catch (ResourceNotFoundException e) {
             throw new ExtensionNotFoundException("Could not find extension [" + extensionId + "]", e);
         } catch (Exception e) {
@@ -365,7 +369,7 @@ public Extension resolve(ExtensionDependency extensionDependency) throws Resolve
 
             return new XWikiExtension(this,
                 (ExtensionVersion) getRESTObject(this.extensionVersionUriBuider, extensionDependency.getId(), version),
-                this.licenseManager);
+                this.licenseManager, this.factory);
         } catch (ResourceNotFoundException e) {
             throw new ExtensionNotFoundException(
                 "Could not find any extension to match dependency [" + extensionDependency + "]", e);
@@ -432,7 +436,7 @@ private ExtensionVersions resolveExtensionVersions(String id, VersionConstraint
 
         List<Extension> extensions = new ArrayList<Extension>(restExtensions.getExtensions().size());
         for (ExtensionVersion restExtension : restExtensions.getExtensions()) {
-            extensions.add(new XWikiExtension(this, restExtension, this.licenseManager));
+            extensions.add(new XWikiExtension(this, restExtension, this.licenseManager, this.factory));
         }
 
         return new CollectionIterableResult<Extension>(restExtensions.getTotalHits(), restExtensions.getOffset(),
@@ -477,7 +481,7 @@ private ExtensionVersions resolveExtensionVersions(String id, VersionConstraint
 
         List<Extension> extensions = new ArrayList<Extension>(restExtensions.getExtensions().size());
         for (ExtensionVersion restExtension : restExtensions.getExtensions()) {
-            extensions.add(new XWikiExtension(this, restExtension, this.licenseManager));
+            extensions.add(new XWikiExtension(this, restExtension, this.licenseManager, this.factory));
         }
 
         return new CollectionIterableResult<Extension>(restExtensions.getTotalHits(), restExtensions.getOffset(),
@@ -504,7 +508,7 @@ public ExtensionRating getRating(String extensionId, String extensionVersion) th
         try {
             return new XWikiExtension(this,
                 (ExtensionVersion) getRESTObject(this.extensionVersionUriBuider, extensionId, extensionVersion),
-                this.licenseManager).getRating();
+                this.licenseManager, this.factory).getRating();
         } catch (ResourceNotFoundException e) {
             throw new ExtensionNotFoundException(
                 "Could not find extension with id [" + extensionId + "] and version [" + extensionVersion + "]", e);
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryFactory.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryFactory.java
index 690d23ab8..0ca89b1a2 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryFactory.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/main/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryFactory.java
@@ -31,6 +31,7 @@
 import org.xwiki.component.phase.Initializable;
 import org.xwiki.component.phase.InitializationException;
 import org.xwiki.extension.ExtensionLicenseManager;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.repository.AbstractExtensionRepositoryFactory;
 import org.xwiki.extension.repository.ExtensionRepository;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
@@ -52,6 +53,9 @@
     @Inject
     private HttpClientFactory httpClientFactory;
 
+    @Inject
+    private ExtensionFactory factory;
+
     private JAXBContext jaxbContext;
 
     @Override
@@ -93,8 +97,8 @@ public ExtensionRepository createRepository(ExtensionRepositoryDescriptor reposi
         throws ExtensionRepositoryException
     {
         try {
-            return new XWikiExtensionRepository(repositoryDescriptor, this, this.licenseManager,
-                this.httpClientFactory);
+            return new XWikiExtensionRepository(repositoryDescriptor, this, this.licenseManager, this.httpClientFactory,
+                this.factory);
         } catch (Exception e) {
             throw new ExtensionRepositoryException("Failed to create repository [" + repositoryDescriptor + "]", e);
         }
diff --git a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/test/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryTest.java b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/test/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryTest.java
index ca65322ea..413bd661d 100644
--- a/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/test/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryTest.java
+++ b/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-repositories/xwiki-commons-extension-repository-xwiki/src/test/java/org/xwiki/extension/repository/xwiki/internal/XWikiExtensionRepositoryTest.java
@@ -37,6 +37,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.xwiki.extension.ExtensionLicenseManager;
+import org.xwiki.extension.internal.ExtensionFactory;
 import org.xwiki.extension.repository.ExtensionRepositoryDescriptor;
 import org.xwiki.extension.repository.http.internal.HttpClientFactory;
 import org.xwiki.extension.repository.result.IterableResult;
@@ -87,10 +88,10 @@ public void setUp() throws Exception
         when(httpClient.execute(any(HttpGet.class))).thenReturn(response);
         HttpClientFactory httpClientFactory = mock(HttpClientFactory.class);
         when(httpClientFactory.createClient(null, null)).thenReturn(httpClient);
+        ExtensionFactory extensionFactory = new ExtensionFactory();
 
-        this.repository =
-            new XWikiExtensionRepository(repositoryDescriptor, repositoryFactory, mock(ExtensionLicenseManager.class),
-                httpClientFactory);
+        this.repository = new XWikiExtensionRepository(repositoryDescriptor, repositoryFactory,
+            mock(ExtensionLicenseManager.class), httpClientFactory, extensionFactory);
     }
 
     @Test
